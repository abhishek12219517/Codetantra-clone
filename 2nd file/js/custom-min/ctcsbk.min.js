function initAndBindCTCodingKeyboardWithAce(e) {
    var n, o = e || {}, a = !1, i = initCTMobileCodingKeyboard({
        container: o.container,
        onKeyPress: function(e) {
            if (n && !n.getReadOnly()) switch (e) {
              case "{backspace}":
                n.remove("left");
                break;

              case "{ent}":
                n.insert("\n");
                break;

              case "{undo}":
                n.getSession().getUndoManager().undo();
                break;

              case "{redo}":
                n.getSession().getUndoManager().redo();
            }
        },
        onInput: function(e) {
            n && !n.getReadOnly() && n.insert(e);
        }
    });
    function s() {
        return o.container ? null : "/secure/topic-details1.jsp" === window.location.pathname || "/secure/take-test1.jsp" === window.location.pathname || "/secure/unst.jsp" === window.location.pathname ? "#myModal" : "body";
    }
    function t(e) {
        document.activeElement === (n && n.textInput && "function" == typeof n.textInput.getElement ? n.textInput.getElement() : null) || e.target.className.includes("hg-button") || e.target.className.includes("hg-row") || e.target.className.includes("simple-keyboard") || ($(s()).css("padding-bottom", ""), 
        i.hideKeyboard(), "function" == typeof o.onKeyboardHidden && o.onKeyboardHidden(n));
    }
    return document.addEventListener("click", t), {
        destroy: function() {
            $(s()).css("padding-bottom", ""), document.removeEventListener("click", t), 
            i.destroyAll(), a = !0;
        },
        setActiveAceEditor: function(e, t) {
            a || (n = e, i.setOptions({
                inputName: t
            }), n.getReadOnly()) || a || ((e = document.querySelector(s())) && e.style.setProperty("padding-bottom", screen.availHeight < screen.availWidth ? "230px" : "250px", "important"), 
            i.showKeyboard(), "function" == typeof o.onKeyboardShown && o.onKeyboardShown(n));
        }
    };
}

function initCTMobileCodingKeyboard(t) {
    var e;
    function n(e) {
        "{shift}" === e || "{lock}" === e ? d.setOptions({
            layoutName: "default" === d.options.layoutName ? "shift" : "default"
        }) : "{alt}" !== e && "{abc}" !== e || d.setOptions({
            layoutName: "alt" !== d.options.layoutName ? "alt" : "default"
        });
    }
    var o, a, i, s = "hg-theme-default", d = (o = t.container, (a = document.createElement("div")).className = "simple-keyboard", 
    a.style.position = "fixed", a.style.zIndex = "9999999", a.style.bottom = "0", 
    a.style.left = "0", a.style.display = "none", i = document.getElementById(o), 
    e = a, (o && i && 0 === i.getElementsByClassName("simple-keyboard").length ? i : document.body).appendChild(a), 
    document.getElementById("simple-keyboard-styles") || ((o = document.createElement("style")).id = "simple-keyboard-styles", 
    document.head.appendChild(o), o.appendChild(document.createTextNode(".hg-activeButton {   transform: scaleY(2) scaleX(2) translateZ(1px) translateY(-8px) !important;   padding-bottom: 28px !important;   font-weight: bold !important;   z-index: 99999 !important}.hg-theme-default {    overflow: visible !important;}@media screen and (orientation:landscape) {    .hg-button {        height: 30px !important;   }   .hg-activeButton {       transform: scaleY(1.6) translateZ(1px) translateY(-9px) !important;       padding-bottom: 16px !important;   }}"))), 
    new window.SimpleKeyboard.default({
        onKeyPress: function(e) {
            try {
                "function" == typeof navigator.vibrate && navigator.vibrate(24);
            } catch (e) {}
            /^{.+}$/.test(e) && n(e), "function" == typeof t.onKeyPress && t.onKeyPress(e);
        },
        onChange: function(e) {
            "function" == typeof t.onInput && t.onInput(e), d.clearInput();
        },
        theme: s,
        mergeDisplay: !0,
        preventMouseDownDefault: !0,
        layoutName: "default",
        buttonAttributes: [ {
            attribute: "style",
            value: "flex-grow: 2;",
            buttons: "{alt} {ent}"
        }, {
            attribute: "style",
            value: "flex-grow: 4;",
            buttons: "{space}"
        } ],
        layout: {
            default: [ "1 2 3 4 5 6 7 8 9 0 - =", "q w e r t y u i o p [ ]", "a s d f g h j k l ` ; '", "z x c v b n m , . / \\ {backspace}", "{shift} {tab} {alt} {space} {undo} {redo} {ent}" ],
            shift: [ "! @ # $ % ^ & * ( ) _ +", "Q W E R T Y U I O P { }", 'A S D F G H J K L ~ : "', "Z X C V B N M < > ? | {backspace}", "{shift} {tab} {alt} {space} {undo} {redo} {ent}" ],
            alt: [ "1 2 3 4 5 6 7 8 9 0", "@ # $ _ & - + ( ) /", "~ ` | ^  = { } \\ < >", "* \" ' : ; ! ? [ ] {backspace}", "{shift} {tab} {abc} {space} . , {ent}" ]
        },
        display: {
            "{numbers}": "123",
            "{ent}": "⏎",
            "{tab}": "⇥",
            "{backspace}": "⌫",
            "{shift}": "⇧",
            "{abc}": "ABC",
            "{alt}": ".?123",
            "{space}": "⎵",
            "{redo}": "↻",
            "{undo}": "↺"
        }
    }));
    return d.showKeyboard = function() {
        d.setOptions({
            theme: s + " show d-block"
        });
    }, d.hideKeyboard = function() {
        d.setOptions({
            theme: s + " hide d-none"
        });
    }, d.destroyAll = function() {
        e && e.remove(), d.destroy();
    }, d;
}
//# sourceMappingURL=ctcsbk.min.js.map