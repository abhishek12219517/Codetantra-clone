!function(f) {
    var j, m, u, i, G, O, Y, o, z, E, l, d = !1, p = !1, v = !1, g = [], r = {}, C = "", q = require("ace/range").Range, c = "We encountered a problem starting Interactive Code Walkthrough.<br/>Please close and reopen this question and try again.", h = {}, x = 0, b = [], t = !1, w = 0, y = {}, k = [], L = !1, I = 0;
    function T() {
        f.preloader.active(!1), $("#glass-pane").css("display", "none");
    }
    function U() {
        var e = f.getFileContentForVisualization(), t = "", n = {};
        return e.forEach(function(e) {
            t += e.fileContent + "\n", n[e.fileName] = e.fileContent;
        }), {
            fileText: t,
            fileTextMap: n
        };
    }
    function Q(e) {
        if ("debug-error" !== e.command) {
            var t = e.response, n = (e.command, e.data);
            switch (t) {
              case "output":
                !function(o) {
                    o.forEach(function(e, t) {
                        for (var n = e.callStack, s = n[0].control = t, a = 1; a < n.length; a++) n[a].file && (n[a].control = function(e, t, n) {
                            for (var s = e.file.split("/").pop(), a = t; 0 <= a; a--) {
                                var o = n[a];
                                if (o.file === s && o.line === e.line && o.func === e.func) return a;
                            }
                            return -1;
                        }(n[a], s, o), s = n[a].control);
                    });
                }(n), !function(e) {
                    e.forEach(function(e) {
                        var t = e.context;
                        t.IdNameMap = {}, t.names.forEach(function(e) {
                            "" === e.name && (t.IdNameMap[e.id] = e);
                        });
                    });
                }(n), X(b[m].debugResult = n);
                break;

              case "time-out":
                T(), f.alertify.error("Interactive Code Walkthrough timed out.<br/>It is possible that your code has an infinite loop or is taking too long to execute for this test case.<br/>Please check and try again.", "9");
                break;

              default:
                T(), f.alertify.error(c, "3");
            }
        } else f.alertify.error(e.response, "3");
    }
    function X(e) {
        if (E = e, T(), E.length) {
            $("#debugResultHeader").removeClass("d-none"), $("#debugModeToggle1").prop("checked", !1), 
            v = !0, se();
            for (var t = 0; t < b.length; t++) t !== m && $("#executionResult-" + t).addClass("d-none"), 
            $(".debugAlert-" + t).addClass("d-none");
            $("#executionResult-" + m).css("user-select", "none"), $(".outputError").addClass("d-none"), 
            $(".outputSuccess").addClass("d-none"), $(".debugOutputErrorStatus").removeClass("d-none"), 
            $(".debugExtra").addClass("d-none"), ae(), e = $("#debugContextDiv");
            var n = $(".multipleFilesLi.compilationError");
            n.each(function(e) {
                var e = n.eq(e).attr("id"), e = e.substring(e.indexOf("-") + 1), t = $("#compilationErrorEditor-" + e);
                t.append('<div class="debugTransparentPane"><div id="lineContext-' + e + '" class="lineContext d-none"><div id="debugUpArrow-' + e + '" class="debugUpArrow"></div><div style="padding: 0; background-color: rgba(144, 144, 0, 0.8);"><div class="debugHeading">Line: <span id="lineContextLine-' + e + '"></span> </div></div><div class="lineContextTablesContainer" style="pointer-events: auto; max-height: ' + .49 * t.height() + 'px"><div style="padding-bottom: 8px;"><div class="btn btn-sm debugCollapseBtn" >Local</div><div id="lineLocalContext-' + e + '" class="debugFont" style="max-width: 300px;"><table class="debugTable" style="width: 100%;"><thead><tr><td class="debugtdh">Variable</td><td class="debugtdh">Value</td></tr></thead><tbody id="lineLocalContextTable-' + e + '"></tbody></table></div></div><div style="padding-bottom: 8px;"><div class="btn btn-sm debugCollapseBtn">Global</div><div id="lineGlobalContext-' + e + '" class="debugFont" style="max-width: 300px;"><table class="debugTable" style="width: 100%;"><thead><tr><td class="debugtdh">Variable</td><td class="debugtdh">Value</td></tr></thead><tbody id="lineGlobalContextTable-' + e + '"></tbody></table></div></div><div id="lineStatus-' + e + '"></div></div><div id="debugDownArrow-' + e + '" class="debugDownArrow"></div></div></div>'), 
                h[t] = "top", $(".debugTransparentPane").on("mousewheel", function(e) {
                    return e.stopPropagation(), !1;
                });
            }), function() {
                if (!p) for (var e, t, n = function() {
                    var t = "", n = 1, s = [], a = -1, e = (b[m].cExecutionFlowArr.forEach(function(e) {
                        e.hasOwnProperty("programOutput") && ("" === e.programOutput ? t += "\n" : (t += e.programOutput, 
                        e.error && s.push(n), n++)), e.hasOwnProperty("userInput") && (t = t + e.userInput + "\n");
                    }), t.split("\n"));
                    "" === e[e.length - 1] && e.pop();
                    t = e;
                    var o, r = [], i = [], l = (E.forEach(function(e, t) {
                        e.hasOwnProperty("output") && (r.push(e.output.join("")), 
                        i.push(t)), e.hasOwnProperty("exception") && (a = t);
                    }), 0);
                    b[m] && b[m].hasOwnProperty("extraErrors") && 0 < b[m].extraErrors.length && (b[m].extraErrors.forEach(function(e) {
                        e.hasOwnProperty("userOutput") && (k.push(n++), l++);
                    }), o = i.slice(-l));
                    -1 !== a && (y[n] = a);
                    return k.forEach(function(e, t) {
                        y[e] = o[t];
                    }), {
                        expectedOutputs: t,
                        userOutputs: r,
                        controlsHavingOutput: i,
                        errorLinesList: s
                    };
                }(), s = 0, a = "", o = 0, r = 0, i = 0, l = n.errorLinesList[s++], d = 0; d < n.expectedOutputs.length; d++) {
                    var u = !1, c = n.expectedOutputs[d] + "\n";
                    if (i === n.userOutputs.length) return function(e, t) {
                        var n, s = E.length - 1;
                        for (;t !== e.length; ) n = e[t++], y[n] = s;
                    }(n.errorLinesList, s - 1);
                    for (a = n.userOutputs[i++], o = r = 0; r < c.length && i <= n.controlsHavingOutput.length; r++, 
                    o++) {
                        if (o === a.length && "\n" !== a[a.length - 1]) {
                            if (a = n.userOutputs[i++], i > n.controlsHavingOutput.length) return;
                            u = !(o = 0);
                        }
                        if (a[o] !== c[r]) {
                            if ("\n" === c[r] && 1 < i) {
                                if (u && d === l - 1) {
                                    if (i--, e = n.controlsHavingOutput[i - 1], 
                                    y[l] = e, s === n.errorLinesList.length) return;
                                    l = n.errorLinesList[s++];
                                }
                            } else if (d === l - 1) {
                                if (e = n.controlsHavingOutput[i - 1], y[l] = e, 
                                s === n.errorLinesList.length) return;
                                l = n.errorLinesList[s++], i = Z(a, n.userOutputs, i, n.controlsHavingOutput);
                                break;
                            }
                            if (e = n.controlsHavingOutput[i - 1], i = Z(a, n.userOutputs, i, n.controlsHavingOutput), 
                            a = n.userOutputs[i], i >= n.userOutputs.length) return;
                            if (t = K(a, d, n.userOutputs, i), d = t.orgOutputId, 
                            i = t.debugControl, a = t.debugTxt, l - 1 <= d) {
                                if (y[l] = e, s === n.errorLinesList.length) return;
                                l = n.errorLinesList[s++];
                            }
                            e = n.controlsHavingOutput[i - 1];
                            break;
                        }
                        if (r === c.length - 1 && o !== a.length - 1) {
                            if (d === l - 1) {
                                if (e = n.controlsHavingOutput[i - 1], y[l] = e, 
                                s === n.errorLinesList.length) return;
                                l = n.errorLinesList[s++];
                            }
                            if (e = n.controlsHavingOutput[i - 1], t = K(a, d, n.userOutputs, i), 
                            d = t.orgOutputId, i = t.debugControl, a = t.debugTxt, 
                            l - 1 <= d) {
                                if (y[l] = e, s === n.errorLinesList.length) return;
                                l = n.errorLinesList[s++];
                            }
                        }
                    }
                }
            }();
            e.removeClass("d-none"), $("#prevContext").attr("disabled", !0), $("#nextContext").attr("disabled", !1), 
            D("#localContext"), D("#globalContext"), D("#callStack"), $(document).keydown(J), 
            x = function() {
                if (0 < w && (N(), y.hasOwnProperty(w))) return y[w];
                return 0;
            }(), P(0), $(".debugHide").addClass("d-none"), $("#debugClose").removeClass("d-none"), 
            $("#debugHelp").removeClass("d-none"), $("#resultsTabsAndDivs").removeClass("resultsTabsAndDivsClass");
            var s = $("#compilationErrorQuestionTabPanelsDiv"), a = (s.css("pointer-events", "none"), 
            $(window).height());
            function o(e) {
                r = !0, "mousedown" === e.type && (i = {
                    left: e.pageX - l.offset().left,
                    top: e.pageY - l.offset().top
                }, d.css("cursor", "grabbing"), l.css("cursor", "grabbing"));
            }
            $("#modalBody").css("height", a), $(".panel-body").css("height", .94 * a), 
            $(".codingEditorClass").each(function() {
                $(this).css("height", .5 * a);
            }), oe(), e.offset({
                left: s.width() - 3 * e.width()
            }), le();
            var r, i, l = $("#contextPanelHeading"), d = $("#myModal"), u = $("#debugContextDiv");
            l.on("mousedown", o), l.on("touchstart", o), $(document).on("mouseup mousemove touchend touchmove", function(e) {
                r && ("mouseup" === e.type || "touchend" === e.type ? (r = !1, l.css("cursor", "grab"), 
                d.css("cursor", "default")) : "touchmove" === e.type ? u.offset(de(d, u, e.originalEvent.touches[0])) : u.offset(de(d, u, e, i)));
            }), $("#debugFuncCheckbox").on("change", function() {
                var e = $(this).is(":checked");
                L = !!e, P(0);
            }), $("#questionRightSidePanelDiv").removeClass("col-md-6").addClass("col-md-12"), 
            $(".compilationErrorQuestionTabPanelsParentDiv").addClass("col-md-6"), 
            $("#resultsTabsAndDivs").addClass("col-md-6"), p = !0;
        } else f.alertify.error(c, "2");
    }
    function D(t) {
        var e = $(t);
        e.collapse("show"), e.on("show.bs.collapse", function() {
            $(".contextArrow", t + "Btn").html("&mdash;");
        }), e.on("hidden.bs.collapse", function() {
            var e;
            e = $(".contextArrow", t + "Btn"), $(this).hasClass("in") && e.html("&plus;");
        });
    }
    var n = {
        123: !0,
        116: !0
    };
    function J(e) {
        if (t) if (39 === e.which) P(1); else if (37 === e.which) P(-1); else if (27 === e.which) s(); else if (!n[e.which]) return e.preventDefault(), 
        !1;
    }
    function K(e, t, n, s) {
        e = (e.match(/\n/g) || []).length;
        return {
            orgOutputId: t = Math.min(t + e - 1, w),
            debugControl: s,
            debugTxt: n[s - 1]
        };
    }
    function Z(e, t, n, s) {
        for (;!e.includes("\n") && (e = t[n++], n !== s.length); );
        return n;
    }
    var P = _.debounce(function(e) {
        if (j = {}, C = "", -1 === e) {
            if (0 === x) return;
            x--;
        } else if (1 === e) {
            if (x === E.length - 1) return;
            x++;
        }
        ae(), 0 === x ? ($("#nextContext").attr("disabled", 1 === E.length), $("#prevContext").attr("disabled", !0)) : x === E.length - 1 ? ($("#nextContext").attr("disabled", !0), 
        $("#prevContext").attr("disabled", 1 === E.length)) : ($("#nextContext").attr("disabled", !1), 
        $("#prevContext").attr("disabled", !1));
        var t = E[x], u = function(a) {
            var o = "", r = $(".multipleFilesLi.compilationError");
            return r.each(function(e) {
                var e = r.eq(e).attr("id"), e = e.substring(e.indexOf("-") + 1), t = $("#compilationErrorEditor-" + e).attr("fileName"), n = $("#compilationErrorTab-" + e), s = $("a", "#compilationErrorLi-" + e);
                n.removeClass("active"), s.removeClass("active"), a === t && (o = e, 
                n.addClass("active"), s.addClass("active"));
            }), o;
        }(t.file), n = $("#compilationErrorEditor-" + u).data("editor"), s = t.context, a = t.callStack;
        t.file.replace(".", ""), t.func.replace(/^_*/, ""), $("#fileName").html(t.file), 
        $("#funcName").html(f.replaceWhiteSpaceWithCtTags(f.replaceLTandGRTags(t.func))), 
        $("#lineNumber").html(t.line), $("#lineContextLine-" + u).html(t.line), 
        $("#globalContextTable").html(""), $("#localContextTable").html(""), $("#callStackTable").html(""), 
        function(e, t) {
            var n, s = $("#testCaseDebugOutput");
            n = !!e.hasOwnProperty("output") && (s.html(""), !0);
            for (var a, o, r = "", i = 0, l = (function() {
                for (var e = $(".executionResult-" + m).length, t = 0; t < e; t++) $("#executionResult-" + m + "-" + t + "-1-1").html("");
                $(".outputError").addClass("d-none"), $(".debugOutputErrorStatus").removeClass("d-none"), 
                $(".debugAlert-" + m).addClass("d-none"), $(".debugExtra").addClass("d-none");
            }(), $(".executionResult-" + m).length), d = !1, u = 0; u <= x; u++) if (E[u].hasOwnProperty("output")) {
                var c = E[u].output.join("");
                for (a = (r += c).split("\n"), i = 0; i < a.length - 1; i++) {
                    var p = $("#executionResult-" + m + "-" + i + "-1-0"), g = $("#executionResult-" + m + "-" + i + "-0-0"), h = $("#executionResult-" + m + "-" + i + "-2-0");
                    (o = $("#executionResult-" + m + "-" + i + "-1-1")).html(""), 
                    o.addClass("d-none"), o.parent().css("background-color", ""), 
                    n && u === x && i === a.length - 2 && "" === a[i + 1] ? (p.addClass("debugBlink"), 
                    d && e.hasOwnProperty("output") && (re(a.length), $("#extraLine-" + m + "-" + i).addClass("debugBlink"))) : p.removeClass("debugBlink"), 
                    p.removeClass("d-none"), h.removeClass("d-none"), h.hasClass("debugCross") && V(), 
                    g.parent().css("background-color", ""), g.removeClass("d-none"), 
                    $("#executionResult-" + m + "-" + i + "-0-1").addClass("d-none");
                }
                i === l ? (re(a.length), V(), $(".debugExtra").removeClass("d-none"), 
                d = !0) : ($(".outputSuccess").addClass("d-none"), $(".debugOutputErrorStatus").removeClass("d-none")), 
                "" !== a[i] && ((o = $("#executionResult-" + m + "-" + i + "-1-1")).removeClass("d-none"), 
                n || i === w - 1 ? (c = "#executionResult-" + m + "-" + i + "-1-1", 
                y.hasOwnProperty(i + 1) || i === w - 1 ? o.html("<span id = 'debugSymbolForErrorLine" + c + "' ><a id = '" + i + "Inline' class='btn btn-xs mini-pulsing-button-no-hover' title='Jump to Code'><i id = 'debugImage" + i + "Inline' class='fa fa-bug chameleon-mini-bug-no-hover' '></i></a></span><span class='debugBlink'>" + f.replaceWhiteSpaceWithCtTags(a[i]) + "</span>") : o.html("<span class='debugBlink'>" + f.replaceWhiteSpaceWithCtTags(a[i]) + "</span>")) : o.html(f.replaceWhiteSpaceWithCtTags(a[i])));
            }
            var b = (a = r.split("\n").map(f.replaceWhiteSpaceWithCtTags))[a.length - 1];
            r = "" !== b && n && 0 <= t && t <= E.length - 1 ? (a[a.length - 1] = "<span class='debugBlink'>" + b + "</span>", 
            a.join("\n")) : "" === b && n && 0 <= t && t <= E.length - 1 ? (a[a.length - 2] = "<span class='debugBlink'>" + a[a.length - 2] + "</span>", 
            a.join("\n")) : f.replaceWhiteSpaceWithCtTags(r);
            r += function(e) {
                var t = "";
                if (e.hasOwnProperty("exception")) switch (ie(), V(), $(".debugExtra").removeClass("d-none"), 
                e.exception) {
                  case "SIGSEGV":
                    t += "\n" + f.replaceWhiteSpaceWithCtTags("Segmentation fault (core dumped)"), 
                    C = "Segmentation fault (core dumped).";
                    break;

                  case "SIGFPE":
                    t += "\n" + f.replaceWhiteSpaceWithCtTags("Arithmetic exception (core dumped)"), 
                    C = "Arithmetic exception (core dumped).";
                    break;

                  case "SIGILL":
                    t += "\n" + f.replaceWhiteSpaceWithCtTags("Illegal instruction (core dumped)"), 
                    C = "Illegal instruction (core dumped).";
                    break;

                  case "SIGBUS":
                    t += "\n" + f.replaceWhiteSpaceWithCtTags("Bus error (core dumped)"), 
                    C = "Bus error (core dumped).";
                    break;

                  case "extraInputs":
                    C = "User program is reading more inputs than expected.";
                    break;

                  default:
                    C = e.exception || "";
                }
                return t;
            }(E[x]), s.html("<pre class='debugDisplayOut' style='height: 300px; overflow: auto;'>" + r + "</pre>"), 
            t === E.length - 1 && (ie(), V(), $(".debugExtra").removeClass("d-none"), 
            $(".debugOutUser").addClass("d-none"), e.hasOwnProperty("output")) && (i--, 
            $("#executionResult-" + m + "-" + i + "-1-0").addClass("debugBlink"));
            b = $(".debugDisplayOut", s);
            b.scrollTop(b.prop("scrollHeight")), v && (t = $("#executionOutViewport")).scrollTop(t.prop("scrollHeight"));
        }(t, x), a.forEach(function(e) {
            var t;
            e.file && (t = "Dbg.setCurrentControl(" + e.control + ")", $("#callStackTable").append('                    <tr>                        <td class="debugtd debugClickTd" onclick="' + t + '">                            <span class="debugFileName">' + e.file.split("/").pop() + '</span>:                            <span class="debugFuncName">' + f.replaceWhiteSpaceWithCtTags(f.replaceLTandGRTags(e.func)) + '</span>:                            <span class="debugLineNumber">' + e.line + "</span>                        </td>                        </tr>"));
        }), I = 0, O = s.IdValueMap, Y = s.IdNameMap, (z = s.names).forEach(function(e) {
            e.hasOwnProperty("scope") && e.scope && S(e.name) && H(e, "global" === e.scope ? "#globalContextTable" : "#localContextTable", 0);
        }), o = s.IdValueMap, g[x] || (g[x] = j);
        (function(e, t, n, s) {
            {
                var a;
                t.setHighlightActiveLine(!1), t.setHighlightGutterLine(!1), t.gotoLine(e, 0, !0), 
                f.Dbg.lastHighlightedMarker && (a = $(".multipleFilesLi.compilationError")).each(function(e) {
                    var e = a.eq(e).attr("id"), e = e.substring(e.indexOf("-") + 1), t = $("#compilationErrorEditor-" + e).data("editor");
                    t.session.removeMarker(f.Dbg.lastHighlightedMarker[e]), t.session.clearBreakpoint(f.Dbg.lastHighlightedLine);
                });
            }
            f.Dbg.lastHighlightedBug && t.session.clearBreakpoint(f.Dbg.lastHighlightedBug);
            0 < e && (f.Dbg.lastHighlightedLine = e - 1, f.Dbg.lastHighlightedMarker || (f.Dbg.lastHighlightedMarker = {}), 
            f.Dbg.lastHighlightedMarker[n] = t.session.addMarker(new q(e - 1, 1, e - 1, 120), "debugHighlight debugHighlight-" + n, "screenLine"), 
            t.session.setBreakpoint(e - 1));
            N();
            n = E[x].line;
            if (Object.values(y).includes(x)) for (var o in y) if (y.hasOwnProperty(o) && y[o] === x) {
                w = o;
                break;
            }
            e = y[Object.keys(y)[0]];
            x < e && (w = 0);
            0 < w && 1 < (e = E[y[w] - 1].line) && (n < e && -1 === s || e < n) && (t.session.setBreakpoint(e - 1, "fa fa-bug chameleon-bug pl-2"), 
            f.Dbg.lastHighlightedBug = e - 1);
            !function() {
                if (Object.values(y).includes(x)) for (var e in y) y.hasOwnProperty(e) && y[e] === x && ($("#" + e).addClass("mini-pulsing-button-no-hover"), 
                $("#debugImage" + e).addClass("chameleon-mini-bug-no-hover"));
            }();
        })(t.line, n, u, e), function(e, t, n) {
            $("#lineGlobalContextTable-" + n).html(""), $("#lineLocalContextTable-" + n).html("");
            var s, a, o = $("#lineLocalContext-" + n).parent(), r = $("#lineGlobalContext-" + n).parent(), i = (o.removeClass("d-none"), 
            r.removeClass("d-none"), $("#lineStatus-" + n));
            i.html(""), C ? (o.addClass("d-none"), r.addClass("d-none"), i.html(C), 
            C = "") : (s = G[t + "_" + e], a = x < E.length - 1 && s && Object.keys(s).length && E[x + 1].func === E[x].func ? x + 1 : x, 
            t = E[a].context.names.filter(function(e) {
                return s && s[e.name.replace(/.*::|\(.*\)/g, "")];
            }), e = t.filter(function(e) {
                return !e.func;
            }).length, t.forEach(function(e) {
                e.hasOwnProperty("name") && e.scope && "global" === e.scope && S(e.name) ? H(e, "#lineGlobalContextTable-" + n, 0, !0, a) : e.hasOwnProperty("name") && e.scope && S(e.name) && H(e, "#lineLocalContextTable-" + n, 0, !0, a);
            }), t.length && (L || e) || (o.addClass("d-none"), r.addClass("d-none"), 
            i.html("No variables are being accessed or modified in this line.")));
        }(t.line, t.file, u);
        var c = $("#debugContextDiv");
        Object.keys(r).forEach(function(e) {
            $("#" + e + "--" + e).collapse(r[e] ? "show" : "hide");
        }), setTimeout(function() {
            var e = u, t = $("#lineContext-" + e), n = $("#debugUpArrow-" + e), s = $("#debugDownArrow-" + e), a = $("#compilationErrorEditor-" + e), o = parseInt($(".ace_line").css("height"), 10), r = (n.addClass("d-none"), 
            s.addClass("d-none"), t.removeClass("d-none"), parseInt(t.css("height"), 10)), i = (t.addClass("d-none"), 
            parseInt(a.css("height"), 10)), e = $(".debugHighlight-" + e), l = i - parseInt(e.css("top"), 10) + o, e = parseInt(e.css("top"), 10) + 2 * o, o = .5 * parseInt(a.css("width"), 10) - .5 * parseInt(t.css("width"), 10), d = e + r;
            i < l + r ? (t.css("bottom", ""), t.css("top", e + "px"), n.removeClass("d-none"), 
            h[a] = "bottom") : i < d ? (t.css("top", ""), t.css("bottom", l + "px"), 
            s.removeClass("d-none"), h[a] = "top") : ("top" === h[a] ? (t.css("top", ""), 
            t.css("bottom", l + "px"), s) : (t.css("bottom", ""), t.css("top", e + "px"), 
            n)).removeClass("d-none"), t.css("left", o + "px"), t.removeClass("d-none"), 
            c.css("width", "").css("width", "auto");
        }, 0);
    }, 10, {
        leading: !0
    });
    function S(e) {
        return l && e && l[e.replace(/.*::|\(.*\)/g, "")];
    }
    function H(e, t, n, s, a) {
        var o, r, i, l, d, u, c, p, g, h, b, f, m, v, C, x, w, y = O[e.id], k = s && E[a].context.IdValueMap, T = k && k[e.id], k = s && k && T && k[T], y = y || T;
        e.object && n < 30 ? (T = t, u = n + 1, c = s, p = a, g = B(d = e), h = c && E[p].context.IdValueMap[d.id], 
        b = O[d.id] || h, f = ee(d, c && h), m = f + "_" + I, v = R(d.type), C = h !== b && c && h, 
        x = h ? E[p].context.names : z, w = A(W(C ? h : b)), h = h || b, b = x.filter(function(e) {
            return e.container === d.id;
        }), x = [ g, "debugClickTd", te(d, O, C), C ? "debugBlink" : "" ].join(" "), 
        $(T).append('            <tr title="' + M(d, v, h) + '">                <td class="' + g + '">                    ' + d.name + ':<span class="debugType">' + v + '<span class="debugScope">' + F(d) + '</span></span>                </td>                <td class="' + x + '" data-toggle="collapse" data-target="#' + m + "--" + m + '">                    <span class="debugConstant">' + w + '</span>                    <i id="arrow-' + m + '" class="fa fa-arrow-down debugArrow"></i>                </td>            </tr>            <tr class="collapse debugPointer ' + f + '" style="overflow: auto;" id="' + m + "--" + m + '">                <td class="' + g + '" colspan="2">                    <table class="debugTable ' + f + '" style="width: 100%;">                        <thead>                            <tr>                                <td class="debugtdhIn">Variable</td>                                <td class="debugtdhIn">Value</td>                            </tr>                        </thead>                        <tbody id="' + m + '">                        </tbody>                    </table>                </td>            </tr>'), 
        ne(m), I++, b.forEach(function(e) {
            H(e, "#" + m, u + 1, c, p);
        })) : e.ref && (O[y] || k) && n < 30 ? (C = t, T = n + 1, h = s, v = a, 
        w = B(x = e), g = R(x.type), f = h && E[v].context.IdValueMap, b = h && E[v].context.IdNameMap, 
        y = f && f[x.id], f = h && f && y && f[y], k = O[x.id] || y, n = k.split("--")[0].split("__")[0], 
        o = y !== k, r = ee(x, h && y), i = r + "_" + I, o = o && h && y, n = A(W(n)), 
        o && (n += '<span class="debugBlink"> <span>&rarr;</span> ' + A(W(y.split("--")[0].split("__")[0])) + "</span>"), 
        l = M(x, g, W((y || k).split("--")[0].split("__")[0])), $(C).append('            <tr title="' + l + '">                <td class="' + w + '">                    ' + x.name + ':<span class="debugType">' + g + '<span class="debugScope">' + F(x) + '</span></span>                </td>                <td class="' + w + " " + te(x, O, o) + ' debugClickTd" data-toggle="collapse" data-target="#' + i + "--" + i + '">                    <span class="debugConstant">' + n + '</span>                    <i id="arrow-' + i + '" class="fa fa-arrow-down debugArrow"></i>                </td>            </tr>            <tr class="collapse debugPointer ' + r + '" style="overflow: auto;" id="' + i + "--" + i + '">                <td class="' + w + '" colspan="2">                     <table class="debugTable" style="width: 100%;">                        <thead>                            <tr>                                <td class="debugtdIn" colspan="2" style="color: white;">                                    <span>Value referenced by</span>&nbsp;<span class="text-bold">' + x.name + '</span>:<span class="debugType">' + g + '</span>                                </td>                            </tr>                            <tr>                                <td class="debugtdhIn">Variable</td>                                <td class="debugtdhIn">Value</td>                            </tr>                        </thead>                        <tbody id="' + i + '">                        </tbody>                   </table>                </td>            </tr>'), 
        ne(i), I++, f ? H(b[y], "#" + i, T + 1, h, v) : O[k] && H(Y[k], "#" + i, T + 1, h, v)) : (L && e.func || !e.func) && (l = t, 
        o = s, n = a, y = B(r = e), n = o && E[n].context.IdValueMap[r.id], k = O[r.id] || n, 
        i = k.split("--")[0].split("__")[0], T = R(r.type), i = (o = n !== k && o && n) ? A(W(i)) + '<span class="debugBlink"> <span>&rarr;</span> ' + A(W(n.split("--")[0])) + "</span>" : A(W(i)), 
        n = M(r, T, W((n || k).split("--")[0].split("__")[0])), $(l).append('<tr title="' + n + '">   <td class="' + y + '">       ' + r.name + ':<span class="debugType">' + T + '<span class="debugScope">' + F(r) + '</span></span>   </td>   <td class="' + y + " " + te(r, O, o) + '">       <span class="debugConstant">' + i + "</span>   </td></tr>"));
    }
    function B(e) {
        return e && e.hasOwnProperty("scope") && e.scope ? "debugtd" : "debugtdIn";
    }
    function R(e) {
        var e = e.split("--"), t = e[0], e = e[1];
        return t === e ? t : t + "<br/>(" + e + ")";
    }
    function ee(e, t) {
        return (t ? "lineVar-" : "var-") + e.id.replace(/[!"#$%&'()*+,.\/: ;<=>?@[\\\]^`{|}~]/g, "");
    }
    function A(e) {
        return f.replaceWhiteSpaceWithCtTags(f.replaceLTandGRTags(e));
    }
    function W(e) {
        return 49 < e.length ? e.slice(0, 49) + "..." : e;
    }
    function M(e, t, n) {
        t = t.replace("<br/>", "");
        return "" === e.name || e.func ? "" !== e.name && e.func ? e.name + function(e) {
            var t, n = e.substring(0, e.indexOf("(")), e = e.substring(e.indexOf("(") + 1, e.indexOf(")")).split(","), s = "arguments", a = "types", o = "respectively.";
            1 === e.length ? (s = "argument", a = "type", o = ".", t = " having " + e.length + " " + s + " with " + a + " " + e.join(", ") + " " + o, 
            e[0] || (t = ".")) : t = " having " + e.length + " " + s + " with " + a + " " + e.join(", ") + " " + o;
            return "" === n ? " is a function." : " is a function with return type " + n + t;
        }(t) : "This is of type " + t + " with value " + n : e.name + " is of type " + t + " with value " + n;
    }
    function F(e) {
        return e.hasOwnProperty("scope") && e.scope && "local" !== e.scope && "global" !== e.scope ? '<span style="color: white;">:</span>' + ("argument" === e.scope ? "param" : e.scope) : "";
    }
    function te(e, t, n) {
        return o && o[e.id] !== t[e.id] && !n ? "debugBlink" : "";
    }
    function ne(n) {
        var s = $("#arrow-" + n), e = $("#" + n + "--" + n);
        r.hasOwnProperty(n) || (r[n] = !1), e.on("show.bs.collapse", function(e) {
            s.removeClass("fa-arrow-down").addClass("fa-arrow-up"), r[n] = !0, e.stopPropagation();
        }), e.on("hidden.bs.collapse", function(e) {
            var t;
            t = s, $(this).hasClass("show") || t.removeClass("fa-arrow-up").addClass("fa-arrow-down"), 
            r[n] = !1, e.stopPropagation();
        });
    }
    function se() {
        v = v ? ($("#classicDebugOutput").addClass("d-none"), $("#executionResultTablesContainerDiv").removeClass("d-none"), 
        !1) : ($("#classicDebugOutput").removeClass("d-none"), $("#executionResultTablesContainerDiv").addClass("d-none"), 
        !0), $(".debugBlink").removeClass("debugBlink");
    }
    function ae() {
        for (var e = $(".executionResult-" + m).length, t = 0; t < e; t++) {
            var n = $("#executionResult-" + m + "-" + t + "-1-0"), s = $("#executionResult-" + m + "-" + t + "-0-0");
            s.parent().css("background-color", "white"), s.addClass("d-none"), $("#executionResult-" + m + "-" + t + "-0-1").removeClass("d-none"), 
            n.parent().css("background-color", "white"), n.addClass("d-none"), $("#executionResult-" + m + "-" + t + "-2-0").addClass("d-none");
        }
    }
    function oe() {
        var e = $("#compilationErrorTabPanesDiv .active"), t = $("#compilationErrorUl .active");
        t.removeClass("active"), e.removeClass("active"), $(".multipleFilesLi.compilationError").each(function() {
            var e = $(this).attr("id"), e = e.substring(e.indexOf("-") + 1), t = $("#compilationErrorLi-" + e), n = $("#compilationErrorTab-" + e);
            n.addClass("active"), t.addClass("active"), $("#compilationErrorEditor-" + e).data("editor").resize(), 
            n.removeClass("active"), t.removeClass("active");
        }), t.addClass("active"), e.addClass("active");
    }
    function re(e) {
        for (var t = 0; t <= e; t++) $("#extraLine-" + m + "-" + t).removeClass("debugBlink");
    }
    function V() {
        $(".outputError").removeClass("d-none"), $(".outputSuccess").removeClass("d-none"), 
        $(".debugOutputErrorStatus").addClass("d-none"), $(".debugAlert-" + m).removeClass("d-none");
    }
    function N() {
        var e = Object.keys(y);
        0 < e.length && e.forEach(function(e) {
            $("#" + e).removeClass("mini-pulsing-button-no-hover"), $("#debugImage" + e).removeClass("chameleon-mini-bug-no-hover");
        });
    }
    function s() {
        a($("#localContext")), a($("#globalContext")), a($("#callStack"));
        var e = $("#compilationErrorQuestionTabPanelsDiv"), t = $("#myModal");
        e.css("pointer-events", ""), $("#questionRightSidePanelDiv").removeClass("col-md-12").addClass("col-md-6"), 
        $(".compilationErrorQuestionTabPanelsParentDiv").removeClass("col-md-6"), 
        $("#resultsTabsAndDivs").removeClass("col-md-6"), $("#debugResultHeader").addClass("d-none"), 
        $(".debugHide").removeClass("d-none"), $("#ICW-" + m).removeClass("d-none"), 
        $("#resultsTabsAndDivs").addClass("resultsTabsAndDivsClass"), $("#executionOutViewport").removeClass("d-none"), 
        $("#consoleContainerDiv").addClass("d-none"), N(), $(".localContextBtn").collapse("show"), 
        $(".globalContextBtn").collapse("show"), $(".callStackBtn").collapse("show"), 
        $("#debugContextDiv").addClass("d-none"), $("#executionResultTablesContainerDiv").removeClass("d-none"), 
        $("#classicDebugOutput").addClass("d-none"), $("#debugClose").addClass("d-none"), 
        $("#debugHelp").addClass("d-none"), $("#debugPopoverDiv").addClass("d-none"), 
        $("#debugViz").addClass("d-none"), $("#debugVizLeft").addClass("d-none"), 
        $("#fileName").html(""), $("#lineNumber").html(""), $("#funcName").html(""), 
        $("#localContextTable").html(""), $("#globalContextTable").html(""), $(document).unbind("keydown", J), 
        t.scrollTop(t.prop("scrollHeight")), y = {}, k = [];
        for (var n = x = w = 0; n < b.length; n++) n !== m && $("#executionResult-" + n).removeClass("d-none"), 
        $(".debugAlert-" + n).removeClass("d-none");
        $("#executionResult-" + m).css("user-select", ""), $(".outputError").removeClass("d-none"), 
        $(".outputSuccess").removeClass("d-none"), $(".debugExtra").removeClass("d-none"), 
        $(".debugOutputErrorStatus").addClass("d-none"), $(".debugOutUser").addClass("d-none"), 
        ie();
        $(".codingEditorClass").each(function() {
            var e = $(this).closest(".editorContainerDiv").css("height");
            $("#modalBody").css("height", ""), $(".panel-body").css("height", ""), 
            $(this).css("height", e);
        });
        var s = $(".multipleFilesLi.compilationError");
        s.each(function(e) {
            var t, e = s.eq(e).attr("id"), n = e.substring(e.indexOf("-") + 1), e = $("#compilationErrorEditor-" + n).data("editor");
            e.setHighlightActiveLine(!0), e.setHighlightGutterLine(!0), e = e, t = n, 
            f.Dbg.lastHighlightedMarker && e && (e.session.removeMarker(f.Dbg.lastHighlightedMarker[t]), 
            e.session.clearBreakpoint(f.Dbg.lastHighlightedLine)), f.Dbg.lastHighlightedBug && e && e.session.clearBreakpoint(f.Dbg.lastHighlightedBug), 
            N(), setTimeout(function() {
                $("#lineContext-" + n).addClass("d-none");
            }, 100);
        }), h = {}, oe(), $("hr").removeClass("d-none"), $("#contextPanelHeading").off("mousedown touchstart"), 
        $(document).off("mouseup mousemove touchend touchmove"), $("#debugFuncCheckbox").off("change"), 
        p = d = !1;
    }
    function a(e) {
        e.off("show.bs.collapse"), e.off("hidden.bs.collapse");
    }
    function ie() {
        for (var e = $(".executionResult-" + m).length, t = 0; t < e; t++) {
            var n = $("#executionResult-" + m + "-" + t + "-1-0"), s = $("#executionResult-" + m + "-" + t + "-0-0");
            s.parent().css("background-color", ""), s.removeClass("d-none"), $("#executionResult-" + m + "-" + t + "-0-1").addClass("d-none"), 
            n.parent().css("background-color", ""), n.removeClass("debugBlink"), 
            n.removeClass("d-none"), $("#executionResult-" + m + "-" + t + "-2-0").removeClass("d-none"), 
            $("#extraLine-" + m + "-" + t).removeClass("debugBlink");
        }
    }
    function le() {
        p && !t || (t = !1, alertify.alert('<div class="ittdInfo" style="font-size: 13px;"><ul style="text-align: left"><li>The <strong>Context</strong> view shows the values of all variables visible in the current scope</li><li>It also shows the line which is about to get executed. The same line is highlighted in the editor below</li><li>You can navigate the execution flow by using the Prev (<c>&larr;</c> key) and Next (<c>&rarr;</c> key) buttons</li><li>You cannot change your code with the debugger open. You can continue editing by closing the debugger.</li><li>The debugger can be closed by clicking on the close button (<c>Esc</c> key)</li><li>In the <strong>Context</strong> view, you can check the call stack. You can navigate between the function calls by clicking on the entries under the call stack.</li><li>The execution output shows the program inputs and outputs for the given test case</li><li>You can switch between the console view and the test case diff view using the <strong>Console View</strong> toggle</li></ul></div>', function(e) {
            e && (t = !0);
        }).setHeader('<h5 style="text-align: center">Welcome to the new Interactive Time Travelling Debugger!</h5>').set({
            transition: "zoom",
            closable: !1
        }), $(".ajs-buttons.ajs-primary").css("text-align", "center"));
    }
    function de(e, t, n, s) {
        var a = e.height() - t.height(), o = parseInt(e.css("top"), 10), r = parseInt(e.css("left"), 10), e = e.width() - t.width(), t = {
            top: 0,
            left: 0
        };
        return n.pageY <= a && n.pageY >= o ? t.top = n.pageY - s.top : n.pageY <= o ? t.top = o : t.top = a, 
        n.pageX <= e && n.pageX >= r ? t.left = n.pageX - s.left : n.pageX <= r ? t.left = r : t.left = e, 
        t;
    }
    f.Dbg = {
        resizeEditor: oe,
        startDebugging: function(e, t) {
            var n, s, a, o, r;
            i.fileText && i.fileText !== U().fileText ? alertify.confirm("Your code changes have not been submitted yet.<br/>Would you like to submit it before trying debugging?", function(e) {
                e && ($(".nextBtn").hide(), $(".closeBtn").show(), $(".resetBtn").show(), 
                (e = $(".submitBtn")).show(), e.hasClass("disabled") || (e.addClass("disabled"), 
                submitClicked()));
            }).setHeader("").set({
                closable: !1,
                defaultFocus: "cancel",
                transition: "zoom"
            }) : (p || alertify.warning("This is a <b>beta</b> feature.<br/>Please share your feedback on the feature by emailing to support@codetantra.com.", "4"), 
            n = function(e) {
                var t, n, s = i.fileTextMap, a = {}, o = {};
                for (n in s) for (e.setInput(s[n]); !e.done; ) {
                    var r;
                    (t = e.lex()).type && "Identifier" === t.type && (a[t.value] = !0, 
                    r = n + "_" + t.position.first_line, o[r] || (o[r] = {}), o[r][t.value] = !0);
                }
                return {
                    symbols: a,
                    lineSymbolMap: o
                };
            }("C" === getCurrentLanguage() ? f.CLexer : "C++" === getCurrentLanguage() ? f.CppLexer : "Python" === getCurrentLanguage() ? f.PyLexer : void 0), 
            l = n.symbols, G = n.lineSymbolMap, g = [], d = !0, (n = b[m = e]) ? (f.startSpinner(), 
            $("#glass-pane").css("display", "block"), w = t, n.hasOwnProperty("debugResult") ? X(n.debugResult) : (e = "withInputs", 
            t = n.cExecutionFlowArr, n = n.cArgs, s = u || 4e3, a = f.getProgLangExtraInfo(), 
            o = f.getFileContentForVisualization(), r = f.cq.mainFileName, o = o.map(function(e) {
                return {
                    fileName: e.fileName,
                    numLines: e.fileContent.split("\n").length,
                    fileContent: e.fileContent
                };
            }), (f.isCProgQuestion() || f.isPythonQuestion()) && (t = t.filter(function(e) {
                return e.isUserInput;
            }), e = {
                cookieId: cookieId,
                command: e,
                filesContentArr: o,
                progLangExtraInfo: a,
                inputs: t,
                executionTimeoutSeconds: s,
                cmdLineArgs: n || [],
                mainFileName: r
            }, saveCompilationExecuteOnSubmit(!1, !1, !0, e).then(function(e) {
                Q(e);
            }).catch(function(e) {
                -2320119 === e && (T(), alertify_log("Compilation with debug options failed. Please try again.", "error", 4e3));
            })))) : f.alertify.error(c, "3"));
        },
        toggleDebugMode: se,
        setCurrentControl: function(e) {
            x = e, P(0);
        },
        onDebugRes: Q,
        onDisconnect: function() {
            d && !p && (p = d = !1, f.alertify.error("Terminal disconnected: Interactive Code Walkthrough cannot be initialized. Please try again", "3"), 
            T());
        },
        setExecFlows: function(e, t) {
            b = e.map(function(e) {
                return {
                    cExecutionFlowArr: e.cExecutionFlowArr,
                    cArgs: e.cmdArgs,
                    extraErrors: e.extraErrors
                };
            }), u = t, i = U();
        },
        renderContext: P,
        debugEnd: s,
        showInstructions: le
    };
}(window);
//# sourceMappingURL=dbg.min.js.map