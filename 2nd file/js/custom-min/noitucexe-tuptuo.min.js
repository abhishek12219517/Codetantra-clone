function displayLoopCounter(e) {
    try {
        var t, s, a, r = JSON.parse(e);
        r.probableCandidate ? (t = $("#runId-" + r.runId), $(t).removeClass("hide"), 
        s = "", $('div[ct-id="loopPopover-runId-' + r.runId + '"]').is(":visible") ? 1 == $("#loopTime-runId-loopId-" + r.runId + "-" + r.loopId).length ? ($("#loopTime-runId-loopId-" + r.runId + "-" + r.loopId).html(getDisplayTime(r.startTime, r.lastModifiedTime)), 
        $("#loopCount-runId-loopId-" + r.runId + "-" + r.loopId).html(r.counter)) : (a = "<tr>", 
        a = (a = (a = "<tr><td>" + r.codeText + "</td>") + '<td id="loopTime-runId-loopId-' + r.runId + "-" + r.loopId + '">' + getDisplayTime(r.startTime, r.lastModifiedTime) + "</td>") + '<td id="loopCount-runId-loopId-' + r.runId + "-" + r.loopId + '">' + r.counter + "</td>", 
        a += "</tr>", $("#loopTBody-runId-" + r.runId).append(a)) : (s = '<table class="table table-bordered table-hover table-sm table-striped" >', 
        s += "<thead>", s = s + "<tr><th>Loop Code</th>" + "<th>Elapsed Time</th><th>Execution Count</th>", 
        s = (s = s + "</tr>" + "</thead>") + '<tbody id="loopTBody-runId-' + r.runId + '" >', 
        s = (s = (s = (s += "<tr>") + "<td>" + r.codeText + "</td>") + '<td id="loopTime-runId-loopId-' + r.runId + "-" + r.loopId + '">' + getDisplayTime(r.startTime, r.lastModifiedTime) + "</td>") + '<td id="loopCount-runId-loopId-' + r.runId + "-" + r.loopId + '">' + r.counter + "</td>", 
        s = s + "</tr>" + "</tbody></table>", $(t).attr("data-content", s), $(t).popover({
            html: !0,
            trigger: "manual",
            placement: "left",
            title: "<strong>Executing Loops</strong><span  class='close ' onclick='terminateExecByRunId(\"" + r.runId + "\")' ><span>&times;</span></span> ",
            template: '<div  ct-id="loopPopover-runId-' + r.runId + '" class="popover executingLoopsPopover abc" role="tooltip"><div class="arrow"></div><h3 class="popover-title executingLoopsPopoverText"></h3><div class="popover-content executingLoopsPopoverText"></div></div>'
        }), $(t).popover("show"))) : l("Ignoring call to runId : " + r.runId + " : " + r.codeText);
    } catch (e) {
        l(e);
    }
}

function getDisplayTime(e, t) {
    t -= e, t /= 1e3, e = Math.floor(t % 60);
    return t /= 60, Math.floor(t % 60) + ":" + e;
}

function goToLineForTestCode(e) {
    $("#compilationErrorEditor").data("editor").gotoLine(e), $("#compilationErrorEditor").data("editor").blur(), 
    $("#compilationErrorEditor").data("editor").focus();
}

function sendOut(e, t, s) {
    if (l("XXX runId : " + e + " : " + t + " : " + s), t) markRunAsFinished(e); else {
        t = $('.outputField[runId="' + e + '"]');
        if ($(t).is("pre")) if (isUsingTestCode()) try {
            var a, r = JSON.parse(s);
            $(t).html($(t).html() + r.output), r.hasOwnProperty("errorLineNo") && -1 != r.errorLineNo && (a = "<br><a href='#' onClick='goToLineForTestCode(" + r.errorLineNo + ")'>Click to go to Error Line</a>", 
            $(t).html($(t).html() + a));
        } catch (e) {
            $(t).html($(t).html() + s);
        } else $(t).html($(t).html() + s); else $(t).val($(t).val() + s);
    }
}

function markRunAsFinished(e) {
    l("XXX ==> " + e + " marked as finished....");
    var t = $('.outputField[runId="' + e + '"]');
    isUsingTestCode() && $(t).html(getModifiedStackTraceMsgForTestCode($(t).html(), getClassName(), "_ctTestMethod19201343", getTestMethodName())), 
    $(t).prev(".terminate").removeData("runId"), $(t).prev(".terminate").removeAttr("id"), 
    $(t).prev(".terminate").removeAttr("data-content"), $("#runId-" + e).addClass("hide"), 
    $('div[ct-id="loopPopover-runId-' + e + '"]').hide();
}

function terminateExec(e) {
    null != $(e).attr("runId") ? document.getElementById("javaCompilerApplet").killBill($(e).attr("runId")) : null != $(e).data("runId") && document.getElementById("javaCompilerApplet").killBill($(e).data("runId"));
}

function terminateExecByRunId(e) {
    null != e && document.getElementById("javaCompilerApplet").killBill(e);
}

function sendException(e, t) {
    var t = JSON.parse(t), s = $("#exceptionsTable").data("exceptionIdVsDetailsMap"), a = (null == s && (s = {}, 
    $("#exceptionsTable").data("exceptionIdVsDetailsMap", s)), Object.keys(s).length), s = (s[a] = t, 
    4 != getCTMode() || test.hasOwnProperty("showHintsOnExceptions") && test.showHintsOnExceptions || $.each(t.stackTraceArr, function(e, t) {
        delete t.theLine;
    }), getExceptionStackTraceText(t, a));
    $("#exceptionRunId-" + e).append(s), $("#exceptionRunId-" + e).removeClass("hide"), 
    0 == getCTMode() && 0 != $("#executionOutputRunId-" + e).html().trim().length || $("#executionOutputRunId-" + e).addClass("hide"), 
    $.each($("#exceptionRunId-" + e + " .ste a"), function(e, t) {
        showExceptionPopover(t);
    }), markRunAsFinished(e), 4 == getCTMode() ? enableExecuteBtn() : 1 == getCTMode() || 2 == getCTMode() || 3 == getCTMode() ? (enableSubmit(), 
    "Copy Writing" == getSelectedQuestionTypeText() ? $("#executionResultRunId-" + e).removeClass("isRunning") : $("#executionResultRunId-" + e).removeClass("isRunning").addClass("inCorrect")) : 0 == getCTMode() && $("#executionResultRunId-" + e).removeClass("isRunning").addClass("inCorrect");
}

function assignTestCaseExecutionRunId(e, t, s) {
    l("XXX runId:" + e + ", methodCallText:" + t + ", originalOutput:" + s);
    var a, r, n = getSelectedQuestionTypeText();
    0 == $("#testCaseExecutionResultsDiv").length ? (a = "<div id='testCaseExecutionResultsDiv'><table id='exceptionsTable' class='cOutputTable table table-bordered table-striped1'><thead><tr><th style='width: 10px'>#</th>", 
    isUsingTestCode() || (a += "<th >Method Call</th>"), "Copy Writing" == n || isUsingTestCode() || (a += "<th >Expected</th>"), 
    a = (a += "<th >Output</th><th style='width: 20px'>&nbsp;</th></tr><caption><h4 class='text-warning'>Execution Results</h4></caption></thead><tbody id='executionResultsTBody'>") + (r = getExecutionResultRowText(e, 1, t, s)) + "</tbody></table></div>", 
    $("#" + getExecutionResultsParentDiv()).append(a)) : (r = getExecutionResultRowText(e, $("#executionResultsTBody tr").length + 1, t, s), 
    $("#executionResultsTBody").append(r)), $("#myModal").scrollTo($("#execRunRowId-" + e), 2e3), 
    $("#executionOutViewport").scrollTo($($("#execRunRowId-" + e)), 0, {
        offset: {
            top: 50,
            left: -30
        }
    });
}

function showExecutionResultsWithoutComparisionWhenDoNotRunTestCases() {
    return $("#" + getExecutionResultsParentDiv()).append("<div class='row m-0'><div class='col-sm-12 p-0'><h5 style='margin-top: 7px; padding:10px;' class=' text-center well'>Execution Results<span id='executionResultsStatusSpan'></span></h5><div id='executionResultTablesContainerDiv' class='col-sm-12'></div></div></div>"), 
    $("#executionResultsStatusSpan").html(" - <i class='fa fa-check'></i>").css("color", "green"), 
    $("#executionResultTablesContainerDiv").html("<div class='text-center' style='padding: 4%; font-family: monospace; color: green;font-size: 16px;'>Program has been executed without test cases</div>"), 
    !0;
}

function showExecutionResultsWithoutComparision(e, t, s) {
    if ("undefined" != typeof getCTMode || void 0 === e || 0 !== e.length) return t = "<div class='row m-0'><div class='col-sm-12 p-0'><h5 style='margin-top: 7px; padding:10px;' class=' text-center well'>Execution Results<span id='executionResultsStatusSpan'></span><br><span style='color:rgb(30, 50, 230);text-align: center;'><b> (Avg. Time: " + t + " ms , Max. Time: " + s + " ms)</b></span></h5><div id='executionResultTablesContainerDiv' class='col-sm-12'>", 
    $("#" + getExecutionResultsParentDiv()).append(t + "</div></div></div>"), $.each(e, function(e, t) {
        if (!t.show) return !0;
        for (var s = t.cExecutionFlowArr, e = "<table id='executionResult-" + e + "'  class='table table-bordered table-sm cOutputTable ' style='width: inherit;'><thead><tr class='active'><th>Test Case - " + (e + 1) + "<span style='color:rgb(30, 50, 230); font-size: xx-small;'> (Execution Time: " + t.timeTaken + " ms)</span></th></tr></thead><tbody>", a = (t.hasOwnProperty("cmdArgs") && t.cmdArgs && 0 < t.cmdArgs.length && (e += "<tr><th class='td-center' colspan='3'>Command Line Arguments: " + _.map(t.cmdArgs, function(e) {
            return "<span style='font-size:100%; opacity: 0.9;' class='label label-warning'>" + e + "</span>";
        }).join(" ") + "</th></tr>"), e += "<tr><th>User Output</th></tr>", ""), r = !1, n = !1, o = 0; o < s.length; o++) {
            var i, l, c, n = !1;
            !(c = s[o]).isProgramOutput || o == s.length - 1 || !(i = s[o + 1]).isProgramOutput || "" != i.programOutput || i.hasOwnProperty("found") && i.found || !c.hasOwnProperty("found") || !c.found || (c.error = !0), 
            !c.isProgramOutput || c.hasOwnProperty("found") && c.found || (c.error = !0, 
            c.hasOwnProperty("userOutput")) || (n = !0, c.userOutput = EMPTY_EXEC_USER_OUTPUT_PALCEHOLDER), 
            r || (a += "<tr class='success text-success test-cases-success'>", r = !0), 
            c.isUserInput ? (-1 == a.indexOf("__user__Input__") ? a += "<td><span class='cmd' style='padding: 1px 4px' title='User Input'>" + replaceLTandGRTags(c.userInput) + "</span></td>" : (i = "<span class='cmd' style='padding: 1px 4px' title='User Input'>" + replaceLTandGRTags(c.userInput) + "</span>", 
            a = a.replace(/__user__Input__/g, i)), r = !1) : c.isProgramOutput && "" == c.programOutput ? (r = !1, 
            a = (a += "</tr>").replace(/__user__Input__/g, "")) : c.isProgramOutput && (c.error ? (l = "", 
            n ? (l = c.userOutput, replaceWhiteSpaceWithCtTags(replaceLTandGRTags(c.programOutput))) : c.hasOwnProperty("found") && c.found ? (l = replaceLTandGRTags(c.programOutput), 
            replaceLTandGRTags(c.programOutput)) : l = c.userOutput, a += "<td><pre class='outputPre'>" + (n ? c.userOutput : l) + "__user__Input__</pre></td>") : a += "<td><pre class='outputPre'>" + replaceLTandGRTags(c.programOutput) + "__user__Input__</pre></td>");
        }
        e += (a = a.replace(/__user__Input__/g, "")) + "</tbody></table>", $("#executionResultTablesContainerDiv").append(e);
    }), (s = $("#executionResultsStatusSpan")).text(" - All test cases have succeeded!"), 
    s.css("color", "green"), !0;
    $("#" + getExecutionResultsParentDiv()).append('<div style="text-align: center; font-size: 18px; color: red; padding-top: 20px;">This code did not execute. This most likely is because the code was not compiled and tested successfully in time.</div>');
}

var EMPTY_EXEC_USER_OUTPUT_PALCEHOLDER = '<span style="color:gray; font-style:italic">Empty</span>';

function canShowIcwText() {
    return "function" == typeof getCTMode && 1 === getCTMode() && "Compilation Errors" === getSelectedQuestionTypeText() && (isCProgQuestion() || isPythonQuestion());
}

function callDebuggerOnError(e, t, s, a) {
    if (!canShowIcwText() || !a) return !1;
    $("#" + e).attr("title", "Jump to code"), Dbg.startDebugging(t, s);
}

function colorGradient(e, t, s, a) {
    var r = s, s = (a && 1 <= (e *= 2) && (--e, t = s, r = a), r.red - t.red), a = r.green - t.green, r = r.blue - t.blue;
    return "rgb(" + parseInt(Math.floor(t.red + s * e), 10) + "," + parseInt(Math.floor(t.green + a * e), 10) + "," + parseInt(Math.floor(t.blue + r * e), 10) + ")";
}

function progressBar(e, t) {
    var s = e.totalShownTestCases, a = e.totalShownTestCasesPassed, r = e.totalHiddenTestCasesPassed, e = e.totalHiddenTestCases, n = Math.round(a / s * 100), o = Math.round(r / e * 100), i = "<div class='row m-0'><div class='col-sm-12 p-0'><div id='progress-bar-container' class='col-12 p-0 progress-bar-container shown-tc d-none hide'>   <div class='progress-bar-child progress progress-shown'><span id='shownPassPercentage'></span></div>   <div class='progress-bar-child shrinker shrinker-shown timelapse'></div></div><div id='progress-bar-container' class='col-12 p-0 progress-bar-container hidden-tc d-none hide' style='margin-top: 0.5rem'>   <div class='progress-bar-child progress progress-hidden'><span id='hiddenPassPercentage'></span></div>   <div class='progress-bar-child shrinker shrinker-hidden timelapse'></div></div>", t = (!t || s === a && e === r || (i += "<div class='debugHide' style='margin-bottom: 1px; font-size: small; display: flex; justify-content: end; align-items: center;'>   Show only failed cases   <input type='checkbox' id='failedCasesToggleSwitch' class='failedCasesToggleSwitch' " + ("on" === localStorage.getItem("showOnlyFailedCases") ? "checked" : "") + ">   <label for='failedCasesToggleSwitch' class='toggle-label'></div>"), 
    i += '<h3 id="debugResultHeader" style="margin-top: 7px; padding:10px; vertical-align: middle" class="text-center well hide d-none"> Execution Result<div id="debugModeToggle" style="vertical-align: middle;" class="pull-right">   <span style="font-size: small; font-weight: bold; vertical-align: middle;">Console View</span>   <label class="debugSwitch" style="vertical-align: middle;">       <input id="debugModeToggle1" type="checkbox" onclick="Dbg.toggleDebugMode()">       <span class="debugSlider debugRound"></span>   </label></div></h3><div id="executionResultTablesContainerDiv" class="col-sm-12 p-0">', 
    $("#" + getExecutionResultsParentDiv()).append(i + "</div></div></div>"), 1 != getCTMode() && 4 != getCTMode() || $("#executionResultTablesContainerDiv").css({
        "max-height": "40vh",
        "overflow-y": "auto"
    }), {
        red: 245,
        green: 56,
        blue: 68
    }), i = {
        red: 245,
        green: 208,
        blue: 32
    }, l = {
        red: 85,
        green: 210,
        blue: 132
    };
    s && ($(".shown-tc").removeClass("d-none").removeClass("hide"), $(".progress-shown").css("background", colorGradient(a / s, t, i, l)), 
    $(".shrinker-shown").animate({
        left: n + "%"
    }, 2e3), $("#shownPassPercentage").append("<span><strong> " + a + " </strong> out of <strong> " + s + " </strong>shown cases successful</span>")), 
    e && ($(".hidden-tc").removeClass("d-none").removeClass("hide"), $(".progress-hidden").css("background", colorGradient(r / e, t, i, l)), 
    $(".shrinker-hidden").animate({
        left: o + "%"
    }, 2e3), $("#hiddenPassPercentage").append("<span><strong> " + r + " </strong> out of <strong> " + e + " </strong>hidden cases successful</span>"));
}

function getWtcResultsMarkup(e) {
    if (e) return '<table class="table" style="margin-bottom: 0;">   <thead style="display: none; margin-bottom: 0;">       <tr>           <th class="py-0" />           <th class="py-0" />           <th class="py-0" />       </tr>   </thead>   <tbody>' + (e.tcs || []).map(function(e, t) {
        t = '<tr style="background-color: ' + (e.success ? "white" : "#f2dede") + '">   <td>' + (t + 1) + '</td>   <td style="white-space: pre-wrap;">' + e.desc + '</td>   <td class="text-center">';
        return e.success ? t += '<div>   <i class="fa fa-check-circle text-success"></i></div>' : e.error ? t += '<div>   <i class="fa fa-times-circle-o text-danger"></i></div>' : e.to && (t += '<div>   <i class="fa fa-clock-o text-danger"></i></div>'), 
        t += "</td></tr>";
    }).join("") + "</tbody></table>";
}

function showCExecutionResults(e, t, s, a, r, n, o) {
    var i, l, c, d, y, O, w, I, E, R, p, u;
    if ("undefined" != typeof Dbg && Dbg.setExecFlows(e, r), "undefined" != typeof getCTMode || void 0 === e || 0 !== e.length) return d = c = l = i = 0, 
    n || (e.forEach(function(e) {
        (e.hasOwnProperty("originalShow") ? e.originalShow : e.show) ? (i++, e.error || e.extraErrors && e.extraErrors.length || l++) : (d++, 
        e.error || e.extraErrors && e.extraErrors.length || c++);
    }), o && i === l && d === c && (c = l = 0), n = {
        totalShownTestCases: i,
        totalShownTestCasesPassed: l,
        totalHiddenTestCases: d,
        totalHiddenTestCasesPassed: c
    }), progressBar(n, !0), I = w = O = !(y = !0), R = E = 0, $.each(e, function(e, s) {
        s.hasOwnProperty("extraErrors") || (s.extraErrors = []), s.hasOwnProperty("timeTaken") && parseInt(s.timeTaken);
        var t = "executionResult-" + e, a = s.cExecutionFlowArr;
        s.show, s.mainFileName;
        if ((s.error || 0 < s.extraErrors.length) && (E++, y = !1), (s.error || 0 < s.extraErrors.length) && s.show && (I = !0), 
        !s.show) return s.error && (O = !0, w = !!(s.extraErrors && s.extraErrors[0] && s.extraErrors[0].errorInfo && "Test case timed out. Possible infinite loop." === s.extraErrors[0].errorInfo)), 
        !0;
        s.show && (R += 1);
        for (var r = "", n = (s.hasOwnProperty("originalShow") && !s.originalShow && (r = "<code> - Hidden Test Case</code>"), 
        $.each(s.extraErrors, function(e, t) {
            (t.hasOwnProperty("killBill") && t.killBill || t.hasOwnProperty("killedBySignal") && t.killedBySignal || t.hasOwnProperty("extraReadsInUserProgram") && t.extraReadsInUserProgram) && updateCExecutionFlowArr(a, s.hasOwnProperty("output") ? s.output : "");
        }), ""), o = ("undefined" != typeof getCTMode || !s.hasOwnProperty("partialMarks") || s.error || 0 < s.extraErrors.length || (n = "<span style='float: right; color: green;' id='showPartialMarks" + e + "'>Partial Marks: <c>" + s.partialMarks + "</c></span>"), 
        "Test Case - " + R + r), i = canShowIcwText() ? "<a id='ICW-" + e + "' class='btn btn-xs debugHide pulsing-button' style='border-radius: 50%;'  onclick='Dbg.startDebugging(" + e + ", 0)' title='Interactive Code Walkthrough'><i class='fa fa-bug chameleon-bug " + (s.error || 0 < s.extraErrors.length ? "text-danger" : "text-success") + "'></i></a>" : "", r = (s.hasOwnProperty("timeTaken") && s.timeTaken && (o = "Test Case - " + R + "<span class='debugHide' style='color:rgb(30, 50, 230); font-size: xx-small '> (Execution Time: " + s.timeTaken + " ms)</span>" + r), 
        s.error || 0 < s.extraErrors.length ? "<i class='fa fa-times text-danger'></i>" : "<i class='fa fa-check text-success''></i>"), t = "<table id='" + t + "' class='table table-bordered table-sm test-case-table cOutputTable ct-table-layout-fixed" + (s.error || 0 < s.extraErrors.length ? "" : " test-case-passed") + "'><thead><tr class='active'><th colspan='2' style='vertical-align: middle;'>" + r + " " + o + "&nbsp;" + i, l = (t += n + "</th></tr>", 
        s.hasOwnProperty("cmdArgs") && s.cmdArgs && 0 < s.cmdArgs.length && (t += "<tr><th class='td-center' colspan='2'>Command Line Arguments: " + _.map(s.cmdArgs, function(e) {
            return "<span style='font-size:100%; opacity: 0.9;' class='label label-warning'>" + e + "</span>";
        }).join(" ") + "</th></tr>"), t += "<tr><th>Expected Output</th><th>User Output</th></tr></thead><tbody>", 
        ""), c = !1, d = 0, p = "", u = 0; u < a.length; u++) {
            var g, h, f, m = !1, x = a[u];
            !x.isProgramOutput || u == a.length - 1 || !(g = a[u + 1]).isProgramOutput || "" != g.programOutput || g.hasOwnProperty("found") && g.found || !x.hasOwnProperty("found") || !x.found || (x.error = !0, 
            x.missingNewLineAtEnd = !0), !x.isProgramOutput || x.hasOwnProperty("found") && x.found || (x.error = !0, 
            x.hasOwnProperty("userOutput")) || (m = !0, x.userOutput = EMPTY_EXEC_USER_OUTPUT_PALCEHOLDER), 
            c || (l = l + "<tr id='" + (p = "executionResult-" + e + "-" + d++) + "' onclick='callDebuggerOnError(this.id," + e + "," + d + "," + x.error + ")' class='" + (x.error ? "danger test-cases-danger text-danger" : "success test-cases-success text-success") + " resultRow-" + u + " executionResult-" + e + "'>", 
            c = !0), x.isUserInput ? (l = -1 === l.indexOf("__user__Input__") ? (l = l + "<td><span id='" + p + "-0-0' class='cmd' style='padding: 1px 4px' title='User Input'>" + replaceLTandGRTags(x.userInput) + "</span><span id='" + p + "-0-1' class='cmd hide d-none' style='padding: 1px 4px' title='User Input'>" + replaceLTandGRTags(x.userInput) + "</span></td>") + "<td><span id='" + p + "-1-0' class='cmd' style='padding: 1px 4px' title='User Input'>" + replaceLTandGRTags(x.userInput) + "</span><span id='" + p + "-1-1' class='cmd hide d-none' style='padding: 1px 4px' title='User Input'>" + replaceLTandGRTags(x.userInput) + "</span></td>" : (g = "<span class='cmd' style='padding: 1px 4px' title='User Input'>" + replaceLTandGRTags(x.userInput) + "</span>", 
            l.replace(/__user__Input__/g, g)), c = !1) : x.isProgramOutput && "" == x.programOutput ? (c = !1, 
            l = (l += "</tr>").replace(/__user__Input__/g, "")) : x.isProgramOutput && (l = x.error ? (h = [ "" ], 
            f = [ "" ], m ? (h[0] = x.userOutput, f[0] = replaceWhiteSpaceWithCtTags(replaceLTandGRTags(x.programOutput))) : x.hasOwnProperty("found") && x.found ? (h[0] = replaceLTandGRTags(x.programOutput), 
            f[0] = replaceLTandGRTags(x.programOutput)) : markDifferencesInOutputs(x.userOutput, x.programOutput, h, f), 
            m = m ? x.userOutput : h[0], x.hasOwnProperty("missingNewLineAtEnd") && x.missingNewLineAtEnd && (m = m + "<span class='ctCharMismatch userOutputError ctCharMismatchForPopover' >" + getTagForSpecialChars("\n") + "</span>"), 
            l = (l = (l = l + "<td><pre id='" + p + "-0-0' class='outputPre'>" + f[0]) + "__user__Input__</pre><pre id='" + p + "-0-1' class='outputPre hide d-none'>" + replaceWhiteSpaceWithCtTags(replaceLTandGRTags(x.programOutput)) + "__user__Input__</pre></td>") + "<td><pre id='" + p + "-1-0' class='outputPre'> ", 
            (l = (l = canShowIcwText() ? l + "<span id = 'debugSymbolForErrorLine" + p + "' ><a id = " + d + " class='btn btn-xs mini-pulsing-button'title='Jump to Code'><i id = 'debugImage" + d + "' class='fa fa-bug chameleon-mini-bug' '></i></a></span>" : l) + "" + m) + "__user__Input__</pre><pre id='" + p + "-1-1' class='outputPre debugOutUser hide d-none' style='background-color: white;' ></pre></td>") : (l = (l = (l = l + "<td><pre id='" + p + "-0-0' class='outputPre'>" + replaceWhiteSpaceWithCtTags(replaceLTandGRTags(x.programOutput))) + "__user__Input__</pre><pre id='" + p + "-0-1' class='outputPre hide d-none'>" + replaceWhiteSpaceWithCtTags(replaceLTandGRTags(x.programOutput)) + "__user__Input__</pre></td>") + "<td><pre id='" + p + "-1-0' class='outputPre'>" + replaceWhiteSpaceWithCtTags(replaceLTandGRTags(x.programOutput))) + "__user__Input__</pre><pre id='" + p + "-1-1' class='outputPre debugOutUser hide d-none' style='background-color: white;'></pre></td>");
        }
        l = l.replace(/__user__Input__/g, "");
        var b = "", r = "", T = !1, C = e, v = "";
        $.each(s.extraErrors, function(e, t) {
            var s, a, r = t.hasOwnProperty("userOutput") ? replaceLTandGRTags(t.userOutput) : void 0;
            t.hasOwnProperty("killBill") && t.killBill ? r = t.hasOwnProperty("userOutput") ? replaceLTandGRTags(t.userOutput) : t.killBill ? "<b>" + t.errorInfo + "</b>" : "&lt; no output &gt;" : t.hasOwnProperty("extraReadsInUserProgram") && t.extraReadsInUserProgram ? r = t.hasOwnProperty("userOutput") ? replaceLTandGRTags(t.userOutput) : t.extraReadsInUserProgram ? "<b>" + t.errorInfo + "</b>" : "&lt; no output &gt;" : t.hasOwnProperty("killedBySignal") && t.killedBySignal && (s = void 0, 
            s = "SIGFPE" === (a = t.errorInfo.split(":")[1].split(" ")[1]) ? "Your program execution has resulted in Floating Point Exception<c>(SIGFPE)</c>,<br/>probably due to divide by zero." : "SIGSEGV" === a ? "Your program execution has resulted in a Segmentation Violation<c>(SIGSEGV)</c>,<br/>probably due to an unintialized pointer dereferencing." : "SIGILL" === a ? "Your program execution has resulted in Illegal Instruction<c>(SIGILL)</c>,<br/>probably because of passing an invalid object where a pointer to a function was expected,<br/>or by writing past the end of an automatic array and corrupting other data<br>on the stack such as the return address of a stack frame." : "SIGBUS" === a ? "Your program execution has resulted in Bus Error<c>(SIGILL)</c>,<br/>probably due to dereferencing a misaligned pointer, such as referring to a four-word integer at an address not divisible by four." : t.errorInfo, 
            r = t.hasOwnProperty("userOutput") ? replaceLTandGRTags(t.userOutput) : t.killedBySignal ? "<b>" + s + "</b>" : "&lt; no output &gt;"), 
            t.hasOwnProperty("userOutput") ? (a = d + 1, T = !0, b += "<pre class='outputPre' id='extraLine-" + C + "-" + d + "'>", 
            canShowIcwText() && (b += "<span ><a id = " + a + "  onclick='Dbg.startDebugging(" + C + ", this.id)' class='btn btn-xs mini-pulsing-button'title='Jump to Code'><i id = 'debugImage" + a + "' class='fa fa-bug chameleon-mini-bug' '></i></a></span>"), 
            b += r + "</pre>", d++) : v += r + "\n";
        }), T && (l += "<tr class='debugExtra' id ='extraRowId' ><td class='outputError'></td><td class='danger test-cases-danger '><pre class='outputPre'><b>Extra output</b></pre><pre id = 'extraOutputRowData'  class = 'outputPre'>" + b + "</pre></td></tr>"), 
        "" !== v && (i = d + 1, r += "<tr class='debugExtra' id = 'extraErrRowId' ", 
        canShowIcwText() && (r += "onclick='callDebuggerOnError(this.id," + C + "," + i + "," + !0 + ")'"), 
        r += "><td class='outputError'></td><td class='danger test-cases-danger'><pre class='outputPre'>", 
        canShowIcwText() && (r += "<span ><a id = " + i + " class='btn btn-xs mini-pulsing-button'title='Jump to Code'><i id = 'debugImage" + i + "' class='fa fa-bug chameleon-mini-bug' '></i></a></span>"), 
        r += v + "</pre></td></tr>"), t = t + l + r, t += "</tbody></table>", y || ((s.error || 0 < s.extraErrors.length) && (t += "<div style='margin: 15px 0px;' class='debugAlert-" + e + "'><span class='alert alert-warning' style='padding: 5px 8px;font-size:12px;'> <i class='fa fa-exclamation-triangle fa-1x'></i>&nbsp;&nbsp; <span class='ctCharMismatch' style='font-family:monospace;'>&nbsp;</span> : indicates the mismatch in the expected output.</span></div>"), 
        s.hasOwnProperty("outputOnSTDErr") && "" != s.outputOnSTDErr && (t += getPythonExceptionDetailsAsText(s.outputOnSTDErr, o))), 
        $("#executionResultTablesContainerDiv").append(t);
    }), 1 === getCTMode() && I && (getExecutionResultsParentDiv(), (p = $(".ctCharMismatchForPopover")).popover({
        container: "#resultsTabsAndDivs",
        html: !0,
        trigger: "hover",
        selector: !0,
        content: "Check Expected Output"
    }), p.on("click", function(e) {
        p.not(this).popover("hide");
    }), p.on("show.bs.popover", function() {
        var e = $(this).parents("tr").find(".userOutputError").text(), t = $(this).parents("tr").find(".programOutputError").text(), s = "";
        $(this).hasClass("userOutputError") ? e && t ? s = $(this).hasClass("missingUserOutput") ? 'Missing <span class="char-info-css">' + getSpecialCharsText(t) + "</span>" : 'Expecting <span class="char-info-css">' + getSpecialCharsText(t) + '</span> instead of <span class="char-info-css">' + getSpecialCharsText(e) + " </span>" : $(this).hasClass("ctCharLineBreakMismatch") ? s = 'Missing <span class="char-info-css">\\n</span>' : e && (s = "Missing <kbd>" + getSpecialCharsText(e) + "</kbd>") : $(this).hasClass("programOutputError") && t && (s = '<span class="char-info-css">' + getSpecialCharsText(t) + "</span> is missing in your output"), 
        $(this).data("bs.popover").config && $(this).data("bs.popover").config.content ? $(this).data("bs.popover").config.content = s : $(this).data("bs.popover").options && $(this).data("bs.popover").options.content && ($(this).data("bs.popover").options.content = s);
    }), $(".userOutputError").is(":visible") ? setTimeout(function() {
        $(".userOutputError").eq(0).popover("show");
    }, 500) : $(".programOutputError").is(":visible") && setTimeout(function() {
        $(".programOutputError").eq(0).popover("show");
    }, 500), $(document).on("click", function(e) {
        p.each(function() {
            $(this).is(e.target) || 0 !== $(this).has(e.target).length || 0 !== $(".popover").has(e.target).length || $(this).popover("hide");
        });
    }), $("#executionResultTablesContainerDiv").on("mousewheel", function() {
        $(".popover").popover("hide");
    }), $(document).on("hidden.bs.popover", function(e) {
        $(e.target).data("bs.popover").inState = {
            click: !1,
            hover: !1,
            focus: !1
        };
    })), $(".outputError")[0] && $("#executionOutViewport").scrollTo($(".outputError").eq(0).parents(), 500), 
    y && !t ? ($("#executionResultsStatusSpan").text(" - All test cases have succeeded!"), 
    $("#executionResultsStatusSpan").css("color", "green"), "undefined" != typeof getCTMode && "undefined" != typeof logResponseOnSubmit && (4 === getCTMode() ? logResponseOnSubmit("successOnSubmitInTest", "All test cases have succeeded!", "") : 1 !== getCTMode() && 2 !== getCTMode() && 3 !== getCTMode() || logResponseOnSubmit("successOnSubmit", "All test cases have succeeded!", ""))) : w ? ($("#executionResultsStatusSpan").text(" - Some hidden test cases have timed out."), 
    $("#executionResultsStatusSpan").css("color", "red"), "undefined" != typeof getCTMode && "undefined" != typeof logResponseOnSubmit && (4 === getCTMode() ? logResponseOnSubmit("testCasesVerificationFailedInTest", "Some hidden test cases have timed out.", "") : 1 !== getCTMode() && 2 !== getCTMode() && 3 !== getCTMode() || logResponseOnSubmit("testCasesVerificationFailed", "Some hidden test cases have timed out.", ""))) : ($("#executionResultsStatusSpan").text(" - Some test cases have failed."), 
    $("#executionResultsStatusSpan").css("color", "red"), u = !1, "undefined" != typeof getCTMode && "undefined" != typeof logResponseOnSubmit && (4 === getCTMode() ? logResponseOnSubmit("testCasesVerificationFailedInTest", "Some test cases have failed.", "") : 1 !== getCTMode() && 2 !== getCTMode() && 3 !== getCTMode() || logResponseOnSubmit("testCasesVerificationFailed", "Some test cases have failed.", ""))), 
    r = n.totalHiddenTestCases - n.totalHiddenTestCasesPassed, I || (O || t) && ($("#executionResultTablesContainerDiv").append("<div class='test-case-table'><code>* There are some hidden test cases which have failed.</code>   <br><code>* Hidden test cases are there to encourage you to think of all edge cases.</code></div><div id='hiddenTestCasesFailedMessage' style='display: none; color: blue; text-align: center; font-size: medium;'>" + r + " hidden test cases have failed. <br> Hidden test cases are present to encourage you to think about all possible cases.</div>"), 
    u = !0, "undefined" != typeof getCTMode) && "undefined" != typeof logResponseOnSubmit && (4 === getCTMode() ? logResponseOnSubmit("testCasesVerificationFailedInTest", "There are some hidden test cases which have failed.", "") : 1 !== getCTMode() && 2 !== getCTMode() && 3 !== getCTMode() || logResponseOnSubmit("testCasesVerificationFailed", "There are some hidden test cases which have failed.", "")), 
    "on" === localStorage.getItem("showOnlyFailedCases") && (0 < E || u) && g(), 
    $("#failedCasesToggleSwitch").change(function() {
        $(this).prop("checked") ? (localStorage.setItem("showOnlyFailedCases", "on"), 
        0 === E && !u || g()) : (localStorage.setItem("showOnlyFailedCases", "off"), 
        $(".test-case-table").show(), u && $("#hiddenTestCasesFailedMessage").hide());
    }), y;
    function g() {
        u ? ($(".test-case-table").hide(), $("#hiddenTestCasesFailedMessage").show()) : $(".test-case-passed").hide();
    }
    $("#" + getExecutionResultsParentDiv()).append('<div style="text-align: center; font-size: 18px; color: red; padding-top: 20px;">This code did not execute. This most likely is because the code was not compiled and tested successfully in time.</div>');
}

function updateCExecutionFlowArr(t, e) {
    for (var s, a = [], r = ("\n" == e.toString() ? a = [ "" ] : (e = e.toString().split("\n"), 
    s = !0, e.forEach(function(e) {
        "" == e || s || a.push(""), e.split("___user_input___").forEach(function(e) {
            a.push(e);
        }), s = !1;
    })), 0); r < t.length && t[r].hasOwnProperty("isUserInput"); ) r++;
    a.every(function(e) {
        if (r >= t.length) return !1;
        for (t[r].hasOwnProperty("isProgramOutput") && (e == t[r].programOutput ? (t[r].error = !1, 
        t[r].found = !0) : (t[r].error = !0, t[r].errorInfo = "Output Mismatch", 
        t[r].userOutput = e)), r++; r < t.length && t[r].hasOwnProperty("isUserInput"); ) r++;
    });
}

function replaceLTandGRTags(e) {
    return void 0 !== e && -1 == e.indexOf("<ct-space>") && -1 == e.indexOf(EMPTY_EXEC_USER_OUTPUT_PALCEHOLDER) ? e.replace(/</g, "&lt;").replace(/>/g, "&gt;") : e;
}

function replaceWhiteSpaceWithCtTags(e) {
    return e = (e = e.split(" ").join("<ct-space class='showHideWhiteSpaceCharacters'>·</ct-space>")).replace(/\t/g, "<ct-tab class='showHideWhiteSpaceCharacters'>→</ct-tab>");
}

function markDifferencesInOutputs(e, t, s, a) {
    if (-1 !== e.indexOf(EMPTY_EXEC_USER_OUTPUT_PALCEHOLDER)) s[0] = e, a[0] = t; else {
        for (var r = t.split(""), n = !1, o = 0; o < r.length; o++) {
            var i = r[o];
            if (!(o < e.length)) {
                if (n) for (var l = e.length; l < r.length; l++) a[0] += getTagForSpecialChars(r[l]); else {
                    a[0] += "<span class='ctCharMismatch ctCharMismatchForPopover programOutputError'>";
                    for (l = e.length; l < r.length; l++) a[0] += getTagForSpecialChars(r[l]);
                    a[0] += "</span>", s[0] += "<span class='ctCharMismatch ctCharMismatchForPopover userOutputError missingUserOutput' style='color: darkgray;'>&#8613;</span>";
                }
                break;
            }
            i === e.charAt(o) ? (a[0] += getTagForSpecialChars(i), s[0] += getTagForSpecialChars(i)) : n ? (a[0] += getTagForSpecialChars(i), 
            s[0] += getTagForSpecialChars(e.charAt(o))) : (a[0] += "<span class='ctCharMismatch programOutputError ctCharMismatchForPopover' >" + getTagForSpecialChars(i) + "</span>", 
            s[0] += "<span class='ctCharMismatch userOutputError ctCharMismatchForPopover' >" + getTagForSpecialChars(e.charAt(o)) + "</span>", 
            n = !0);
        }
        if (e.length > r.length) if (n) for (var c = e.substring(r.length), l = 0; l < c.length; l++) s[0] += getTagForSpecialChars(c.charAt(l)); else {
            c = e.substring(r.length);
            s[0] += "<span class='ctCharLineBreakMismatch ctCharMismatch ctCharMismatchForPopover userOutputError'>";
            for (l = 0; l < c.length; l++) s[0] += getTagForSpecialChars(c.charAt(l));
            s[0] += "</span>";
        }
    }
}

function getSpecialCharsText(e) {
    return "·" == e ? "space" : "→" == e ? "TAB Char(\\t)" : "¬" == e ? "New Line Char(\\n)" : "<" == e ? "&lt;" : ">" == e ? "&gt;" : e.replace(/\·/g, " ");
}

function getTagForSpecialChars(e) {
    return " " == e ? "<ct-space title='Space Char'>·</ct-space>" : "\t" == e ? "<ct-tab title='TAB Char (\\t)'>→</ct-tab>" : "\n" == e ? "<ct-newline title='New Line Char (\\n)'>¬</ct-newline>" : "<" == e ? "&lt;" : ">" == e ? "&gt;" : e;
}

function getExecutionResultRowText(e, t, s, a) {
    var r = getSelectedQuestionTypeText();
    s = replaceHTMLTags(s);
    var n = (n = "<tr id='execRunRowId-" + e + "' tr-run-id='" + e + "' class='execOutputTR'>") + "<td style='vertical-align: top;'>" + t + "</td>";
    return isUsingTestCode() || (n = n + "<td style='vertical-align: top;' >" + s + "</td>"), 
    "Copy Writing" == r || isUsingTestCode() || (n = n + "<td class='expectedOutputTD' ><pre style='margin: 0px;' class='expectedOutput outputPre'>" + a + "</pre></td>"), 
    n = (n = (n = (n += "<td class='userOutputTD'>") + "<span id='exceptionRunId-" + e + "' class='hide' style='margin: 0px;'></span>") + "<a id='runId-" + e + "' runId='" + e + "' onClick='terminateExec(this)' class='terminate hide btn btn-danger btn-xs'>Terminate</a>") + "<pre id='executionOutputRunId-" + e + "' class='userOutput outputField outputPre' runId='" + e + "' style='margin: 0px;'></pre>", 
    n = (n = (n = (n = (n = (n = (n = (n = (n += "</td>") + "<td id='executionResultRunId-" + e + "' class='isRunning'>") + "<span class='isRunning fa-stack fa-lg' >" + '\t\t\t\t<i class="fa fa-refresh fa-spin fa-stack-1x  text-info "></i> ') + '\t\t\t\t<i class="fa fa-circle-o fa-stack-2x text-muted " ></i>' + "</span>") + "<span class='isCorrect fa-stack fa-lg' >" + '\t\t\t\t<i class="fa fa-check fa-stack-1x  text-success "></i> ') + '\t\t\t\t<i class="fa fa-circle-o fa-stack-2x text-success " ></i>' + "</span>") + "<span class='inCorrect fa-stack fa-lg' >" + '\t\t\t\t<i class="fa fa-times fa-stack-1x  text-danger "></i> ') + '\t\t\t\t<i class="fa fa-circle-o fa-stack-2x text-danger " ></i>' + "</span>") + "</td>" + "</tr>";
}

function showTestCaseResult(e, t) {
    var s, a;
    l("XXX ==> " + e + " : testCaseResultNew : " + t), 1 == getCTMode() || 2 == getCTMode() || 3 == getCTMode() || 4 == getCTMode() ? (a = JSON.parse(t), 
    "Copy Writing" == getSelectedQuestionTypeText() ? ($("#execRunRowId-" + e).addClass("success text-success"), 
    $("#executionResultRunId-" + e).removeClass("isRunning").addClass("isCorrect"), 
    s = getModifiedStackTraceMsg($("#execRunRowId-" + e + " .outputField").text()), 
    $("#execRunRowId-" + e + " .outputField").text(s)) : ($("#execRunRowId-" + e).addClass(a.isOutputCorrect ? "success test-cases-success text-success" : "danger test-cases-danger text-danger"), 
    $("#executionResultRunId-" + e).removeClass("isRunning").addClass(a.isOutputCorrect ? "isCorrect" : "inCorrect")), 
    s = $('.outputField[runId="' + e + '"]'), "" != $(s).html().trim() || $("#executionResultRunId-" + e).hasClass("inCorrect") || $(s).html("Successful execution!")) : 0 == getCTMode() && isUsingTestCode() && (a = JSON.parse(t), 
    $("#execRunRowId-" + e).addClass(a.isOutputCorrect ? "success test-cases-success text-success" : "danger test-cases-danger text-danger"), 
    $("#executionResultRunId-" + e).removeClass("isRunning").addClass(a.isOutputCorrect ? "isCorrect" : "inCorrect"), 
    sendOut(e, !1, a.output), sendOut(e, !0, ""));
}

function executionCompleted(e, t) {
    l("XX executionCompleted runId : " + e + ",  killBill : " + t), 4 == getCTMode() ? enableExecuteBtn() : 1 != getCTMode() && 2 != getCTMode() && 3 != getCTMode() || enableSubmit();
}

function didNotPassAllTestCases() {
    var e;
    4 == getCTMode() ? ("Compilation Errors" != (e = getSelectedQuestionTypeText()) && "Code Evaluation" != e || ($("#" + getExecutionResultsParentDiv()).append("<pre id='allTestCasesFailedText' class='text-danger creamPreTab4'><code><strong>Note: </strong>The code does not pass all the test cases.</code></pre>"), 
    requiresJavaApplet && showCharDiffInJavaExecResults(), $("#" + getExecutionResultsParentDiv()).append("<div style='margin: 25px 0px;'><span class='alert alert-warning' style='padding: 10px;font-size:13px;font-weight:bold'> <i class='fa fa-exclamation-triangle fa-1x'></i>&nbsp;&nbsp; <span class='ctCharMismatch' style='font-family:monospace;'>&nbsp;</span> : indicates the mismatch in the expected output.</span></div>")), 
    enableExecuteBtn()) : 1 != getCTMode() && 2 != getCTMode() && 3 != getCTMode() || ("Compilation Errors" == (e = getSelectedQuestionTypeText()) || "Code Evaluation" == e ? ($("#" + getExecutionResultsParentDiv()).append("<pre id='allTestCasesFailedText' class='text-danger creamPreTab4'><code><strong>Note: </strong>The code does not pass all the test cases.</code></pre>"), 
    requiresJavaApplet && showCharDiffInJavaExecResults(), $("#" + getExecutionResultsParentDiv()).append("<div style='margin: 25px 0px;'><span class='alert alert-warning' style='padding: 10px;font-size:13px;font-weight:bold'> <i class='fa fa-exclamation-triangle fa-1x'></i>&nbsp;&nbsp; <span class='ctCharMismatch' style='font-family:monospace;'>&nbsp;</span> : indicates the mismatch in the expected output.</span></div>")) : isMultipleChoiceType(e) || isSpokenLanguage(e) || $("#executionOutViewport").scrollTo($("#allTestCasesFailedText", 0, {
        offset: {
            top: -50,
            left: -30
        }
    })), enableSubmit());
}

function showExtraError(e) {
    var t, e = "<li class='text-danger'>" + JSON.parse(e).message + "</li>";
    0 == $("#extraErrorInfoDiv").length ? (t = "<div id='extraErrorInfoDiv'>", t = (t = "<div id='extraErrorInfoDiv'><ol id='extraErrorList'><h4 class='text-warning'>General Errors</h4></ol>") + e + "</ol></div>", 
    $("#" + getExecutionResultsParentDiv()).append(t)) : $("#extraErrorList").append(e);
}

function showCharDiffInJavaExecResults() {
    $.each($(".execOutputTR"), function(e, t) {
        $(t).attr("tr-run-id");
        var s = [ "" ], a = [ "" ], r = $(t).hasClass("danger"), n = $(t).find(".expectedOutput.outputPre").text(), o = $(t).find(".userOutput.outputPre").text();
        0 == o.length ? (s[0] = o, a[0] = replaceWhiteSpaceWithCtTags(n)) : r ? markDifferencesInOutputs(o, n, s, a) : (s[0] = replaceWhiteSpaceWithCtTags(n), 
        a[0] = replaceWhiteSpaceWithCtTags(n)), $(t).find(".expectedOutput.outputPre").html(a[0]), 
        $(t).find(".userOutput.outputPre").html(s[0]);
    });
}

function getModifiedStackTraceMsg(e) {
    for (var t = [], t = e.split("\n"), s = "", a = !0, r = !1, n = -1, o = 0; o < t.length; o++) if (-1 < t[o].indexOf("com.ct.applet.CodeExecutor")) {
        for (var r = !0, i = o, l = o - 1; 1 <= l; l--) {
            if (!(-1 < t[l].indexOf("reflect.") && a)) {
                a = !1, n = l;
                break;
            }
            o--;
        }
        for (var c = 0; c <= n; c++) s = s + t[c] + "\n";
        o = i;
    } else if (r) -1 < t[o].indexOf("java.lang.Thread") || (s = s + t[o] + "\n"); else if (o == t.length - 1 && !r) for (var d = 0; d < t.length; d++) s = s + t[d] + "\n";
    return s;
}

function replaceHTMLTags(e) {
    return e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = (e = e.replace(/<b>/g, "&lt;b&gt;")).replace(/<\/b>/g, "&lt;/b&gt;")).replace(/<h1>/g, "&lt;h1&gt;")).replace(/<\/h1>/g, "&lt;/h1&gt;")).replace(/<h2>/g, "&lt;h2&gt;")).replace(/<\/h2>/g, "&lt;/h2&gt;")).replace(/<h3>/g, "&lt;h3&gt;")).replace(/<\/h3>/g, "&lt;/h3&gt;")).replace(/<mic>/g, "&lt;mic&gt;")).replace(/<\/mic>/g, "&lt;/mic&gt;")).replace(/<head>/g, "&lt;head&gt;")).replace(/<\/head>/g, "&lt;/head&gt;");
}

function getModifiedStackTraceMsgForTestCode(e, t, s, a) {
    var r = [], r = e.split("\n"), n = "", o = !1, i = -1, l = [];
    s = "\t at " + t + "." + s + "(", a = "\t at " + t + "." + a + "(";
    for (var c = 0; c < r.length; c++) if (r[c].startsWith(s)) {
        for (var o = !0, d = c, p = c - 1; 0 <= p; p--) {
            if (r[p].startsWith(a)) {
                i = p;
                break;
            }
            r[p].startsWith("\tat ") || l.push(r[p]);
        }
        for (var u = 0; u <= i; u++) n = n + r[u] + "\n";
        for (u = l.length - 1; 0 <= u; u--) n = n + l[u] + "\n";
        c = d;
    } else if (o) if (r[c].startsWith("\tat ")) {
        if (r[c].startsWith("\tat java.lang.Thread.run(")) {
            for (var g = c + 1; g < r.length; g++) n = n + r[g] + "\n";
            break;
        }
    } else n = n + r[c] + "\n"; else if (c == r.length - 1 && !o) for (g = 0; g < r.length; g++) n = n + r[g] + "\n";
    return n;
}

function getDocUrl(e, t, s, a) {
    s = s ? "https://seleniumhq.github.io/selenium/docs/api/java/" : "https://docs.oracle.com/javase/8/docs/api/";
    return a && $(a)[0].hasAttribute("htmlFileName") ? (a = $(a).attr("htmlFileName"), 
    e.lastIndexOf(a) == e.length - a.length && (e = (e = e.substring(0, e.lastIndexOf(a))).replace(/\./g, "/"), 
    e += a)) : e = e.replace(/\./g, "/"), t ? s + e + ".html#" + t : s + e + ".html";
}

function moreClassInfoClicked(e) {
    var t = $(e).attr("className"), e = getDocUrl(t, $(e).attr("hashTag"), $(e).hasClass("se"), $(e));
    opendialog(t, e);
}

function ctDiff(e, t, s) {
    for (var a, r, n = 0, o = 0, i = 0, l = 0, c = !1, d = !1, p = 0; p < e.length; p++) {
        if (++l, e[p] !== t[p]) {
            a = e[p], r = t[p], c = !0;
            break;
        }
        "\n" == e[p] && (++n, ++o, i = -1, l = 0), ++i;
    }
    if (!c && e.length < t.length) for (d = !0, p = e.length; p < t.length; p++) "\n" == t[p] && (++o, 
    l = -1), ++l;
    var u = {};
    return u.startRow = n, u.endRow = o, u.startColumn = i, u.endColumn = l, u.actualChar = a, 
    u.writtenChar = r, u.isExtraContentFind = d, u;
}

function characterReplaceWithId(e, t, s, a, r) {
    void 0 === a && (a = "copyWritingEditorContainer"), void 0 === r && (r = "correctContentEditorContainer"), 
    e.getSelection().selectAll(), e.getSelection().clearSelection();
    var n = ace.require("ace/range").Range;
    e.gotoLine(s.startRow + 1, s.startColumn, !0), t.gotoLine(s.startRow + 1, s.startColumn, !0), 
    showCorrectContentPopoverOnWrittenDiv(a, r, s), e.getSelection().addRange(new n(s.startRow, s.startColumn, s.endRow, s.endColumn), !1), 
    s.isExtraContentFind && t.getSelection().addRange(new n(s.startRow, s.startColumn, s.endRow, s.endColumn), !1), 
    t.focus();
}

function showCorrectContentPopoverOnWrittenDiv(t, s, e) {
    var a = "", r = "", n = (t += " .ace_cursor", s += " .ace_cursor", 100), a = e.isExtraContentFind ? "Please delete the extra content and try again." : "\n" == e.actualChar ? "<span style='white-space: nowrap;'> Press <c>Enter &crarr;</c> here.</span>" : " " == e.actualChar ? (r = "A <c title='Press the Space bar on the keyboard to insert space.'>space</c> is missing in the code you have typed on the right side.", 
    "<span style='white-space: nowrap;'> Insert <c title='Press the Space bar on the keyboard to insert space.'>space</c> here.</span>") : "\t" == e.actualChar ? (r = "A <c title='Press the Tab key on the keyboard.'>tab</c> character is missing in the code you have typed on the right side.", 
    "<span style='white-space: nowrap;'> Press <c title='Press the Tab key on the keyboard.'>Tab <span class='Unicode'>↹</span></c> here.</span>") : (r = " <span style='white-space: nowrap;'>  This &nbsp;<span class='charDiffSpan'>" + e.actualChar + "</span> &nbsp;is missing</span> in the code you have typed on the right side.", 
    "Insert &nbsp;<span class='charDiffSpan'>" + e.actualChar + "</span> &nbsp;here.");
    setTimeout(function() {
        "" != r && ($("#" + t).popover({
            placement: function(e, t) {
                t = $(t).position().left;
                return 160 < t && t < 280 ? "right" : "left";
            },
            html: !0,
            title: "<strong>Correct the content </strong><span class='close diffClose'><span>&nbsp;&times;</span></span> ",
            template: '<div class="popover ctDiffPopover" id="popoverDivOnShowError" role="tooltip" style="color: black; pointer-events: fill"><div class="arrow"></div><h3 class="popover-header" style="background-color: #ED6565; color:white"></h3><div class="popover-body"></div></div>',
            content: r
        }), $("#" + t).popover("show"), $("#" + t).next().addClass("animated bounceInDown"), 
        n = 1e3), "" != a && ($("#" + s).popover({
            placement: "right",
            html: !0,
            title: "<strong>Correct the content </strong><span class='close diffClose'><span>&nbsp;&times;</span></span> ",
            template: '<div class="popover ctDiffPopover" id="popoverDivOnShowError" role="tooltip" style="color: black; pointer-events: fill"><div class="arrow"></div><h3 class="popover-header" style="background-color: #ED6565; color:white"></h3><div class="popover-body"></div></div>',
            content: a
        }), setTimeout(function() {
            $("#" + s).popover("show"), $("#" + s).next().addClass("animated bounceInLeft"), 
            $(".diffClose").on("click", function(e) {
                l(e), $("#" + t).popover("dispose"), $("#" + s).popover("dispose");
            });
        }, n));
    }, 200);
}

function closeAllDiffPopovers() {
    $(".popover.ctDiffPopover").each(function(e, t) {
        $(t).prev().popover("dispose");
    });
}

function closeCorrectTheContentPopoverOnWrittenDiv(e) {
    e = -1 == e.indexOf(".ace_cursor") ? e + " .ace_cursor" : e, $("#" + e).attr("aria-describedby") && $("#" + e).popover("dispose");
}

function getPythonExceptionDetailsAsText(e, t) {
    var s = e;
    return "<fieldset class='outputOnSTDErr-border'>\t<legend class='outputOnSTDErr-border'> <span style='font-weight:bold;font-size: 60%;color:black;' class='fa-stack fa-sm '><i class='fa fa-square fa-stack-2x'></i><i class='fa fa-terminal fa-stack-1x fa-inverse'></i></span> Output in Error Stream : " + t + "</legend><pre class='pythonErrorPre'>" + (s = e.startsWith("Traceback (most recent call last):") ? formatPythonExceptionLines(e.trim()) : s) + "</pre></fieldset>";
}

function formatPythonExceptionLines(e) {
    for (var t = e.split("\n"), s = '  File "', a = '", line ', r = "", n = 0; n < t.length; n++) {
        var o, i, l, c, d, p = t[n];
        0 == n ? r += p + "\n" : n == t.length - 1 ? r += -1 == (i = p.indexOf(":")) ? p + "\n" : "<a class='pythonExceptionClassName' onclick='openPythonErrorDocs(\"" + (o = p.substring(0, i)) + "\")' >" + o + " <i style='font-size:60%;' class='fa fa-external-link' aria-hidden='true'></i></a>  <b>" + p.substring(i + 1) + "<b>\n" : (p = p.replace("<module>", "&lt;module&gt;")).startsWith(s) ? (o = s.length, 
        i = p.indexOf(a), l = p.indexOf(", in"), c = p.substring(o, i), d = "", 
        r += "<a href='javascript:showErrorLine(" + p.substring(i + a.length, l) + ', 0,0,0,0,0,0,"' + c + "\")'>" + p + " " + (d = n == t.length - 3 ? " <i class=' noUnderLine  fa fa-arrow-left faa-passing-left animated'></i><i class=' noUnderLine fa fa-bug faa-burst'></i>" : d) + " </a>\n") : r += p + "\n";
    }
    return r;
}

function openPythonErrorDocs(e) {
    window.open("https://docs.python.org/3/library/exceptions.html#" + e, "_blank");
}

var oe = function() {
    function c(e, t, s, a) {
        l("XX In ... renderTestCaseTable");
        for (var r = "", n = "", o = ("function" == typeof getCTMode && 0 == getCTMode() && (r = "<i role='button' class='fa fa-copy ct-copy-test-case-io' style='float: right; padding-top: 2px; color: gray; cursor: pointer;' title='Click to copy the output to clipboard'></i>", 
        n = "<i role='button' class='fa fa-pencil ct-edit-test-case' style='cursor: pointer; float: right; padding-right: 10px;' title='Click to edit the test case manually'></i>"), 
        "<table class='table table-bordered table-sm cOutputTable darkShadow' style='width: 100%; margin-bottom: 5px;'> <thead>     <tr style='background-color: lightgray;'>         <th class='text-center'>Output" + r + n + "</th>     </tr> </thead> <tbody class='output-table-" + a + "'>"), i = (t && (s && 0 < s.length ? o += "<tr><td><span>Command line args </span>" + s.map(function(e) {
            return "<span style='font-size: 100%;' class='label label-warning'>" + e + "</span>";
        }).join(" ") + "</td></tr>" : o += "<tr><td><span>Command line args </span><span style='background-color: orange; padding: 3px;'>" + EMPTY_EXEC_USER_OUTPUT_PALCEHOLDER + "</span></td></tr>"), 
        !1), c = !1, d = 0; d < e.length; d++) {
            var p, u = e[d];
            !u.isProgramOutput || d == e.length - 1 || !(p = e[d + 1]).isProgramOutput || "" != p.programOutput || p.hasOwnProperty("found") && p.found || !u.hasOwnProperty("found") || !u.found || (u.error = !0, 
            u.missingNewLineAtEnd = !0), i || (o += "<tr>", i = !0), u.isUserInput ? (-1 == o.indexOf("__user__Input__") ? o += "<td><span class='cmd' style='padding: 1px 4px' title='User Input'>" + replaceLTandGRTags(u.userInput) + "</span></td>" : (p = "<span class='cmd' style='padding: 1px 4px' title='User Input'>" + replaceLTandGRTags(u.userInput) + "</span>", 
            o = o.replace(/__user__Input__/g, p)), c = i = !1) : u.isProgramOutput && "" == u.programOutput ? (o += 0 == d || c ? "<td class='danger test-cases-danger text-danger'>" + EMPTY_EXEC_USER_OUTPUT_PALCEHOLDER + "</td></tr>" : "</tr>", 
            i = !(c = !0), o = o.replace(/__user__Input__/g, "")) : u.isProgramOutput && (c = !1, 
            o = o + ("<td><pre class='outputPre'>" + replaceWhiteSpaceWithCtTags(replaceLTandGRTags(u.programOutput))) + "__user__Input__</pre></td>");
        }
        return o = o.replace(/__user__Input__/g, ""), o += "</tbody></table>";
    }
    function r(t, e, s) {
        var a = ((window.cq || "function" == typeof getCurrentQ && getCurrentQ() || {}).cExecutionResultsArr || [])[t], a = $("#currentCTestResult-" + t).data("cmdArgs") || a && a.cmdArgs || [], r = "<div class='input-group' style='margin-bottom: 10px;'> <span class='input-group-addon' style='margin-top: 10px;'>Command line args</span> <input type='text' name='edit-cmd-args' id='edit-cmd-args-" + t + "' aria-label='Cmd Args'     class='form-control edit-cmd-args'/></div><table class='table table-bordered table-condensed io-table' style='margin-bottom: 2px;'> <thead>     <tr style='background-color: lightgray;'>         <th class='td-center'>Input</th>         <th class='td-center'>Output</th>     </tr> </thead> <tbody>     <td class='td-center'>         <pre class='noBp-input form-control input-sm' id='noBp-input-" + t + "' style='margin: 0; border: 0;'></pre>     </td>     <td class='td-center'>         <pre class='noBp-output form-control input-sm' id='noBp-output-" + t + "' style='margin: 0; border: 0;'></pre>     </td> </tbody></table><div style='float: right;'> <button class='btn btn-sm btn-primary edit-test-case-back-btn' style='padding-top: 0; padding-bottom: 0;' data-i='" + t + "' onclick='oe.switchToTabularView(this)'>Back</button></div>";
        if (s) return r;
        $("#currentCTestResult-" + t).html(r), n(t, e), $("#edit-cmd-args-" + t).tagsinput({
            allowDuplicates: !0
        }), a.forEach(function(e) {
            $("#edit-cmd-args-" + t).tagsinput("add", e);
        });
    }
    function n(e, t) {
        var s, a, r, n, o;
        $("#noBp-input-" + e).length && $("#noBp-output-" + e).length && ((s = ace.edit("noBp-input-" + e, {
            minLines: 5,
            maxLines: 5,
            mode: "text",
            fontSize: "15px"
        })).getSession().on("change", function() {
            15e3 < s.getValue().length && (Swal.fire({
                html: "<span>Input for Test case - ".concat(e + 1, " cannot be more than 50KB. Please try again with a smaller input</span>"),
                icon: "error",
                customClass: {
                    container: "swal-container"
                }
            }), s.getSession().getUndoManager().undo(), s.getSession().getUndoManager().reset());
        }), (a = ace.edit("noBp-output-" + e, {
            minLines: 5,
            maxLines: 5,
            mode: "text",
            fontSize: "15px"
        })).getSession().on("change", function() {
            15e3 < a.getValue().length && (Swal.fire({
                html: "<span>Output for Test case - ".concat(e + 1, " cannot be more than 50KB. Please try again with a smaller output</span>"),
                icon: "error",
                customClass: {
                    container: "swal-container"
                }
            }), a.getSession().getUndoManager().undo(), a.getSession().getUndoManager().reset());
        }), r = (t || []).filter(function(e) {
            return e.userInput;
        }).map(function(e) {
            return e.userInput;
        }).join("\n"), t = [].concat(t || []).filter(function(e, t, s) {
            var a = s[t - 1] && s[t - 1].isUserInput, s = s[t + 1] && s[t + 1].isProgramOutput && !s[t + 1].programOutput;
            return e.isProgramOutput && (e.programOutput || !(a && s));
        }).map(function(e) {
            return e.programOutput || "\n";
        }).join(""), n = $("#noBp-input-" + e), o = $("#noBp-output-" + e), n.data("editor", s), 
        o.data("editor", a), n.data("editor").setValue(r, -1), o.data("editor").setValue(t, -1), 
        $(".execution-results-container").animate({
            scrollTop: $("#noBp-input-" + e).offset().top
        }, 2e3), n.data("editor").focus());
    }
    return $(document).on("click", ".ct-copy-test-case-io", function() {
        var s = "", e = ($.each($(this).closest("table").find("tbody > tr"), function(e, t) {
            s += $(t).text().replace(/·/g, " ").replace(/→/g, "\t") + "\n";
        }), $("#htf"));
        e.val(s), e.select(), document.execCommand("copy"), alertify.log("Test case copied!!", "success", 5e3);
    }), $(document).on("click", ".ct-edit-test-case", function() {
        var e = $(this).closest(".currentCTestResult").data("i"), t = $("#currentCTestResult-" + e).data("cExecutionFlowArr") || (((window.cq || "function" == typeof getCurrentQ && getCurrentQ()).cExecutionResultsArr || [])[e] || {}).cExecutionFlowArr || [], s = (t || []).findIndex(function(e) {
            return e.isProgramOutput;
        }), a = (t || []).findIndex(function(e) {
            return e.isUserInput;
        });
        s < a && 0 <= s ? Swal.fire({
            html: "<span>This test case cannot be edited by hand. You will have to delete it and use Generate Test Case to add a changed one.</span>",
            icon: "error",
            customClass: {
                container: "swal-container"
            }
        }) : r(e, t, !1);
    }), Object.freeze({
        renderTestCaseTable: c,
        switchToTabularView: function(e, t) {
            if (e && (t = $(e).data("i")), $("#noBp-input-" + t).length && $("#noBp-output-" + t).length) {
                for (var e = ace.edit("noBp-input-" + t), s = ace.edit("noBp-output-" + t), e = e.getValue(), e = e ? e.split(/\n/).map(function(e) {
                    return {
                        isUserInput: !0,
                        userInput: e
                    };
                }) : [], a = s.getValue().split(/\n/), r = [], n = 0; n < a.length; n++) {
                    var o = a[n];
                    n < a.length - 1 ? (o && r.push({
                        isProgramOutput: !0,
                        programOutput: o
                    }), r.push({
                        isProgramOutput: !0,
                        programOutput: ""
                    })) : o && r.push({
                        isProgramOutput: !0,
                        programOutput: o
                    });
                }
                var s = e.concat(r), e = $("#edit-cmd-args-" + t).tagsinput("tags"), i = $("#executeUsingCmdArgs").is(":checked") || e && e.length, l = $("#currentCTestResult-" + t);
                l.html(c(s, i, e, t)), l.data("cExecutionFlowArr", s), l.data("cmdArgs", e);
            }
        },
        renderNoBoilerTestCase: r,
        initializeEditors: n
    });
}();
//# sourceMappingURL=noitucexe-tuptuo.min.js.map