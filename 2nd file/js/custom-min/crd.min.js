$(document).ready(function() {
    try {
        getUserIP(function(t) {
            _ct_blip = t;
        });
    } catch (t) {}
});

var _ct_domainName = location.hostname, _ct_uid = ("" == _ct_domainName && (_ct_domainName = "no-domain"), 
"undefined" == typeof _ct_cookieId ? "_ct_id_" + new Date().getTime() + "-" + Math.floor(1e3 * Math.random()).toString() : _ct_cookieId), _ct_lid = void 0 === _ct_lid ? "_ct_lid_" : _ct_lid, _ct_uname = void 0 === _ct_uname ? "_ct_uname_" : _ct_uname, _ct_groups = void 0 === _ct_groups ? [] : _ct_groups, _ct_blip = "", _ct_qpath, _crd_socket;

function _crdInit(pageDetails) {
    var _ct_qid, _ct_qid, groupIdsText = (pageDetails && (_ct_qid = $("#questionTitleOL").text().trim(), 
    _ct_qid = _ct_qid.split("\n"), $.each(_ct_qid, function(t) {
        _ct_qid[t] = _ct_qid[t].trim(), _ct_qid[t].startsWith("[..") || (_ct_qpath = 0 < t ? _ct_qpath + " / " + _ct_qid[t] : _ct_qid[t]);
    }), pageDetails.questionPath = _ct_qpath), ""), groupId;
    for (groupId in _ct_groups) 0 < groupIdsText.length && (groupIdsText += ","), 
    groupIdsText += groupId;
    var _ct_queryParams = {
        query: "_ct_uid=" + _ct_uid + "&domainName=" + _ct_domainName + "&groupIds=" + groupIdsText + "&page=" + location.pathname
    }, _ct_visitorData = {
        referringSite: document.referrer,
        pageDetails: pageDetails || {
            page: location.pathname
        },
        _ct_uid: _ct_uid,
        _ct_lid: _ct_lid,
        _ct_uname: _ct_uname,
        _ct_groups: _ct_groups,
        _ct_blip: _ct_blip
    };
    return _crd_socket = io("https://stats.codetantra.com", _ct_queryParams), _crd_socket.on("memberOnline", function(t) {
        memberOnline(t);
    }), _crd_socket.on("memberLeft", function(t) {
        memberLeft(t);
    }), _crd_socket.on("trackMe", function(t) {
        createCookie("_ct_tid", t.id);
    }), _crd_socket.on("getVisitorData", function(t) {
        _crd_socket.emit("visitor-data", _ct_visitorData);
    }), _crd_socket.on("getScreenShot", function(e) {
        "function" == typeof html2canvas ? html2canvas(document.body, {
            onrendered: function(t) {
                t.toBlob(function(t) {
                    e.screenShotData = {
                        imgContent: t
                    }, _crd_socket.emit("screenShotResp", e);
                });
            }
        }) : (e.reqJSMissing = !0, _crd_socket.emit("screenShotResp", e));
    }), _crd_socket.on("messageToClient", function(data) {
        eval(data.func);
    }), canCallLockedQuestion = !0, _crd_socket.on("lockedQuestion", function(data) {
        data.hasOwnProperty("memberId") && data.memberId == _ct_uid || canCallLockedQuestion && (canCallLockedQuestion = !1, 
        eval(data.func));
    }), _crd_socket;
}

function sendTermCreatedDataToStats(t) {
    _crd_socket && _crd_socket.emit("termCreated", t);
}

function sendTermDisconnectionCount() {
    _crd_socket && _crd_socket.emit("termDisconnectCount");
}

function memberOnline(t) {}

function memberLeft(t) {}

function createCookie(t, e, c) {
    var n = "", c = (c && ((o = new Date()).setTime(o.getTime() + 24 * c * 60 * 60 * 1e3), 
    n = "; expires=" + o.toUTCString()), window.location.hostname), o = window.location.hostname, i = c.lastIndexOf(".");
    -1 < i && -1 < (i = c.lastIndexOf(".", i - 1)) && (o = c.substring(i)), document.cookie = t + "=" + e + n + ";domain=" + o + ";path=/";
}

function getUserIP(e) {
    function c() {}
    var n = new (window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection)({
        iceServers: []
    }), o = {}, i = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g;
    function a(t) {
        o[t] || e(t), o[t] = !0;
    }
    n.createDataChannel(""), n.createOffer().then(function(t) {
        t.sdp.split("\n").forEach(function(t) {
            t.indexOf("candidate") < 0 || t.match(i).forEach(a);
        }), n.setLocalDescription(t, c, c);
    }).catch(function(t) {}), n.onicecandidate = function(t) {
        t && t.candidate && t.candidate.candidate && t.candidate.candidate.match(i) && t.candidate.candidate.match(i).forEach(a);
    };
}
//# sourceMappingURL=crd.min.js.map