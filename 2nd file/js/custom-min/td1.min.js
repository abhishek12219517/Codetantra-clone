var tdr = function() {
    showLoadingModal(), ctUserWinId = "ctUserWinId-" + Math.floor(1e3 * Math.random()).toString() + "-" + new Date().getTime().toString().substring(3), 
    learningStatus.hasOwnProperty("extraInfo"), $("#pointsModalDialog").draggable({
        handle: ".modal-header"
    });
    for (var e = 0; e < jsonLabsArr.length; e++) for (var t = jsonLabsArr[e], n = t._id.$oid, s = t.sessionsArr, a = 0; a < s.length; a++) for (var o = s[a], i = 0; i < o.questionsArr.length; i++) {
        var r = o.questionsArr[i].id;
        qIdVsLabIdsArr.hasOwnProperty(r) || (qIdVsLabIdsArr[r] = {}), qIdVsLabIdsArr[r][n] = n;
    }
    $.each(responsesArr, function(e, t) {
        responsesMap[t.question] = t;
    }), $.each(partialResponsesArr, function(e, t) {
        partialResponsesMap[t.question] = t, partialParentQIdMap[t.parentId] = t;
    }), initLearningStatusMap(), initSectionIdSubUnitMap(), genSections(subUnitsJsonDataArr), 
    $("#courseATag").text(currentCourseName), $("#courseATag").attr("href", "course-details.jsp?cid=" + cid + "&bd=" + encodeURIComponent(getBD()) + "&rja=" + rja), 
    $("#topicNameHeading").text(currentUnitName);
    var l = $("#isHandsfree"), d = (l.bootstrapToggle(), l.on("change", function(e) {
        var t = l.prop("checked");
        toggleHandsFreeMode(t);
    }), $(".questions").on("click", function() {
        var e, t, n, s, a, o;
        $(this).hasClass("answered") || $(this).hasClass("partiallyAnswered") || isQuestionBased ? (e = $(this).attr("subUnitId"), 
        t = $(this).attr("subUnitName"), n = $(this).attr("sectionId"), s = $(this).attr("sectionName"), 
        a = $(this).attr("qid"), o = $(this).attr("bd"), openQuestionDialog(e, t, n, s, a, IN_LEARN_MODE, o)) : $(".enabledSubUnitLearnBtn").click();
    }), intitProgressTable(), $.ajax({
        type: "POST",
        url: "/secure/rest/qhs/cr",
        headers: jsonHeaders,
        dataType: "json",
        data: JSON.stringify({})
    }));
    d.done(function() {
        onJavaLoadComplete(), setTimeout(function() {
            hideLoadingModal();
        }, 1e3);
    }), d.fail(function() {
        d.getResponseHeader("X-SessionTimeout") ? openLoginDialog() : alertify.error("Could not Submit...[please see the console]", 8e3);
    }), $("body").on("click keydown", function(e) {
        (e && (27 === e.keyCode || void 0 === $(e.target).data("original-title") && !$(e.target).parents().is(".popover")) && 0 < $("#sharingContent").length || _.isEmpty($("#lockableGroups").val())) && $(".facultyScreenShare").popover("hide");
    }), $(document).on("click", ".submitBtn", function() {
        $(".submitBtn").hasClass("disabled") || ($(".submitBtn").addClass("disabled"), 
        $(".runBtn").addClass("disabled"), runClicked = !1, submitClicked());
    }), $(".resetBtn").click(function() {
        resetClicked();
    }), $(".closeBtn").click(function() {
        closeClicked();
    }), $(".nextBtn").click(function() {
        $(".nextBtn").hasClass("disabled") || ($(".nextBtn").addClass("disabled"), 
        nextClicked());
    }), window.addEventListener("storage", function(e) {
        e.storageArea === localStorage && ("sriha" === e.key && e.newValue && (window.localStorage.removeItem("sriha"), 
        setTimeout(function() {
            _ctReloadPage();
        }, 10)), "mavi" === e.key) && e.oldValue !== e.newValue && setTimeout(function() {
            _ctReloadPage();
        }, 10);
    });
};

function chooseScreenShareOptions() {
    if (_.isEmpty($("#lockableGroups").val())) return alertify.error("Please select the group", 6), 
    !1;
    var e = '<div class="custom-checkbox custom-control"><input id="screenShare" class="custom-control-input " type="checkbox" name="streamSharing" value="screenSharing"><label for="screenShare" class="custom-control-label font-weight-bold">Screen</label></div>';
    e += '<div class="custom-checkbox custom-control "><input id="audioShare" class="custom-control-input" type="checkbox" name="streamSharing" value="audioSharing" onchange="videoPropChecking()"><label for="audioShare" class="custom-control-label font-weight-bold">Audio</label></div>';
    $("#facultyScreenShare").popover({
        placement: "top",
        html: !0,
        container: "body",
        content: '<div id="sharingContent" class="col-sm-4"></div>'
    }), $("#facultyScreenShare").popover("show"), $("#sharingContent").append('<div class="custom-checkbox custom-control"><input id="screenShare" class="custom-control-input " type="checkbox" name="streamSharing" value="screenSharing"><label for="screenShare" class="custom-control-label font-weight-bold">Screen</label></div><div class="custom-checkbox custom-control "><input id="audioShare" class="custom-control-input" type="checkbox" name="streamSharing" value="audioSharing" onchange="videoPropChecking()"><label for="audioShare" class="custom-control-label font-weight-bold">Audio</label></div><div id="videoShareDiv" class="custom-checkbox custom-control d-none"><input id="videoShare" class="custom-control-input" type="checkbox" name="streamSharing" value="videoSharing"><label for="videoShare" class="custom-control-label font-weight-bold">Video</label></div><button class="btn btn-sm btn-primary ml-4" id="facultySharingBtn" onclick="facultySharingBtnClicked()">Share</button>');
}

function videoPropChecking() {
    var e = $("#videoShareDiv");
    $("#audioShare").prop("checked") ? e.removeClass("d-none") : (e.addClass("d-none"), 
    e.prop("checked", !1));
}

function facultySharingBtnClicked() {
    var e = "", t = $("#screenShare"), n = $("#videoShare"), s = $("#audioShare");
    if (!t.prop("checked") && !n.prop("checked") && !s.prop("checked")) return alertify.error("Please select any one of the stream type", 2), 
    !1;
    !t.prop("checked") || s.prop("checked") || n.prop("checked") ? t.prop("checked") || !s.prop("checked") || n.prop("checked") ? !t.prop("checked") && s.prop("checked") && n.prop("checked") ? e = "audioVideoShare" : t.prop("checked") && s.prop("checked") && !n.prop("checked") ? e = "screenAudioShare" : t.prop("checked") && s.prop("checked") && n.prop("checked") && (e = "screenAudioVideoShare") : e = "audioShare" : e = "screenShare";
    var a = [], o = ($.each($("#lockableGroups").select2("data"), function(e, t) {
        t = convertToMap(t.userIdsArr);
        a = a.concat(Object.keys(t));
    }), []), t = ($.each(a, function(e, t) {
        o[e] = _ct_ch_id + "-" + t;
    }), {
        watcherId: o.join("_"),
        watcherUserid: "",
        presenterId: _ct_ch_id + "-" + _ct_uid,
        presenterUserid: _ct_uid,
        streamType: e,
        groupIds: $("#lockableGroups").val().join("-"),
        isFacultyBroadcasting: !0
    });
    _ctssws.openSSPermissionWindowWithPost(t);
}

function getAllSectionQuestionPIdsMap() {
    return JSON.stringify(allSectionQuestionPIdsMap);
}

function initSectionIdSubUnitMap() {
    $.each(subUnitsJsonDataArr, function(e, n) {
        $.each(n.sectionsArr, function(e, t) {
            isQuestionBased ? sectionIdSubUnitMap[t.id] = n : sectionIdSubUnitMap[t] = n;
        });
    });
}

function initLearningStatusMap() {
    0 < subUnitsJsonDataArr.length && (learningStatus.hasOwnProperty("completedDetails") && learningStatus.completedDetails.hasOwnProperty(tid) ? $.each(learningStatus.completedDetails[tid], function(e, t) {
        if ("completedSubUnits" == e || "allCompleted" == e) return !0;
        if (t.allCompleted) markAllSectionsInSubUnit(e, learningStatusSubUnitMap[e] = COMPLETED); else if (learningStatus.nextEndUserSubUnit == e) {
            learningStatusSubUnitMap[e] = STARTED;
            for (var n = subUnitMap[e].sectionsArr, s = 0; s < n.length; s++) learningStatus.nextSection == n[s] ? learningStatusSectionMap[n[s]] = STARTED : learningStatus.completedDetails[tid].hasOwnProperty(e) && learningStatus.completedDetails[tid][e].hasOwnProperty(n[s]) && learningStatus.completedDetails[tid][e][n[s]].hasOwnProperty("allCompleted") && learningStatus.completedDetails[tid][e][n[s]].allCompleted ? learningStatusSectionMap[n[s]] = COMPLETED : learningStatusSectionMap[n[s]] = NOT_STARTED;
        } else markAllSectionsInSubUnit(e, learningStatusSubUnitMap[e] = NOT_STARTED);
    }) : enableOnlyFirstSectionInFirstSubUnit());
}

function markAllSectionsInSubUnit(e, t) {
    l("subUnitId ==> " + e + " : status = " + t);
    for (var n = subUnitMap[e].hasOwnProperty("sectionsArr") ? subUnitMap[e].sectionsArr : [], s = 0; s < n.length; s++) learningStatusSectionMap[n[s]] = t;
}

function enableOnlyFirstSectionInFirstSubUnit() {
    var e = subUnitsJsonDataArr[0];
    learningStatusSubUnitMap[e._id.$oid] = STARTED;
    for (var t = 1; t < subUnitsJsonDataArr.length; t++) e = subUnitsJsonDataArr[t], 
    learningStatusSubUnitMap[e._id.$oid] = NOT_STARTED;
    var n = subUnitsJsonDataArr[0].sectionsArr;
    if (0 < n.length) {
        var s = n[0];
        learningStatusSectionMap[s] = STARTED;
        for (t = 1; t < n.length; t++) learningStatusSectionMap[n[t]] = NOT_STARTED;
    }
}

function getSubUnitCompletedStatus(e, t) {
    return learningStatus.hasOwnProperty("completedDetails") && learningStatus.completedDetails.hasOwnProperty(e) && learningStatus.completedDetails[e].hasOwnProperty(t) ? learningStatus.completedDetails[e][t].hasOwnProperty("allCompleted") && learningStatus.completedDetails[e][t].allCompleted ? COMPLETED : STARTED : NOT_STARTED;
}

function genSections(c) {
    function e() {
        for (var e = "", t = null, n = 0; n < c.length; n++) {
            var s = c[n]._id.$oid, a = null == (a = c[n].sectionsArr) ? [] : a, o = [], i = (o.push(NOT_STARTED), 
            ""), i = (isQuestionBased ? getDummySectionTextInSubUnitForQuestions : getSectionsTextInSubUnit)(c[n], o), r = (null == t && 0 < a.length && (o[0] == NOT_STARTED || o[0] == STARTED) && (t = s), 
            "gray"), a = (e = (e = (e = e + '<div subUnitId="' + s + '" class="bs-callout lightShadow subUnit bs-callout-' + (r = o[0] != COMPLETED && t != s ? r : o[0] == COMPLETED ? "blue" : "warm") + '"><div class="bs-callout-body">') + '\t\t<h6 class="">' + c[n].subUnit) + '\t\t\t<span id="sectionId-' + c[n]._id.$oid + '" class="alert alert-success pull-right " style="padding-top: 4px; padding-bottom: 4px; display:none"><a class="fa-stack fa-lg" >', 
            e = (e = (e += '\t\t\t\t<i class="fa fa-check fa-stack-1x  text-success "></i> ') + '\t\t\t\t<i class="fa fa-circle-o fa-stack-2x text-success " ></i>' + "\t\t\t</a> Completed</span>") + "\t\t</h6>" + '<div class="sectionsDiv">', 
            0 == a.length ? e += "<p><span>There are no sections yet!</span></p>" : e = e + '\t\t<ul id="sortableSections_' + n + '" class="sortableSections">' + i + "\t\t</ul>", 
            ""), i = "", l = "", d = "", o = (o == COMPLETED ? a = "disabled" : t == s && (l = i = "disabled", 
            d = "enabledSubUnitLearnBtn"), "d-none"), r = ("gray" != r ? o = "" : l = i = "disabled", 
            e = e + "</div>" + '<div class="buttonContainerDiv aa" style="">', "disabled" == a ? "" : " onClick='openQuestionDialog(\"" + s + '", "' + c[n].subUnit.replace(/\'/g, "`") + '", "", "", "", ' + IN_LEARN_MODE + ")'"), a = (e = (e = (e = (e = (e = (e = e + '<button  subUnitId="' + s + '" class=" learnBtn actionBtn fade btn btn-play btn-lg ' + a + " " + d + " " + o + ' " ' + r + " >Learn") + '\t\t\t\t<a class="fa-stack fa-lg" href="#">' + '\t\t\t\t<i class="fa fa-play fa-stack-1x  fa-inverse "></i>') + "\t\t\t\t</a>" + "</button>") + '<button  subUnitId="' + s + '" class=" reviseBtn actionBtn fade btn btn-revise btn-lg  ' + i + " " + o + ' " ' + ("disabled" == i ? ' title="Can revise only after completing all the exercises." ' : " onClick='openQuestionDialog(\"" + s + '", "' + c[n].subUnit.replace(/\'/g, "`") + '", "", "", "", ' + IN_REVISION_MODE + ")' ") + ">Revise") + '\t\t\t\t<a class="fa-stack fa-lg" href="#">' + '\t\t\t\t<i class="fa fa-refresh fa-stack-1x fa-inverse"></i>') + "\t\t\t\t</a>" + "</button>", 
            "disabled" == l ? ' title="Can take the test after completing all the exercises." ' : " onClick='openQuestionDialog(\"" + s + '", "' + c[n].subUnit.replace(/\'/g, "`") + '", "", "", "", ' + IN_SELF_TEST_MODE + ")' ");
            e = (e = (e = (e = e + '<button  subUnitId="' + s + '" class="testBtn actionBtn fade btn btn-test btn-lg  ' + l + " " + o + ' " ' + a + ">Self Test") + '\t\t\t\t<a class="fa-stack fa-lg" href="#">' + '\t\t\t\t<i class="fa fa-check-square-o fa-stack-1x fa-inverse"></i>') + "\t\t\t\t</a>" + "</button>") + "</div>" + "</div></div>";
        }
        $("#sectionBody").html(e);
    }
    var t, n, s;
    "function" == typeof csea && accessFromSeaOnly && window.ipcN.isSeaOnly() && (n = (t = csea()).collectDataForSea, 
    s = t.sendCollectedDataForSea, n(0, [], [], "").then(function(e) {
        s(e.data, !1), "blocked" === (null == (e = latestStatusObj) ? void 0 : e.status) ? ($("#sectionBody").addClass("d-none"), 
        $("#blockMessage").removeClass("d-none")) : ($("#sectionBody").removeClass("d-none"), 
        $("#blockMessage").addClass("d-none"));
    }).catch(function(e) {})), e();
}

function setPointsText(e, t, n) {
    $("#myModal").scrollTo($("#pointsSpan"), 1e3), setTimeout(function() {
        $("#pointsSpan").addClass("animated wobble"), setTimeout(function() {
            $("#pointsSpan").removeClass("animated wobble");
        }, 2e3), $("#pointsSpan").prop("number", e).animateNumber({
            number: t,
            easing: "easeInQuad"
        }, n);
    }, 1e3);
}

function getSectionsTextInSubUnit(e, t) {
    for (var n = e._id.$oid, s = null == (s = e.sectionsArr) ? [] : s, a = "", o = 0, i = 0, r = 0; r < s.length; r++) {
        var l, d = s[r], c = sectionsMap[d], u = [], p = (u.push(NOT_STARTED), []);
        p.push(0), null != c && (i++, l = getQuestionsTextInSection(c, n, e.subUnit, u, p), 
        a = a + '\t\t<li class="btn btn-sm' + (u[0] == COMPLETED ? " completed " : u[0] == STARTED ? " started " : " not-started ") + ' sections " subUnitId="' + n + '" section="' + d + '" title="' + c.description + "\"><span class='sectionHeading'>" + c.section + "<span class='btn btn-sm btn-info ss' style='padding:0px 4px; margin-left:10px;' onClick='openSubunitStatsDialog(\"" + n + '", "' + c.section.replace(/\'/g, "`") + '", "' + d + "\")' ><i class='glyphicon glyphicon-stats'></i></span></span>" + l + " </li>", 
        u[0] != COMPLETED && 0 != p[0] || o++);
    }
    return o == i && 0 < i ? t[0] = COMPLETED : 0 < o && 0 < i && (t[0] = STARTED), 
    a;
}

function getDummySectionTextInSubUnitForQuestions(e, t) {
    var n = e._id.$oid, s = (e.sectionsArr, 0), a = [], o = (a.push(NOT_STARTED), 
    []), e = (o.push(0), getQuestionsTextInSection({}, n, e.subUnit, a, o)), n = '\t\t<li class="btn btn-sm' + (a[0] == COMPLETED ? " completed " : a[0] == STARTED ? " started " : " not-started ") + ' sections " subUnitId="' + n + '" section="Do Not Know" title="Questions"><span class=\'sectionHeading\'>Questions</span>' + e + " </li>";
    return a[0] != COMPLETED && 0 != o[0] || s++, 1 == s ? t[0] = COMPLETED : 0 < s && (t[0] = STARTED), 
    n;
}

var demoText = '<i class="fa fa-eye" aria-hidden="true" style="position: absolute;margin-top: 16px;margin-left: 9px;font-size: smaller; font-weight: bold" title="This question has a Demo."></i>', notesText = '<i class="fa fa-info" aria-hidden="true" style="position: absolute;margin-top: -7px;margin-left:7px;font-size: smaller;" title="This question has Notes."></i>', labText = '<i class="fa fa-flask" aria-hidden="true" style="position: absolute;margin-top: 15px;margin-left: -23px;font-size: smaller;" title="This is lab question."></i>', codingText = '<i class="fa fa-terminal" aria-hidden="true" style="position: absolute;margin-top: -8px;margin-left: -22px;font-size: smaller; font-weight: bold" title="This question involves coding."></i>', memberNotesText = '<i class="fa fa-book" aria-hidden="true" style="position: absolute;margin-top: -7px; margin-left:2px;font-size: smaller;" title="This question has notes."></i>', bookMarkText = '<i class="fa fa-bookmark" aria-hidden="true" style="position: absolute;margin-top: -7px;margin-left:3px;font-size: smaller;" title="This question has book mark."></i>';

function getQuestionsTextInSection(e, t, n, s, a) {
    for (var o = '\t\t<div class="questionsArea">', i = [], r = "", l = (isQuestionBased ? i = subUnitIdQuestionsArrMap[t] : (r = e._id.$oid, 
    null == (i = allSectionQuestionPIdsMap[r]) && (i = [])), 0), d = 0, c = !1, u = 0; u < i.length; u++) {
        var p, h = "", m = "", b = "", g = "", f = "", S = "", C = "", v = (isQuestionBased ? (h = "" == i[u].extraInfo.parentId ? i[u].id : i[u].extraInfo.parentId, 
        i[u].extraInfo.hasOwnProperty("hasDemo") && i[u].extraInfo.hasDemo && (m = demoText), 
        i[u].extraInfo.hasOwnProperty("hasBookMark") && i[u].extraInfo.hasBookMark && (b = bookMarkText), 
        i[u].extraInfo.hasOwnProperty("hasMemberNotes") && i[u].extraInfo.hasMemberNotes ? b = memberNotesText : i[u].extraInfo.hasOwnProperty("hasNotes") && i[u].extraInfo.hasNotes && (b = notesText), 
        f = i[u].src, i[u].extraInfo.hasOwnProperty("questionType") && i[u].extraInfo.questionType && ("Compilation Errors" !== (C = questionTypesMap[i[u].extraInfo.questionType]).questionType && "Copy Writing" !== C.questionType || (S = codingText))) : (h = i[u]._id.$oid, 
        i[u].hasOwnProperty("hasDemo") && i[u].hasDemo && (m = demoText), i[u].hasOwnProperty("hasNotes") && i[u].hasNotes && (b = notesText), 
        i[u].hasOwnProperty("qType") && i[u].qType && ("Compilation Errors" !== (C = questionTypesMap[i[u].qType]).questionType && "Copy Writing" !== C.questionType || (S = codingText))), 
        qIdVsLabIdsArr.hasOwnProperty(h) && (g = labText), "notAnswered"), T = (NOT_STARTED, 
        " title='Will be enabled once the previous questions are completed.' "), I = "", y = .8, w = !1, k = !1;
        responsesMap.hasOwnProperty(h) ? (v = "1812" !== $(document).attr("cssBodyWidth") && responsesMap[h].hasOwnProperty("botScore") && .8 < responsesMap[h].botScore && "Information" !== C.questionType ? (y = responsesMap[h].botScore, 
        COMPLETED_BY_BOT, "answered-bot") : responsesMap[h].hasOwnProperty("answerReviewRequired") && responsesMap[h].answerReviewRequired ? (w = !0, 
        WAITING_FOR_REVIEW, "waitingForReview") : responsesMap[h].hasOwnProperty("submissionRejected") && responsesMap[h].submissionRejected ? (k = !0, 
        "btn-danger") : (COMPLETED, "answered"), I = learningStatus.completedQuestionsMap[h], 
        C = "", p = !1, isQuestionBased ? (C = i[u].extraInfo.questionNo, p = !0) : allCompletedQuestionsMap.hasOwnProperty(I) && (C = allCompletedQuestionsMap[I].questionNo, 
        p = !0), T = .8 < y ? " title = 'Suspicious activity detected. Click to open the question and submit.'" : p ? " title = 'Q.No : " + C + "'" : " title = 'This question is disabled.'", 
        d++) : partialParentQIdMap.hasOwnProperty(h) && (STARTED, v = "partiallyAnswered", 
        I = partialParentQIdMap[h].question, T = " title = 'Q.No : " + partialParentQIdMap[h].questionNo + "'", 
        c = !0), l++, .8 < y ? (T = " title = 'Suspicious activity detected. Click to open the question and submit.'", 
        I = h) : w ? (T = " title = 'Under teacher review.'", I = h) : k ? (T = " title = 'Rejected. Click to open the question and re-submit.'", 
        I = h) : isQuestionBased && (T = " title = 'Click to open the question'", 
        I = h), o = o + "\t\t<span " + T + " qCount='" + l + "'  subUnitId='" + t + "'  subUnitName=\"" + n + "\"  sectionId='" + r + "'  sectionName=\"" + e.section + '"  qid="' + I + '" pid="' + h + '" bd="' + f + '" class="questions ' + v + ' simpleBtn actionBtn fade " >' + m + l + g + b + S + "</span>", 
        a[0] = l;
    }
    return o += "\t\t</div>", d == i.length && 0 < i.length ? s[0] = COMPLETED : (c || 0 < d) && 0 < i.length && (s[0] = STARTED), 
    o;
}

var automaticSaveInterval, lastUpdatedTotalTimeSpent = 0, lastUpdatedContent = [];

function openQuestionDialog(e, s, t, n, a, o, i) {
    closeLaunchHelpIntro();
    var r = "", i = (void 0 !== i && "" != i && (r = encodeURIComponent(i)), null == a || "" == a ? "" : "&qid=" + a);
    return $("#modalBody").load("learn1.jsp?cid=" + cid + "&tid=" + tid + i + "&csuid=" + e + "&inMode=" + o + "&bd=" + encodeURIComponent(getBD()) + "&qbd=" + r, function(e, t, n) {
        n.getResponseHeader("X-SessionTimeout") ? (hideLearnDialog(), setTimeout(function() {
            openLoginDialog();
        }, 500)) : o === IN_LEARN_MODE && $("#quickQAccessTrapezoidSliderDiv").removeClass("d-none"), 
        $("#ct-button-bar").removeClass("d-none"), $("#modalTopicNameHeading").html(currentUnitName).attr("title", currentUnitName), 
        $("#modalSubUnitNameHeading").html(s).attr("title", s), clearInterval(automaticSaveInterval), 
        automaticSaveInterval = setInterval(function() {
            var e = getSelectedQuestionTypeText(), t = jQuery.extend(!0, {}, cq);
            _.isEqual(lastUpdatedContent, getUserContentToBeSaved()) ? savePartialResponse(t, !0, !1, !0) : (isMultipleChoiceType(e) ? t.userOptionsMap = getUserContentToBeSaved() : "Copy Writing" == e || "Compilation Errors" == e ? t.filesContentArrToBeSaved = getUserContentToBeSaved() : isEssay(e) ? t.essayAnswer = getUserContentToBeSaved() : isFillInTheBlankType(e) && (t.fillInTheBlank = getUserContentToBeSaved()), 
            savePartialResponse(t, !0, !1, !1));
        }, 45e3);
    }), $("#myModal").modal({
        backdrop: "static",
        keyboard: !1,
        show: !0
    }), $("#myModal").off("shown.bs.modal", handleLearnModalShown).on("shown.bs.modal", handleLearnModalShown).off("hidden.bs.modal", handleLearnModalClose).on("hidden.bs.modal", handleLearnModalClose), 
    !1;
}

function handleLearnModalShown() {
    $("body").addClass("modal-open");
}

function handleLearnModalClose() {
    $(".sectionsDiv .questions").css("pointer-events", "auto");
}

function openSubunitStatsDialog(e, t, n) {
    var s = getBD(), e = $("#subunitStatsDiv").html('<iframe id="subunitStatsIFrame" style="border: 0px; " src="/secure/subunit-charts.jsp?cid=' + cid + "&csuid=" + e + "&sid=" + n + "&bd=" + encodeURIComponent(s) + '" width="100%" height="100%"></iframe>').dialog({
        title: t,
        autoOpen: !1,
        dialogClass: "dialog_fixed, ui-widget-header",
        modal: !1,
        height: 500,
        minWidth: 600,
        minHeight: 400,
        draggable: !0,
        buttons: {
            Close: function() {
                $(this).dialog("close");
            }
        }
    });
    e.dialog("open"), e.closest(".ui-dialog").css("z-index", "1043");
}

function sectionCompleted(e, t) {
    hideLearnDialog(), setTimeout(function() {
        alertify.success("This is the last question in the section : " + subUnitMap[e].subUnit + ".", 6e3);
    }, 2e3);
}

function topicCompleted(e, t) {
    hideLearnDialog(), setTimeout(function() {
        alertify.success("This is the last question in the Sub Unit : " + subUnitMap[completedSectionId].subUnit + ". Click on the course name link to select the next topic.", 6e3);
    }, 2e3);
}

function markSubUnitCompleted(e, t) {
    $(".subUnit[subUnitId=" + e + "]").removeClass("bs-callout-warm").addClass("bs-callout-blue"), 
    $(".learnBtn[subUnitId=" + e + "]").removeClass("enabledSubUnitLearnBtn"), $(".learnBtn[subUnitId=" + e + "]").addClass("disabled"), 
    $(".learnBtn[subUnitId=" + e + "]").removeAttr("onClick"), $(".reviseBtn[subUnitId=" + e + "]").removeClass("disabled"), 
    $(".reviseBtn[subUnitId=" + e + "]").attr("onClick", 'openQuestionDialog("' + e + '", "' + subUnitMap[e].subUnit + '", "", "", "", ' + IN_REVISION_MODE + ")"), 
    $(".testBtn[subUnitId=" + e + "]").removeClass("disabled"), $(".testBtn[subUnitId=" + e + "]").attr("onClick", 'openQuestionDialog("' + e + '", "' + subUnitMap[e].subUnit + '", "", "", "", ' + IN_SELF_TEST_MODE + ")"), 
    null != t && ($(".subUnit[subUnitId=" + t + "]").removeClass("bs-callout-gray").addClass("bs-callout-warm"), 
    $(".learnBtn[subUnitId=" + t + "]").removeClass("d-none"), $(".learnBtn[subUnitId=" + t + "]").addClass("enabledSubUnitLearnBtn"), 
    $(".learnBtn[subUnitId=" + t + "]").attr("onClick", 'openQuestionDialog("' + t + '", "' + subUnitMap[t].subUnit + '", "", "", "", ' + IN_LEARN_MODE + ")"), 
    $(".reviseBtn[subUnitId=" + t + "]").removeClass("d-none"), $(".testBtn[subUnitId=" + t + "]").removeClass("d-none"));
}

function markNextSectionAsStarted(e, t) {
    $(".sections[section=" + e + "]").removeClass("not-started").removeClass("started").addClass("completed"), 
    null != t && $(".sections[section=" + t + "]").removeClass("not-started").addClass("started");
}

function markQuestionsStatusInSameSection(e, t, n, s, a) {
    var o = $(".questions[qid=" + e + "][subUnitId=" + n + "]");
    setQuestionBtnAttributes(o = 0 == o.length ? $(".questions[qCount=1][subUnitId=" + n + "]") : o, e, t, .8 < s ? "answered-bot" : a ? "waitingForReview" : "answered");
}

function markQuestionsStatusInDiffSectionsInSameSubUnit(e, t, n, s, a, o, i, r) {
    markNextSectionAsStarted(a, o);
    var l, d = 1;
    isQuestionBased ? 0 == (l = $(".questions[qid=" + e + "][subUnitId=" + a + "]")).length ? l = $(".questions[qCount=" + d + "][subUnitId=" + a + "]") : d = $(l).attr("qCount") : 0 == (l = $(".questions[qid=" + e + "][sectionId=" + a + "]")).length ? l = $(".questions[qCount=" + d + "][sectionId=" + a + "]") : d = $(l).attr("qCount"), 
    null != n && setQuestionBtnAttributes(getNextQuestionForPartiallyAnswered(d = 0, o), n, s, "partiallyAnswered"), 
    setQuestionBtnAttributes(l, e, t, .8 < i ? "answered-bot" : r ? "waitingForReview" : "answered");
}

function getNextQuestionForPartiallyAnswered(e, t) {
    var n, e = parseInt(e) + 1;
    return n = isQuestionBased ? $(".questions[qCount=" + e + "][subUnitId=" + t + "]") : $(".questions[qCount=" + e + "][sectionId=" + t + "]"), 
    $(n).hasClass("partiallyAnswered") || $(n).hasClass("notAnswered") ? n : getNextQuestionForPartiallyAnswered(e, t);
}

function setQuestionBtnAttributes(e, t, n, s) {
    null != t && $(e).attr("qid", t), null != n && $(e).attr("title", "Q.No : " + n), 
    "answered-bot" === s ? ($(e).removeClass("waitingForReview partiallyAnswered notAnswered answered").addClass("answered-bot"), 
    $(e).attr("title", "Suspicious activity detected. Click to open the question and submit.")) : "answered" == s ? $(e).removeClass("waitingForReview partiallyAnswered notAnswered answered-bot").addClass("answered") : "partiallyAnswered" == s ? $(e).removeClass("answered waitingForReview notAnswered answered-bot").addClass("partiallyAnswered") : "waitingForReview" == s ? ($(e).removeClass("answered partiallyAnswered notAnswered answered-bot ").addClass("waitingForReview"), 
    $(e).attr("title", "Under teacher review")) : $(e).removeClass("answered waitingForReview partiallyAnswered answered-bot").addClass("notAnswered");
}

function markQuestionAsPartiallySaved() {
    var e = cq._id.$oid, t = "" == cq.parentId ? e : cq.parentId, t = $(".questions[pid=" + t + "]");
    t.hasClass("notAnswered") && setQuestionBtnAttributes(t, e, cq.questionNo, "partiallyAnswered");
}

function reloadPage() {
    backendDataChanged && _ctReloadPage();
}

function markBackendDataChanged() {
    backendDataChanged = !0;
}

function hideProcessingAnimation() {
    $("#loadingSpan").addClass("d-none");
}

function onJavaLoadComplete() {
    $(".actionBtn").addClass("show");
}

function showLoadingModal() {
    startSpinner(), $("#loadingModal").modal({
        backdrop: "static",
        keyboard: !1,
        show: !0
    });
}

function hideLoadingModal() {
    stopSpinner(), $("#loadingModal").modal("hide");
    var e = sessionStorage.getItem("td-intro");
    (null === e || "shown" !== e) && loginCount < 1 && setTimeout(function() {
        launchHelp(), sessionStorage.setItem("td-intro", "shown");
    }, 2e3);
}

function startSpinner() {
    preloader.active(!0);
}

function stopSpinner() {
    preloader.active(!1), setTimeout(function() {
        lockedQObj && isCurrentRoleMember ? $("[qid='" + lockedQObj.qid + "']").click() : alreadyVisitedQuestionId && $(".questions[qid='" + alreadyVisitedQuestionId + "']").click();
    }, 500);
}

function resetConsole() {
    l("Calling resetConsole() ...");
}

function initConsoleCmdQuestionEnv(e, t) {
    for (var n in l(e), e) {
        var s = substituteConsoleCmdGlobalVars(e[n].cmd, t);
        consoleTermSoc.emit("data", s), e[n].show;
    }
}

function updateStatusOfAllProcs(e) {
    e = e.split(" ");
    $("#dataNodeSpan").is(":visible") && ($("#dataNodeSpan").addClass(0 == e[1] ? "hProcIsNotRunning" : "hProcIsRunning"), 
    $("#dataNodeSpan").removeClass(0 == e[1] ? "hProcIsRunning" : "hProcIsNotRunning"), 
    $("#nameNodeSpan").addClass(0 == e[2] ? "hProcIsNotRunning" : "hProcIsRunning"), 
    $("#nameNodeSpan").removeClass(0 == e[2] ? "hProcIsRunning" : "hProcIsNotRunning"), 
    $("#secondaryNameNodeSpan").addClass(0 == e[3] ? "hProcIsNotRunning" : "hProcIsRunning"), 
    $("#secondaryNameNodeSpan").removeClass(0 == e[3] ? "hProcIsRunning" : "hProcIsNotRunning"), 
    $("#nodeManagerSpan").addClass(0 == e[4] ? "hProcIsNotRunning" : "hProcIsRunning"), 
    $("#nodeManagerSpan").removeClass(0 == e[4] ? "hProcIsRunning" : "hProcIsNotRunning"), 
    $("#resourceManagerSpan").addClass(0 == e[5] ? "hProcIsNotRunning" : "hProcIsRunning"), 
    $("#resourceManagerSpan").removeClass(0 == e[5] ? "hProcIsRunning" : "hProcIsNotRunning")), 
    $("#dataNodeSpan").hasClass("hProcIsRunning") && $("#nameNodeSpan").hasClass("hProcIsRunning") && $("#secondaryNameNodeSpan").hasClass("hProcIsRunning") && $("#startPopoverTextContent").is(":visible") && $("#startDfsBtn").popover("destroy"), 
    $("#nodeManagerSpan").hasClass("hProcIsRunning") && $("#resourceManagerSpan").hasClass("hProcIsRunning") && $("#startPopoverTextContent").is(":visible") && $("#startYarnBtn").popover("destroy");
}

function aFailure() {
    l("The CT Node may not be running...");
}

function showEmbeddedConsole() {
    $("#consoleDiv").appendTo($("#targetConsoleDiv")), initializeConsole(function() {
        l("XX in showEmbeddedConsole() appendTo called..."), currentConsoleCmdIndex = 0;
        var e = JSON.parse(cq.content), e = (initConsoleCmdQuestionEnv(e.envInitCmdArr, e.globalVar), 
        e.cmdArr);
        $("#consoleFeedbackDiv").removeClass("error").removeClass("success"), $("#questionText").html(e[currentConsoleCmdIndex].instruction), 
        $("#questionText").removeClass("animated zoomIn"), $("#questionText").addClass("animated zoomIn");
    });
}

function typedOnTerm(e) {
    var t, n;
    "" === e ? (hideResultsTabsAndDivs(), disconnectTerm()) : $("#consoleQNextBtn").is(":visible") ? $("#consoleQNextBtn").effect("highlight", 200) : isConsoleOnlyQuestion(cq) && "\r" == e ? getLatestUserTypedCommandText() == (t = JSON.parse(cq.content).cmdArr)[currentConsoleCmdIndex].cmd ? (consoleTermSoc.emit("data", e), 
    n = "<strong>Correct!</strong> Click on Next to proceed.", t[currentConsoleCmdIndex].hasOwnProperty("successMessage") && (n = t[currentConsoleCmdIndex].successMessage), 
    $("#consoleQTextFeedback").html(n), $("#consoleFeedbackDiv").removeClass("error").addClass("success"), 
    $("#consoleFeedbackDiv").removeClass("animated shake pulse").addClass("animated pulse"), 
    initializeNextSubCmdInSameConsoleQuestion(t)) : (l("Please check the command you have typed...."), 
    $("#consoleQNextBtn").addClass("d-none"), n = "<strong>Error!</strong> Please verify if you have typed : <span class='consoleCmdError'>" + t[currentConsoleCmdIndex].cmd + "</span>", 
    t[currentConsoleCmdIndex].hasOwnProperty("errorMessage") && (n = t[currentConsoleCmdIndex].errorMessage), 
    $("#consoleQTextFeedback").html(n), $("#consoleFeedbackDiv").removeClass("success").addClass("error"), 
    $("#consoleFeedbackDiv").removeClass("animated shake pulse").addClass("animated shake"), 
    consoleTermSoc.emit("data", e)) : consoleTermSoc.emit("data", e);
}

function initializeNextSubCmdInSameConsoleQuestion(e) {
    initializeNextExecutableSubCmdIndex(e), -1 == currentConsoleCmdIndex ? (verifyTestCasesAndSubmit(), 
    l("Calling app to fetch next Q.."), $("#consoleQNextBtn").addClass("d-none")) : $("#consoleQNextBtn").removeClass("d-none");
}

function initializeNextExecutableSubCmdIndex(e) {
    if (++currentConsoleCmdIndex == e.length) currentConsoleCmdIndex = -1; else {
        for (;e[currentConsoleCmdIndex].hasOwnProperty("setup-cmd"); ) consoleTermSoc.emit(e[currentConsoleCmdIndex]["setup-cmd"]), 
        currentConsoleCmdIndex++;
        currentConsoleCmdIndex == e.length ? currentConsoleCmdIndex = -1 : e[currentConsoleCmdIndex].hasOwnProperty("cmd") || (currentConsoleCmdIndex = -1, 
        l("FATAL ERROR! Could not find next executable sub-cmd, this should not have occurred. Please verify qId : " + cq.qId));
    }
}

function consoleQNextBtnClicked() {
    l("consoleQNextBtnClicked ....");
    var e = JSON.parse(cq.content).cmdArr;
    $("#questionText").html(e[currentConsoleCmdIndex].instruction), $("#questionText").addClass("animated pulse"), 
    $("#consoleQNextBtn").addClass("d-none"), $("#consoleFeedbackDiv").removeClass("success"), 
    $(".terminal").focus();
}

var inGruntShell = !1, inHiveShell = !1;

function getLatestUserTypedCommandText() {
    for (var e = $("#consoleDiv > .terminal").children(), t = "", n = e.length - 1; 0 <= n; n--) {
        var s = $(e[n]).text().trim().replace(/\s+/g, " ");
        if (0 != s.length) {
            var a = s.indexOf("$"), o = s.indexOf(">");
            if (-1 == o || -1 != a && a < o) {
                if (0 < a) {
                    t = s.substring(a + 1).trim();
                    break;
                }
            } else {
                var a = s.startsWith(">> "), i = s.startsWith("> ");
                if (5 == o && s.startsWith("grunt> ")) {
                    t = s.substring(o + 1).trim(), inGruntShell = !0;
                    break;
                }
                if (a) {
                    if (inGruntShell) {
                        t = s.substring(o + 2).trim();
                        break;
                    }
                } else {
                    if (4 == o && s.startsWith("hive> ")) {
                        t = s.substring(o + 1).trim(), inHiveShell = !0;
                        break;
                    }
                    if (i && inHiveShell) {
                        t = s.substring(o + 1).trim();
                        break;
                    }
                }
            }
        }
    }
    return t;
}

function hideLearnDialog() {
    $("#ct-button-bar").addClass("d-none"), $("#myModal").modal("hide"), _crd_socket_for_learn && _crd_socket_for_learn.disconnect();
}

function learnDialogClosing() {
    hideLearnDialog(), 1 == $("#consoleDiv").length && $("#consoleDiv").appendTo($("#consoleContainerDivHidden"));
}

function ctQss(e, t) {
    var n;
    alertify.success("Successfully submitted the question.", 2), l(t), l("pointsAwarded = " + e), 
    0 != parseInt(e) && (t = JSON.parse(t), n = 0, t.hasOwnProperty("earnedBySelf") && (n = t.earnedBySelf), 
    t.hasOwnProperty("earnedFromReferrals") && (n += t.earnedFromReferrals), t.hasOwnProperty("awardedBySystem") && (n += t.awardedBySystem), 
    $("#pointStar").css("top", $(document).scrollTop() + (screen.height - 240) / 2 + "px"), 
    $("#pointStar").css("left", $(document).scrollLeft() + (screen.width - 240) / 2 + "px"), 
    $("#pointStar").text(e), $("#pointStar").removeClass("d-none fadeOutRightBig").addClass("animated fadeInRightBig"), 
    setTimeout(function() {
        $("#pointStar").removeClass("d-none fadeInRightBig").addClass("fadeOutRightBig");
    }, 2e3), setTimeout(function() {
        $("#pointStar").removeClass("fadeInRightBig fadeOutRightBig animated").addClass("d-none");
    }, 2500), setTimeout(function() {
        n > existingPoints && (setPointsText(existingPoints, n, 2500), existingPoints = n);
    }, 2e3));
}

function checkIoTExtension() {
    var e;
    "IoT" == currentCourseName ? ((e = chrome.runtime.connect("imkinnacahoaifigpkfojfjakojemnec")).postMessage({
        action: "connectionCheck"
    }), e.onMessage.addListener(function(e) {
        window.isExtensionEnabled = !0, $("#isExtensionEnabled").val("true");
    }), e.onDisconnect.addListener(function(e) {
        $("#isExtensionEnabled").val("false"), $("#homeCenterDiv .panel-title").append('<button id="extensionBtn" class="btn btn-sm btn-danger" onclick="!!navigator.webkitGetUserMedia && !!window.chrome && !!chrome.webstore && !!chrome.webstore.install && chrome.webstore.install(\'https://chrome.google.com/webstore/detail/bhofnjdebaipfkmlnngediiglinbkiec\', function() {location.reload();})" id="install-button" style="float: right;color: white;font-weight: bold;" id="install-button">Add IoT app to Chrome</button>');
    })) : 0 < $("#extensionBtn").length && $("#extensionBtn").remove();
}

function copyTitle() {
    var e = $("#questionTitleOL").text().split("\n"), t = "";
    e.forEach(function(e) {
        0 < (e = e.trim()).length && (t += e + " / ");
    }), 0 < t.length && (t = t.substring(0, t.length - 3)), $("#htf").val(t), $("#htf").select(), 
    document.execCommand("copy");
}

function selectAllGroupsForLock() {
    $("#selectAll").hasClass("btn-info") ? ($("#lockableGroups > option").prop("selected", "selected"), 
    $("#lockableGroups").trigger("change"), $("#selectAll").removeClass("btn-info").addClass("btn-warning").attr("title", "Unselect All Groups"), 
    $("#selectAllLabel").text("Unselect All Groups"), $("#selectAll").find("i").removeClass("fa-check-square-o").addClass("fa-times")) : ($("#lockableGroups").val(null).trigger("change"), 
    $("#selectAll").removeClass("btn-warning").addClass("btn-info").attr("title", "Select All Groups"), 
    $("#selectAllLabel").text("Select All Groups"), $("#selectAll").find("i").removeClass("fa-times").addClass("fa-check-square-o"));
}

function showVisualizeModal() {
    var e, t = {
        C: "c",
        "C++": "cpp",
        Python: "3",
        Java: "java",
        Ruby: "ruby",
        "JavaScript ES2015": "js",
        TypeScript: "ts"
    }[getCurrentLanguage()];
    void 0 !== t ? (e = getFileContentForVisualization(), e = "https://pythontutor.com/iframe-embed.html#code=" + encodeURIComponent(e[0].fileContent) + "&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=0&heapPrimitives=nevernest&origin=opt-frontend.js&py=" + t + "&rawInputLstJSON=%5B%5D&textReferences=false", 
    $("#visualizeModalLoadingSpan").show(), l("hideVisualizeModalLoadingSpan show called..."), 
    $("#visualizeModal iframe").attr("src", e), $("#visualizeModal").modal({
        show: !0,
        keyboard: !0,
        backdrop: !1
    })) : alertify_log("Unsupported programming language for Live Execution", error, 6e3);
}

function hideVisualizeModalLoadingSpan() {
    $("#visualizeModalLoadingSpan").hide();
}

function closeVisualizeModal() {
    $("#visualizeModal iframe").attr("src", ""), $("#visualizeModal").modal("hide"), 
    $("#visualizeModal").off("hidden.bs.modal"), $("#visualizeModal").on("hidden.bs.modal", function() {
        $("body").addClass("modal-open");
    });
}

function intitProgressTable() {
    google.charts.load("current", {
        packages: [ "bar", "corechart" ]
    });
}

function openNav() {
    $("#mySidenav").css("width", "310px"), $("#sideArrow").css("right", "310px"), 
    $("#sideArrow").attr("onClick", "closeNav()");
}

function closeNav() {
    $("#mySidenav").css("width", "0"), $("#sideArrow").css("right", "0"), $("#sideArrow").attr("onClick", "openNav()");
}

function launchUIChangesHelp() {
    Swal.fire({
        html: "<iframe src='https://www.youtube.com/embed/q3g0hpE-8aM' allowfullscreen=allowfullscreen width='100%' height='315' id='videoHelpLink'></iframe>",
        className: "helpContainer",
        closeOnEsc: !1,
        width: 800,
        height: "auto",
        closeOnClickOutside: !1
    });
}
//# sourceMappingURL=td1.min.js.map