var stCommandsMap = {
    start: "St_start",
    show: "St_show",
    "show answer": "St_show",
    "show answers": "St_show",
    reveal: "St_show",
    "reveal answer": "St_show",
    "reveal answers": "St_show",
    next: "St_next",
    close: "St_close",
    submit: "St_submit",
    finish: "St_finish",
    previous: "St_previous"
};

function isSpeechEnabled() {
    return window.SpeechRecognition || window.webkitSpeechRecognition;
}

function getNewSpeechSynthesisUtterance(e, t, s, n, r, a) {
    e = new SpeechSynthesisUtterance(e);
    return e.lang = "en", void 0 !== t && (e.lang = t), void 0 !== s && (e.rate = s), 
    void 0 !== n && (e.volume = n), void 0 !== r && (e.pitch = r), void 0 !== a && (e.voiceURI = a), 
    e;
}

function readingTextStarted(e, t) {
    l("in readingTextStarted..." + e + ", " + t), $("#listenButton").removeClass("disabled"), 
    $("#errorsListenBtn").removeClass("disabled"), ("errorsListenBtn" === e ? ($("#listenButton").removeClass("btn-primary").addClass("btn-default"), 
    $("#listenButton")) : ($("#errorsListenBtn").removeClass("btn-info").addClass("btn-default"), 
    $("#errorsListenBtn"))).addClass("disabled"), $("#" + e).removeClass("btn-primary btn-info").addClass("btn-danger"), 
    $("#" + t).removeClass("fa-bullhorn").addClass("fa-stop-circle-o"), $("#" + t).attr("title", "Click to Stop."), 
    $("#recordButton").removeClass("btn-warning").addClass("btn-default"), $("#recordButton").addClass("disabled");
}

function readingOutEnded(e, t) {
    l("in readingOutEnded..." + e + ", " + t), $("#listenButton").removeClass("disabled").removeClass("btn-danger btn-default").addClass("btn-primary"), 
    $("#errorsListenBtn").removeClass("disabled").removeClass("btn-danger btn-default").addClass("btn-info"), 
    $("#recordButton").addClass("btn-warning").removeClass("btn-default"), $("#recordButton").removeClass("disabled"), 
    $("#speakerIconId").removeClass("fa-stop-circle-o").addClass("fa-bullhorn"), 
    $("#errorsSpeakerIconId").removeClass("fa-stop-circle-o").addClass("fa-bullhorn"), 
    $("#speakerIconId").attr("title", "Click to listen to the text."), $("#errorsSpeakerIconId").attr("title", "Click to listen the correct answers."), 
    latestUtterancesArr = [], isHandsFreeOn && performNextStep();
}

function readOutErrors() {
    var e = $("#speechOutputText").data("latestErrors"), s = [];
    s.push("The correct answer" + (1 < e.length ? "s are" : " is")), $.each(e, function(e, t) {
        s.push(t.originalAns), l("error.originalAns ==> " + t.originalAns + "<==");
    }), isHandsFreeOn && (s.push("\n"), s.push("Now, Say the Answer")), currentUserStep = STEP_READING_OUT_ERRORS_DONE, 
    readOutTextProxy("errorsListenBtn", "errorsSpeakerIconId", s);
}

var chunkLength = 120, pattRegex = new RegExp("^[\\s\\S]{" + Math.floor(chunkLength / 2) + "," + chunkLength + "}[.!?,]{1}|^[\\s\\S]{1," + chunkLength + "}$|^[\\s\\S]{1," + chunkLength + "} "), latestUtterancesArr = [];

function readOutText(e) {
    var s = $("#questionText").text().trim().split("\n");
    1 === s.length && s.push("\n"), e && $.each(e, function(e, t) {
        s.push(t);
    }), currentUserStep = STEP_READING_QUESTION_DONE, readOutTextProxy("listenButton", "speakerIconId", s);
}

function readOutTextProxy(a, o, i) {
    isSpeechEnabled() ? $("#" + a).hasClass("disabled") || ($("#" + o).hasClass("fa-stop-circle-o") ? ($.each(latestUtterancesArr, function(e, t) {
        window.speechSynthesis.cancel(t), window.speechSynthesis.cancel();
    }), readingOutEnded(a, o)) : $("#" + o).hasClass("fa-play-circle") || (window.speechSynthesis.cancel(), 
    $.each(i, function(n, e) {
        for (var r = []; 0 < e.length; ) r.push(e.match(pattRegex)[0]), e = e.substring(r[r.length - 1].length);
        latestUtterancesArr = [], l("chunksArr :: " + JSON.stringify(r)), $.each(r, function(e, t) {
            var s = getNewSpeechSynthesisUtterance(t = t.trim(), "en-GB", .8, 1, .7, "native");
            0 === n && 0 === e ? s.onstart = function() {
                readingTextStarted(a, o);
            } : n === i.length - 1 && e === r.length - 1 && (s.onend = function() {
                readingOutEnded(a, o);
            }), latestUtterancesArr.push(s), setTimeout(function() {
                window.speechSynthesis.speak(s);
            }, 0);
        });
    }))) : alertify.error("Speech is not enabled in the current browser. Please use Chrome browser.", 10);
}

var recognizer = null, defaultSpeechOutputText = "", spokenLanguageIncorrectAnsCount = 0;

function initSpokenLanguageDiv(e) {
    $("#handsFreeSwitchSpan").css("display", "block"), currentUserStep = STEP_ABOUT_TO_START;
    e.hasOwnProperty("mcOptionsArr") && e.mcOptionsArr, spokenLanguageIncorrectAnsCount = 0;
    $("#mcContainerDiv").html('<div class="col-12 text-center"><span class="speechIconInfo" >Click on the <i class="fa fa-bullhorn fa-2x text-primary"></i> button to listen.</span><i class="btn btn-primary btn-sm" id="listenButton"  style="padding:5px 20px;" onclick="readOutText()"><i title="Click to listen to the text." id="speakerIconId" class="fa fa-bullhorn fa-2x"></i></i><a class="btn btn-warning btn-sm" id="recordButton" style="margin:20px;" ><i style="padding:2px 15px;" id="micIconId" class="fa fa-microphone fa-2x"></i></a><span class="speechIconInfo" >Press and hold the <i class="fa fa-microphone fa-2x text-warning "></i> button while speaking.</span> </div><div class="col-12 "  style="border: 2px dashed lightgray; border-radius: 11px; background-color: #f3f3f3; padding: 10px;min-height: 110px;" id="speechOutputText"><div id="speechStatus"> <span>&nbsp;</span> </div><div id="spokenText"> </div><div id="speechErrorInfo"> <span>&nbsp;</span></div></div>');
    var t, s = !1, e = (e.hasOwnProperty("solutionHasChanged") ? (t = '<span class="fa-stack"><i class="fa fa-exclamation-triangle fa-stack-1x text-warning "></i><i class="fa fa-circle-o fa-stack-2x text-warning "></i></span> Question has been updated in the backend. Please provide the answer again.', 
    $("#spokenText").append(t)) : 4 === getCTMode() ? (n = "", responsesMap.hasOwnProperty(e._id.$oid) ? responsesMap[e._id.$oid].hasOwnProperty("solution") && ("" !== (n = responsesMap[e._id.$oid].solution.text).trim() ? setUserAnswerAsAlertText(n) : $("#speechStatus").html(defaultSpeechOutputText)) : $("#speechStatus").html(defaultSpeechOutputText), 
    s = !0, $("#speechOutputText").attr("newAnswer", n)) : e.hasOwnProperty("solution") ? (setUserAnswerAsAlertText((n = e.solution).text), 
    t = "&nbsp;&nbsp;&nbsp;&nbsp;", t += '<span class="fa-stack"><i class="fa fa-check fa-stack-1x  text-success "></i><i class="fa fa-circle-o fa-stack-2x text-success "></i></span> Correct Answer.', 
    $("#spokenText").append(t), s = !0, $("#speechOutputText").attr("newAnswer", n.text), 
    $("#userAnswerAlertSpan").removeClass("alert-warning").addClass("alert-success")) : (t = defaultSpeechOutputText, 
    $("#speechStatus").append(t)), $("#speechOutputText").attr("isAnswered", s), 
    $("#speechOutputText").attr("startedSpeaking", !1), s || $("#speechOutputText").attr("hasNewAnswer", !1), 
    "mousedown"), n = "mouseup";
    !0 === Modernizr.touch && (e = "touchstart", n = "touchend"), (recognizer = new webkitSpeechRecognition()).continuous = !0, 
    recognizer.interimResults = !1, recognizer.maxAlternatives = 1, $("#micIconId").bind(e, function() {
        startRecording(recognizer);
    }), $("#micIconId").bind(n, function() {
        stopRecording(recognizer, !0);
    }), $("#micIconId").bind("mouseout touchmove", function() {
        "true" === $("#speechOutputText").attr("startedSpeaking") && stopRecording(recognizer, !0);
    }), recognizer.onresult = function(e) {
        var s, n = "";
        void 0 === e.results ? (recognizer.onend = null, recognizer.stop()) : (s = {}, 
        $.each(e.results, function(e, t) {
            if (l("result[0].transcript == >" + t[0].transcript + "<"), t.isFinal) {
                t = t[0].transcript;
                if (s = getSTCommand(t), l(JSON.stringify(s)), s.isCommand) return n += " " + s.preText, 
                !1;
                n += " " + t;
            }
        }), !isListeningToAnswer && isHandsFreeOn || s.isCommand && "show" === s.command || 0 === n.trim().length || (setUserAnswerAsAlertText(n = n.trim()), 
        $("#speechOutputText").attr("hasNewAnswer", "" + (0 < n.length)), $("#speechOutputText").attr("newAnswer", n)), 
        s.isCommand && window[s.command]());
    }, recognizer.onerror = function(e) {
        "no-speech" === e.error && showInfo('No speech was detected. You may need to adjust your <a target=blank href="//support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1407892"> microphone settings</a>'), 
        "audio-capture" === e.error && showInfo('No microphone was found. Ensure that a microphone is installed and that <a href="//support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1407892"> microphone settings</a> are configured correctly.'), 
        "not-allowed" === e.error && (e.timeStamp - start_timestamp < 100 ? showInfo("Permission to use microphone is blocked. To change, go to chrome://settings/contentExceptions#media-stream") : showInfo("Permission to use microphone was denied."));
    };
}

function getSTCommand(n) {
    var r = {
        isCommand: !1
    };
    return $.each(Object.keys(stCommandsMap), function(e, t) {
        var s;
        if (n.toUpperCase().trim().endsWith(t.toUpperCase())) return r.isCommand = !0, 
        s = n.toUpperCase().lastIndexOf(t.toUpperCase()), r.preText = n.substring(0, s), 
        r.command = stCommandsMap[t], !1;
    }), r;
}

function registerCloseOnUserAnswerAlert() {
    $("#userAnswerAlertSpan").on("closed.bs.alert", function() {
        clearErrorResults();
    });
}

function clearErrorResults() {
    $("#speechOutputText").attr("isAnswered", !1), $("#speechOutputText").attr("startedSpeaking", !1), 
    $("#speechOutputText").attr("hasNewAnswer", !1), $("#speechOutputText").attr("newAnswer", ""), 
    $("#speechStatus").html("<span>&nbsp;</span>"), $("#spokenText").html("<b> Your Answer:</b> "), 
    $("#speechErrorInfo").html("<span>&nbsp;</span>");
}

function showCorrectAnswers() {
    $("#correctAnswersDiv").show();
}

function setUserAnswerAsAlertText(e, t) {
    $("#speechStatus").html("<span>&nbsp;</span>"), $("#spokenText").html(getUserAnswerAlertText(e, t)), 
    void 0 === t && registerCloseOnUserAnswerAlert(), setTimeout(function() {
        $("#userAnswerAlertSpan").addClass("show");
    }, 200);
}

function getUserAnswerAlertText(e, t) {
    var s = "", n = "";
    return void 0 === t && (s = "alert-dismissible", n = '<button type="button" class="close p-0" data-dismiss="alert" aria-label="Close">\n    <span aria-hidden="true">&times;</span>\n  </button>'), 
    '<b> Your Answer:</b> &nbsp;&nbsp;<div id="userAnswerAlertSpan" style="display: table;" class="alert fade alert-warning ' + s + '" role="alert"><p id="userAnswer" onpaste="return false">' + e + "</p>" + n + "</div>";
}

var recorded = !1;

function startRecording(e) {
    recorded = !0, "true" != $("#speechOutputText").attr("startedSpeaking") && ($("#speechOutputText").attr("isAnswered", "false"), 
    $("#speechOutputText").attr("startedSpeaking", "true"), e.lang = "en-IN", e.start(), 
    recordedTextBuff = "", $("#micIconId").addClass("animated faa-pulse faa-fast"), 
    $("#speechStatus").html('<span class="fa-stack fa-lg">\t<i class="fa faa-burst text-danger fa-circle-o faa-fast animated fa-stack-2x"></i>\t<i class="fa fa-microphone text-danger fa-stack-1x"></i></span> Started listening...'), 
    currentUserStep = STEP_ANSWERING_QUESTION);
}

function stopRecording(e, t) {
    t && ($("#speechStatus").html('<span class="fade" id="noInputSpan"><span class="fa-stack fa-lg">\t<i style="color:#e78b07;" class="fa fa-circle-o fa-stack-2x"></i>\t<i style="color:#e78b07;" class="fa fa-exclamation fa-stack-1x"></i></span> Did not understand. Please speak again.</span>'), 
    setTimeout(function() {
        $("#noInputSpan").addClass("show");
    }, 300)), $("#speechOutputText").attr("hasNewAnswer", !1), $("#speechOutputText").attr("startedSpeaking", !1), 
    e.stop(), $("#micIconId").removeClass("animated faa-pulse faa-fast"), currentUserStep = STEP_ANSWERING_QUESTION_STOPPED;
}

function restartRecording() {
    $("#speechOutputText").attr("startedSpeaking", !1), recognizer.stop(), setTimeout(function() {
        startRecording(recognizer);
    }, 500);
}

function showInfo(e) {
    $("#speechStatus").html('<span class="fade" id="noInputSpan"><span class="fa-stack fa-lg">\t<i style="color:#e78b07;" class="fa fa-circle-o fa-stack-2x"></i>\t<i style="color:#e78b07;" class="fa fa-exclamation fa-stack-1x"></i></span> &nbsp;&nbsp;' + e + "</span>"), 
    setTimeout(function() {
        $("#noInputSpan").addClass("show");
    }, 300);
}

function showSpokenLanguageResults(e) {
    var t = !0, s = $("#speechOutputText");
    if (0 < e.length && recorded) {
        $("#userAnswerAlertSpan").removeClass("alert-warning").addClass("alert-danger");
        var n = "&nbsp;&nbsp;&nbsp;&nbsp;";
        n = (n += ' <span class="fa-stack"><i class="fa fa-times fa-stack-1x  text-danger "></i><i class="fa fa-circle-o fa-stack-2x text-danger "></i></span>') + " <span class='text-danger'> Incorrect!</span> &nbsp;&nbsp;" + " <span class='btn btn-info tryAgainBtn btn-sm' onClick='clearErrorResults()'>Try Again</span> &nbsp;&nbsp;", 
        1 < spokenLanguageIncorrectAnsCount && (n += " <span class='btn btn-warning showAnswerBtn btn-sm' onClick='showCorrectAnswers()'>Show Answer</span>"), 
        $("#spokenText").append(n), n = (n = "") + "<div id='correctAnswersDiv' style='display: none;margin-top:5px;' > The correct options are : <a id='errorsListenBtn' class='btn btn-sm btn-info'><i id='errorsSpeakerIconId' class='fa fa-bullhorn fa-1x'></i></a>" + "<ol>";
        for (var r = 0; r < e.length; r++) n += "<li>" + e[r].originalAns + "</li>";
        n = n + "</ol>" + "</div>", $("#speechErrorInfo").html(n), t = !1, s.data("latestErrors", e), 
        s.attr("hasNewAnswer", !1), $("#errorsListenBtn").on("click", function() {
            readOutErrors();
        }), spokenLanguageIncorrectAnsCount++;
    } else 0 < e.length && (t = !1);
    return recorded = !1, t ? (setUserAnswerAsAlertText(s.attr("newAnswer"), !0), 
    n = "&nbsp;&nbsp;&nbsp;&nbsp;", n += '<span class="fa-stack"><i class="fa fa-check fa-stack-1x  text-success "></i><i class="fa fa-circle-o fa-stack-2x text-success "></i></span> Correct Answer.', 
    $("#spokenText").append(n), $("#userAnswerAlertSpan").removeClass("alert-warning").addClass("alert-success")) : (alertify.error("Incorrect, please verify if all correct answers are spoken and try again!", "6"), 
    1 < spokenLanguageIncorrectAnsCount && ($("#userAnswerAlertSpan").attr("title", "Click on the text to edit your answer"), 
    alertify.warning("Click on the text to edit your answer", "6"), $("#userAnswer").attr("contentEditable", !0)), 
    $(".submitBtn").removeClass("disabled"), didNotPassAllTestCases()), spokenLanguageResultsDisplayed(t, spokenLanguageIncorrectAnsCount), 
    t;
}

var isHandsFreeOn = !1, STEP_ABOUT_TO_START = 0, STEP_READING_QUESTION = 1, STEP_READING_QUESTION_DONE = 2, STEP_ANSWERING_QUESTION = 3, STEP_ANSWERING_QUESTION_STOPPED = 6, STEP_SUBMITTED_WITH_SUCCESS = 4, STEP_SUBMITTED_WITH_ERROR = 5, STEP_READING_OUT_ERRORS_DONE = 7, currentUserStep = 0, isListeningToAnswer = !1;

function toggleHandsFreeMode(e) {
    ((isHandsFreeOn = e) ? performNextStep : stopHandsFreeMode)();
}

function performNextStep() {
    l("currentUserStep : " + currentUserStep + ", isListeningToAnswer : " + isListeningToAnswer + ", isHandsFreeOn : " + isHandsFreeOn), 
    currentUserStep === STEP_ABOUT_TO_START ? ($("#spokenText").html("<b> Your Answer:</b> "), 
    $("#speechErrorInfo").html("<span>&nbsp;</span>"), readOutText([ "Speak Now", "\n" ])) : currentUserStep === STEP_READING_QUESTION_DONE || currentUserStep === STEP_ANSWERING_QUESTION || currentUserStep === STEP_ANSWERING_QUESTION_STOPPED ? (isListeningToAnswer = !0, 
    restartRecording()) : currentUserStep === STEP_SUBMITTED_WITH_SUCCESS ? restartRecording() : currentUserStep === STEP_SUBMITTED_WITH_ERROR ? (isListeningToAnswer = !0, 
    restartRecording()) : currentUserStep === STEP_READING_OUT_ERRORS_DONE && (clearErrorResults(), 
    isListeningToAnswer = !0, restartRecording());
}

function stopHandsFreeMode() {}

function St_stop() {
    isListeningToAnswer = !1, restartRecording(), currentUserStep = STEP_ANSWERING_QUESTION_STOPPED;
}

function St_start() {
    isListeningToAnswer = !0;
}

function St_try() {
    isListeningToAnswer = !0, clearErrorResults(), currentUserStep = STEP_ST_TRY;
    readOutTextProxy("listenButton", "speakerIconId", [ "Answer now", "\n" ]);
}

function St_submit() {
    isListeningToAnswer = !1, $(".submitBtn").click();
}

function St_next() {
    $(".nextBtn").is(":visible") ? $(".nextBtn").click() : (recognizer.stop(), readOutTextProxy("listenButton", "speakerIconId", [ "Please", ' "submit a correct answer to proceed to next."' ]));
}

function St_show() {
    1 < spokenLanguageIncorrectAnsCount ? (stopRecording(recognizer), showCorrectAnswers(), 
    readOutErrors()) : (recognizer.stop(), readOutTextProxy("listenButton", "speakerIconId", [ "Please", ' "Try again before you can ask for answers."' ]));
}

function getSuccessText() {
    return "Well done!";
}

function getErrorText() {
    return "Oops! The answer is not correct.";
}

function spokenLanguageResultsDisplayed(e, t) {
    recognizer.stop();
    var s = [ getErrorText(), "Please", '"Try again"' ];
    1 < t && (isHandsFreeOn ? s.push("Or say, Show, to see the answers.") : s.push("Click, Show Answers, to see the answers.")), 
    currentUserStep = STEP_SUBMITTED_WITH_ERROR, e && (s = [ getSuccessText() ], 
    isHandsFreeOn ? s.push("Say, \n", '"Next" to proceed.') : s.push("Click, \n", '"Next" to proceed.'), 
    currentUserStep = STEP_SUBMITTED_WITH_SUCCESS);
    readOutTextProxy("listenButton", "speakerIconId", s);
}
//# sourceMappingURL=st.min.js.map