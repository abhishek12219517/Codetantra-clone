function _typeof(t) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
        return typeof t;
    } : function(t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
    })(t);
}

function _classCallCheck(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
}

function _defineProperties(t, e) {
    for (var n = 0; n < e.length; n++) {
        var i = e[n];
        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), 
        Object.defineProperty(t, _toPropertyKey(i.key), i);
    }
}

function _createClass(t, e, n) {
    return e && _defineProperties(t.prototype, e), n && _defineProperties(t, n), 
    Object.defineProperty(t, "prototype", {
        writable: !1
    }), t;
}

function _toPropertyKey(t) {
    t = _toPrimitive(t, "string");
    return "symbol" === _typeof(t) ? t : String(t);
}

function _toPrimitive(t, e) {
    if ("object" !== _typeof(t) || null === t) return t;
    var n = t[Symbol.toPrimitive];
    if (void 0 === n) return ("string" === e ? String : Number)(t);
    n = n.call(t, e || "default");
    if ("object" !== _typeof(n)) return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
}

function _get() {
    return (_get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(t, e, n) {
        var i = _superPropBase(t, e);
        if (i) return (i = Object.getOwnPropertyDescriptor(i, e)).get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }).apply(this, arguments);
}

function _superPropBase(t, e) {
    for (;!Object.prototype.hasOwnProperty.call(t, e) && null !== (t = _getPrototypeOf(t)); );
    return t;
}

function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
        constructor: {
            value: t,
            writable: !0,
            configurable: !0
        }
    }), Object.defineProperty(t, "prototype", {
        writable: !1
    }), e && _setPrototypeOf(t, e);
}

function _setPrototypeOf(t, e) {
    return (_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
        return t.__proto__ = e, t;
    })(t, e);
}

function _createSuper(n) {
    var i = _isNativeReflectConstruct();
    return function() {
        var t, e = _getPrototypeOf(n);
        return _possibleConstructorReturn(this, i ? (t = _getPrototypeOf(this).constructor, 
        Reflect.construct(e, arguments, t)) : e.apply(this, arguments));
    };
}

function _possibleConstructorReturn(t, e) {
    if (e && ("object" === _typeof(e) || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
}

function _assertThisInitialized(t) {
    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return t;
}

function _isNativeReflectConstruct() {
    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
    if (Reflect.construct.sham) return !1;
    if ("function" == typeof Proxy) return !0;
    try {
        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), 
        !0;
    } catch (t) {
        return !1;
    }
}

function _getPrototypeOf(t) {
    return (_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
        return t.__proto__ || Object.getPrototypeOf(t);
    })(t);
}

var _ct_w = {}, wgInit = function(s) {
    var t = $("#" + s.id).select2({
        ajax: {
            url: "/secure/rest/w/g",
            dataType: "json",
            type: "GET",
            data: function(t) {
                t = {
                    q: t.term
                };
                return !1 === s.fgm && (t.f = !1), !0 === s.needUsers && (t.needUsers = !0), 
                !0 === s.needGroupInfo && (t.needGroupInfo = !0), !0 === s.needGroupNameMap && (t.needGroupNameMap = !0), 
                !0 === s.enforceFgm && (t.enforceFgm = !0), !0 === s.needEcs && (t.needEcs = !0), 
                !0 === s.needEucu && (t.needEucu = !0), !0 === s.disabledAlso && (t.d = !0), 
                "undefined" != typeof __eucfg && __eucfg && (t.euc = __eucfg), !0 === s.needGroupIdsForUsers && (t.ngifu = !0), 
                !0 === s.aag && (t.aag = !0), t;
            },
            delay: 500,
            transport: function(t, r, i) {
                t = $.ajax(t);
                return t.then(function(t) {
                    var e = t.groups, n = {}, i = (e.forEach(function(t) {
                        n[t._id.$oid] = t.groupName;
                    }), t.coursesMap), a = t.courseUnits, o = t.courseIdSrcMap;
                    r({
                        results: e.map(function(t) {
                            var e = s.disabledAlso && !1 === t.isEnabled ? t.groupName + " [disabled]" : t.groupName;
                            return {
                                id: t._id.$oid,
                                text: e,
                                groupName: t.groupName,
                                enabledCourses: t.enabledCourses,
                                courseNamesMap: i,
                                courseUnits: a,
                                userIdsArr: t.userIdsArr,
                                courseIdSrcMap: o,
                                groupNameMap: n,
                                startYear: t.startYear,
                                endYear: t.endYear,
                                description: t.description,
                                department: t.department,
                                section: t.section,
                                forInterview: t.forInterview,
                                isEnabled: t.isEnabled,
                                isDefaultSignUpGroup: t.isDefaultSignUpGroup,
                                suffix: t.suffix
                            };
                        })
                    });
                }), t.fail(function(t, e, n) {
                    401 === t.status && openLoginDialog(), i(t, e, n);
                }), t;
            }
        },
        minimumInputLength: s.minInputLength || 3,
        placeholder: s.placeholder || "",
        allowClear: !0,
        multiple: s.multi
    });
    "function" == typeof s.onchange && t.on("change", s.onchange).trigger("change");
}, wuInit = function(n) {
    $("#" + n.id).select2({
        ajax: {
            url: "/secure/rest/w/u",
            dataType: "json",
            type: "GET",
            data: function(t) {
                t = {
                    q: t.term
                };
                return "undefined" != typeof groupIdParam && groupIdParam && (t.gid = JSON.stringify(groupIdParam)), 
                n.role && (t.role = JSON.stringify(n.role)), n.forEval && (t.forEval = n.forEval), 
                n.pwSetOnly && (t.pwSetOnly = !0), "undefined" != typeof __cacle && __cacle && (t.except = JSON.stringify(__cacle)), 
                t;
            },
            delay: 250,
            transport: function(t, e, i) {
                t = $.ajax(t);
                return t.then(function(t) {
                    e({
                        results: t.map(function(t) {
                            var e = t.memberId ? "[" + t.memberId + "]" : "";
                            return {
                                id: t._id.$oid,
                                text: t.name + " [" + t.loginId + "] " + e,
                                loginId: t.loginId,
                                memberId: t.memberId,
                                name: t.name
                            };
                        }).filter(function(t) {
                            return "function" != typeof n.exclude || !n.exclude(t.id);
                        })
                    });
                }), t.fail(function(t, e, n) {
                    401 === t.status && openLoginDialog(), i(t, e, n);
                }), t;
            }
        },
        minimumInputLength: n.minInputLength || 4,
        placeholder: n.placeholder || "",
        allowClear: !0,
        multiple: n.multi
    });
}, wcInit = function() {
    var r = {};
    return function(o) {
        $("#" + o.id).select2({
            ajax: {
                url: "/secure/rest/w/c",
                dataType: "json",
                type: "GET",
                data: function(t) {
                    t = {
                        q: t.term,
                        local: o.local,
                        acl: o.acl,
                        needUnits: o.needUnits,
                        needCourseInfo: o.needCourseInfo,
                        newEuc: o.newEuc,
                        aac: o.aac,
                        fgm: o.fgm,
                        template: o.template
                    };
                    return "undefined" != typeof __gidfc && __gidfc && (t.gid = JSON.stringify(__gidfc)), 
                    t;
                },
                delay: 500,
                transport: function(t, e, i) {
                    r[o.id] || (r[o.id] = {});
                    var a = t.data.q, n = r[o.id][a];
                    return n ? (e(n), {
                        abort: function() {}
                    }) : ((n = $.ajax(t)).then(function(t) {
                        var n = t.courseUnits;
                        r[o.id][a] = {
                            results: t.coursesList.map(function(t) {
                                var e = t.code ? " [" + t.code + "]" : "";
                                return {
                                    id: t._id.$oid,
                                    text: t.endUserCourse + e + (t.isEnabled ? "" : " [Disabled]"),
                                    endUserCourse: t.endUserCourse,
                                    courseUnitsMap: n,
                                    description: t.description,
                                    displayText: t.displayText,
                                    acl: t.acl,
                                    isAllowedLanguages: t.isAllowedLanguages,
                                    isQuestionBased: t.isQuestionBased,
                                    isEnabled: t.isEnabled,
                                    isSequentialCompletionEnabled: t.isSequentialCompletionEnabled,
                                    requiresJavaApplet: t.requiresJavaApplet,
                                    postCourseCompletionInfo: t.postCourseCompletionInfo,
                                    src: t.src
                                };
                            })
                        }, e(r[o.id][a]);
                    }), n.fail(function(t, e, n) {
                        401 === t.status && openLoginDialog(), i(t, e, n);
                    }), n);
                }
            },
            minimumInputLength: o.minInputLength || 3,
            placeholder: o.placeholder || "",
            allowClear: !0,
            multiple: o.multi
        });
    };
}(), wqbcInit = function() {
    var r = {};
    return function(o) {
        $("#" + o.id).select2({
            ajax: {
                url: "/secure/rest/w/qbc",
                dataType: "json",
                type: "GET",
                data: function(t) {
                    return {
                        q: t.term
                    };
                },
                delay: 500,
                transport: function(t, e, i) {
                    r[o.id] || (r[o.id] = {});
                    var a = t.data.q, n = r[o.id][a];
                    return n ? (e(n), {
                        abort: function() {}
                    }) : ((n = $.ajax(t)).then(function(t) {
                        var n = t.usersMap, t = t.courses;
                        r[o.id][a] = {
                            results: t.map(function(t) {
                                var e = t.isEnabled ? t.course : t.course + " [disabled]";
                                return {
                                    id: t._id.$oid,
                                    text: e,
                                    description: t.description,
                                    requiresJavaApplet: t.requiresJavaApplet,
                                    isEnabled: t.isEnabled,
                                    acl: t.acl,
                                    usersMap: n,
                                    templateScheduleId: t.templateScheduleId,
                                    minimumCO: t.minimumCO
                                };
                            })
                        }, e(r[o.id][a]);
                    }), n.fail(function(t, e, n) {
                        401 === t.status && openLoginDialog(), i(t, e, n);
                    }), n);
                }
            },
            minimumInputLength: o.minInputLength || 3,
            placeholder: o.placeholder || "",
            allowClear: !0,
            multiple: o.multi
        });
    };
}(), wtsInit = function() {
    var r = {};
    return _ct_w.wtsExtra = _ct_w.wtsExtra || {}, function(o) {
        o.elementId && (_ct_w.wtsExtra[o.elementId] = {});
        var t = $("#" + o.id).select2({
            ajax: {
                url: "/secure/rest/w/ts",
                dataType: "json",
                type: "GET",
                data: function(t) {
                    var e = Object.assign({}, _ct_w.wtsExtra, _ct_w.wtsExtra[o.elementId] || {}), t = {
                        q: t.term,
                        tmpl: o.tmpl,
                        scheduleIds: e.scheduleIds,
                        v: o.v,
                        test: o.test,
                        src: o.src
                    };
                    return "undefined" != typeof groupIdParam && groupIdParam && (t.gid = JSON.stringify(groupIdParam)), 
                    e.to && e.from && (t.dateRange = JSON.stringify({
                        from: e.from,
                        to: e.to
                    })), t;
                },
                delay: 500,
                transport: function(t, e, i) {
                    r[o.id] || (r[o.id] = {});
                    var n = JSON.stringify(t.data), a = r[o.id][n];
                    return a ? (e(a), {
                        abort: function() {}
                    }) : ((a = $.ajax(t)).then(function(t) {
                        r[o.id][n] = {
                            results: t.map(function(t) {
                                var e = t.isEnabled ? "" : " [disabled]";
                                return {
                                    id: o.dataIdIsScheduleId ? t.scheduleId : t._id,
                                    text: t.scheduleId + " - " + t.name + " " + (t.externalId ? "[" + t.externalId + "]" : "") + " [" + (t.procEnabled ? "proctored" : "non-proctored") + "]" + e,
                                    test: t.test,
                                    testSrc: t.testSrc
                                };
                            })
                        }, e(r[o.id][n]);
                    }), a.fail(function(t, e, n) {
                        401 === t.status && openLoginDialog(), i(t, e, n);
                    }), a);
                }
            },
            minimumInputLength: isNaN(+o.minInputLength) ? 3 : o.minInputLength,
            placeholder: o.placeholder || "",
            allowClear: !0,
            multiple: o.multi,
            maximumSelectionLength: o.maximumSelectionLength,
            disabled: o.disabled
        });
        "function" == typeof o.onchange && t.on("change", o.onchange).trigger("change");
    };
}(), wtInit = function(n) {
    $("#" + n.id).select2({
        ajax: {
            url: "/secure/rest/w/t",
            dataType: "json",
            type: "GET",
            data: function(t) {
                return {
                    q: t.term,
                    sd: n.sourceDomain || "",
                    so: n.so,
                    acl: n.acl
                };
            },
            delay: 250,
            transport: function(t, e, i) {
                t = $.ajax(t);
                return t.then(function(t) {
                    t = t.map(function(t) {
                        var e = {
                            id: t._id.$oid,
                            text: t.test,
                            src: t.src
                        };
                        return n.so || (e.text = t.test + (t.isScheduledTest ? "" : " [Unscheduled]") + (t.isEnabled ? "" : " [Disabled]")), 
                        e;
                    });
                    e({
                        results: t
                    });
                }), t.fail(function(t, e, n) {
                    401 === t.status && openLoginDialog(), i(t, e, n);
                }), t;
            }
        },
        minimumInputLength: n.minInputLength || 3,
        placeholder: n.placeholder || "",
        allowClear: n.allowClear,
        multiple: n.multi
    });
};

function displayBroadcastDialogue(n, i, t, e, a, o, r) {
    var t = '<div><label class=\'col-form-label\'>Broadcast History</label> <ul class="nav nav-tabs">\n  <li class="nav-item flex-fill"">\n    <a class="nav-link active" data-toggle="tab" href="#super">Super Proctor</a>\n  </li>\n  <li class="nav-item flex-fill"">\n    <a class="nav-link" data-toggle="tab" href="#proctors">Proctor</a>\n  </li>\n</ul><div style=\'overflow-y: hidden; border-bottom: 1px solid lightgrey;\'><div class="tab-content" id="tabContent" style=\'overflow-y: auto;height: 200px\'>\n  <div class="tab-pane fade show active" id="super" role="tabpanel" aria-labelledby="super-tab">' + t + '</div>\n  <div class="tab-pane fade" id="proctors" role="tabpanel" aria-labelledby="proctor-tab">' + e + '</div>\n</div></div></div><div id="broadcastMsgDiv">\n    <div class="row my-3 mx-auto">\n        <div class="text-left"><label for="visibleToSelect">Send message to</label><br><div class="small mb-2">(Leaving this field empty will broadcast message to all the proctors and examinees)</div></div>\n        <select class="form-control form-control-sm" id="visibleToSelect" style="width: 100%;"></select>\n' + (o ? '        <div class="mt-2 text-left"><label for="visibleToSelect">Select Schedules </label><br><div class="small mb-2">(Leaving this field empty will broadcast message to all the proctors and examinees)</div></div>\n' : "\n") + (o ? '        <select class="form-control form-control-sm" id="scheduleSelect" style="width: 100%"></select>\n' : "\n") + '    </div>\n    <div class = "row mx-auto">\n        <textarea id="broadcastMsgContent" maxlength="250" class="form-control" rows="5"\n              placeholder="Type your message here" style="resize: none; font-size: 16px;"></textarea>\n    </div>\n</div>', s = [ {
        id: "examinees",
        text: "Examinees",
        selected: !0
    }, {
        id: "proctors",
        text: "Proctors"
    } ], c = [];
    o && (s.pop(), 1 === n.length ? (e = n[0], c.push({
        id: e,
        text: e + " - " + r[e],
        selected: !0
    })) : n.forEach(function(t) {
        c.push({
            id: t,
            text: t + " - " + r[t]
        });
    })), Swal.fire({
        title: "Send a broadcast message " + (a ? "#" + n : ""),
        html: $(t),
        customClass: {
            container: "ctbroadcastSWAL",
            confirmButton: "confirmBtn",
            cancelButton: "cancelBtn"
        },
        width: "60%",
        showCancelButton: !0,
        confirmButtonText: "Send",
        cancelButtonText: "Cancel",
        didRender: function() {
            $("#visibleToSelect").select2({
                allowClear: !0,
                multiple: !0,
                placeholder: "Select viewers",
                data: s
            }), o && $("#scheduleSelect").select2({
                allowClear: !0,
                multiple: !0,
                placeholder: "Select schedules",
                data: c
            });
        },
        didDestroy: function() {
            $("#visibleToSelect").select2("destroy"), $("#scheduleSelect").select2("destroy");
        }
    }).then(function(t) {
        var e;
        t.isConfirmed && ("" === (t = $("#broadcastMsgContent").val().trim()) ? alertify.error("Please type the message") : (t = t.replace(/</g, "&lt;").replace(/>/g, "&gt;"), 
        (e = {}).msg = t, e.sentAs = i, t = $("#scheduleSelect").val(), e.scheduleIds = o && 0 !== t.length ? t : n, 
        0 === e.scheduleIds.length ? alertify.error("Invalid schedule id(s)") : (t = 0 < (t = $("#visibleToSelect")).val().length ? t.val() : [ "examinees", "proctors", "supers" ], 
        e.visibleTo = t, (t = $.ajax({
            type: "POST",
            url: "/secure/rest/a/sbm",
            headers: jsonHeaders,
            dataType: "json",
            data: JSON.stringify(e)
        })).done(function(t) {
            0 === t.result ? alertify.success("Successfully broadcasted the message") : alertify.error("Could not broadcast the message");
        }), t.fail(function(t, e, n) {
            t.getResponseHeader("X-SessionTimeout") ? openLoginDialog() : alertify.error("Error: " + e + " - " + n, "6");
        }))));
    });
}

function getHelpVideo(t) {
    Swal.fire({
        title: "Watch the video for understanding this feature",
        html: $("<iframe src='" + t + "' allowfullscreen=true width='100%' height='315'  id='helpLink'></iframe>")[0],
        customClass: {
            container: "helpContainer"
        },
        width: 600,
        height: "auto",
        confirmButtonText: "Close",
        allowOutsideClick: !1,
        allowEscapeKey: !1
    }).then(function() {
        $("#helpLink").attr("src", $("#helpLink").attr("src"));
    });
}

function preventDefaultStopPropagation(t) {
    t.preventDefault(), t.stopPropagation();
}

function wrte() {
    return function(a, n) {
        function t(t) {
            var e = t.ops.length;
            n.disablePaste && t.ops[e - 1] && t.ops[e - 1].insert && 1 < t.ops[e - 1].insert.length && o.history.undo(), 
            P && r();
        }
        var e, i, o, r, s, c, l, d, p, u, m, f, g, y, x = n.initialContent || "", h = n.focus || !1, b = n.minimal || !1, v = n.editable, w = n.placeholder || "", k = n.showLatexPanel && n.editable || !1, C = n.excludeExternal, S = n.upload, P = n.onchange, M = n.allowedAudioFileExtensions, I = n.allowAudioInEditor || !1;
        function T() {
            return y.apply(this, arguments) || this;
        }
        a.data("editor") ? h && a.data("editor").focus() : (e = a[0]) && (c = Quill.imports.parchment, 
        y = c.Embed, ((T.prototype = Object.create(y.prototype)).constructor = T).__proto__ = y, 
        T.create = function() {
            var t = y.create.call(this);
            return t.contentEditable = "false", t;
        }, (c = T).blotName = "label", c.tagName = "span", c.className = "ct-fib", 
        i = Quill.import("blots/block/embed"), (s = function() {
            "use strict";
            _inherits(n, i);
            var t = _createSuper(n);
            function n() {
                return _classCallCheck(this, n), t.apply(this, arguments);
            }
            return _createClass(n, null, [ {
                key: "create",
                value: function(t) {
                    var e = _get(_getPrototypeOf(n), "create", this).call(this);
                    return e.setAttribute("src", t), e.setAttribute("controls", ""), 
                    e;
                }
            }, {
                key: "value",
                value: function(t) {
                    return t.getAttribute("src");
                }
            } ]), n;
        }()).blotName = "audio", s.tagName = "audio", s.className = "ct-audio", 
        Quill.register(s), Quill.import("ui/icons").audio = '<svg viewBox="0 0 18 18">\n                            <path d="M11 6.64a1 1 0 0 0-1.243-.97l-1 .25A1 1 0 0 0 8 6.89v4.306A2.572 2.572 0 0 0 7 11c-.5 0-.974.134-1.338.377-.36.24-.662.628-.662 1.123s.301.883.662 1.123c.364.243.839.377 1.338.377.5 0 .974-.134 1.338-.377.36-.24.662-.628.662-1.123V8.89l2-.5V6.64z"/>\n                            <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"/>\n                             </svg>', 
        Quill.register(c), mathquill4quill()(o = new Quill(e, {
            theme: "snow",
            placeholder: v && w || "",
            modules: v ? C ? {
                formula: !0,
                toolbar: b ? [ "formula" ] : {
                    container: [ [ "bold", "italic", "underline", "strike" ], [ "blockquote", "code-block" ], [ "formula" ], [ {
                        list: "ordered"
                    }, {
                        list: "bullet"
                    } ], [ {
                        script: "sub"
                    }, {
                        script: "super"
                    }, {
                        indent: "-1"
                    }, {
                        indent: "+1"
                    } ], [ {
                        size: [ "small", !1, "large", "huge" ]
                    }, {
                        header: [ 1, 2, 3, 4, 5, 6, !1 ]
                    } ], [ {
                        color: []
                    }, {
                        background: []
                    }, {
                        font: []
                    }, {
                        align: []
                    }, {
                        direction: "rtl"
                    }, "clean" ], quillTable.tableToolbar ],
                    handlers: {
                        "table-ops": function() {},
                        "table-border": function() {},
                        "table-color": function() {}
                    }
                },
                history: {
                    maxStack: 200,
                    userOnly: !0
                },
                table: !0,
                tableResize: !0
            } : {
                formula: !0,
                toolbar: b ? [ "image", "formula" ] : {
                    container: [ [ "bold", "italic", "underline", "strike", "link" ], [ "blockquote", "code-block" ], [ "image", "formula", "video", I ? "audio" : "" ], [ {
                        list: "ordered"
                    }, {
                        list: "bullet"
                    } ], [ {
                        script: "sub"
                    }, {
                        script: "super"
                    }, {
                        indent: "-1"
                    }, {
                        indent: "+1"
                    } ], [ {
                        size: [ "small", !1, "large", "huge" ]
                    }, {
                        header: [ 1, 2, 3, 4, 5, 6, !1 ]
                    } ], [ {
                        color: []
                    }, {
                        background: []
                    }, {
                        font: []
                    }, {
                        align: []
                    }, {
                        direction: "rtl"
                    }, "clean" ], quillTable.tableToolbar ],
                    handlers: {
                        "table-ops": function() {},
                        "table-border": function() {},
                        "table-color": function() {},
                        audio: function() {
                            $("#wrte-audio-input").data("quill", o).click();
                        }
                    }
                },
                table: !0,
                tableResize: !0,
                imageDrop: !1,
                imageResize: {},
                imageUploader: {
                    upload: S
                }
            } : {
                toolbar: !1,
                table: !0
            },
            readOnly: !v
        }), {
            operators: [ [ "\\sqrt{x}", "\\sqrt" ], [ "\\sqrt[n]{x}", "\\nthroot" ], [ "\\frac{x}{y}", "\\frac" ], [ "\\pm", "\\pm" ], [ "\\sum^{s}_{x}{d}", "\\sum" ], [ "\\prod^{s}_{x}{d}", "\\prod" ], [ "\\coprod^{s}_{x}{d}", "\\coprod" ], [ "\\int^{s}_{x}{d}", "\\int" ], [ "\\binom{n}{k}", "\\binom" ] ],
            matrices: [ [ "\\begin{matrix} a & b \\\\ c & d \\end{matrix}", "\\begin{matrix} a & b \\\\ c & d \\end{matrix}" ], [ "\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}", "\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}" ], [ "\\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix}", "\\begin{bmatrix} a & b \\\\ c & d \\end{bmatrix}" ], [ "\\begin{Bmatrix} a & b \\\\ c & d \\end{Bmatrix}", "\\begin{Bmatrix} a & b \\\\ c & d \\end{Bmatrix}" ], [ "\\begin{vmatrix} a & b \\\\ c & d \\end{vmatrix}", "\\begin{vmatrix} a & b \\\\ c & d \\end{vmatrix}" ], [ "\\begin{Vmatrix} a & b \\\\ c & d \\end{Vmatrix}", "\\begin{Vmatrix} a & b \\\\ c & d \\end{Vmatrix}" ] ],
            displayHistory: !0,
            historyCacheKey: "__mq4q_history_cachekey_",
            historySize: 20
        }), a.data("editor", o), !C && !b && I && $("#wrte-audio-input").length <= 0 && ($("body").append('<input type="file" style="display: none" accept="audio/*" id="wrte-audio-input">'), 
        $("#wrte-audio-input").on("change", function(t) {
            var e, n, i;
            t.target.files && (e = t.target.files[0]) && (10 < e.size / 1048576 ? swal({
                icon: "warning",
                text: "Audio file of size greater than 10MB is not allowed."
            }) : (e = t.target.files[0].name, n = "." + t.target.files[0].type.split("/")[1], 
            e && M.includes(n) ? (i = $("#wrte-audio-input").data("quill"), S(t.target.files[0]).then(function(t) {
                var e = i.getSelection(), n = i.getLength();
                i.insertEmbed(e ? e.index : n, "audio", t), i.setSelection(e ? e.index + i.getLength() - n : n + 1);
            })) : swal({
                icon: "warning",
                text: "Audio extension " + n + " is not supported. Please make sure the audio uploaded is of " + M.join(", ") + "."
            })));
        })), x && (o.clipboard.dangerouslyPasteHTML(x), a.data("__content", x)), 
        P && (r = function() {
            a.data("__content") !== o.root.innerHTML && P(o.root.innerHTML);
        }), o.off("text-change", t).on("text-change", t), h && o.focus(), k) && (s = function() {
            a.find(".collapse-panel i").toggleClass("fa fa-chevron-down fa fa-chevron-up"), 
            a.find(".collapse").toggle();
            var t = a.find(".latex-expression-group");
            t.hasClass("d-none") || t.find("input").focus();
        }, c = function(t) {
            preventDefaultStopPropagation(t);
            t = t.target.files || t.originalEvent.dataTransfer.files;
            t && t.length && t[0] && (/^(image)\//.test(t[0].type) ? l(t[0]) : (m(), 
            a.find(".img-error-msg").text("Please upload image files only").removeClass("d-none")));
        }, l = function(t) {
            d(), u(t), f(t);
        }, d = function() {
            a.find(".help-text, .latex-expression-group, .math-formula").addClass("d-none"), 
            a.find(".show-spinner").removeClass("d-none");
        }, p = function() {
            a.find(".show-spinner").addClass("d-none");
        }, u = function(t) {
            t = URL.createObjectURL(t);
            a.find(".browse-text, .img-error-msg").addClass("d-none"), a.find(".image-preview").attr("src", t).removeClass("d-none").addClass("d-inline-block");
        }, m = function() {
            a.find(".edit-info-text, .latex-expression-group, .math-formula, .insert-error-msg, .img-error-msg").addClass("d-none"), 
            a.find(".img-error-msg").text(""), a.find(".latex-expression-group input, .file-select").val(""), 
            a.find(".image-preview").attr("src", "").removeClass("d-inline-block").addClass("d-none"), 
            a.find(".browse-text, .help-text").removeClass("d-none"), a.find(".insert-into-editor").prop("disabled", !0), 
            a.find(".insert-hide-buttons").removeClass("mt-md-2").addClass("mt-2 mt-md-0");
        }, f = function n(i) {
            a.find(".paste-image-button").prop("disabled", !0);
            var t = new FormData(), t = (t.append("file", i), $.ajax({
                type: "POST",
                url: "https://ocr.codetantra.com/predict/",
                crossDomain: !0,
                data: t,
                contentType: !1,
                processData: !1,
                xhrFields: {
                    withCredentials: !0
                }
            }));
            t.done(function(t) {
                g = t, p(), a.find(".edit-info-text, .latex-expression-group, .math-formula").removeClass("d-none"), 
                a.find(".insert-hide-buttons").removeClass("mt-md-0").addClass("mt-2 mt-md-2"), 
                a.find(".latex-expression-group input").val(t).focus(), a.find(".insert-into-editor, .paste-image-button").prop("disabled", !1), 
                a.find(".math-formula").text("$$" + t + "$$"), a.find(".insert-error-msg").addClass("d-none"), 
                applyDynamics(".math-formula");
            }), t.fail(function(t, e) {
                swal({
                    icon: "error",
                    text: getFailedAjaxMessageCommon(t, e) || "Unable to fetch the LaTeX",
                    buttons: [ "Cancel", "Retry" ]
                }).then(function(t) {
                    t ? n(i) : (p(), m());
                });
            });
        }, a.append('                    <div class="card mb-1">                        <div class="card-header px-2 py-1">                            <button class="collapse-panel btn btn-sm btn-block text-left p-0 shadow-none" type="button">                                <small>Import LaTeX from image (Screenshots, Image files)<span class="sr-only">Open Close Panel</span></small>                                <small class="float-right"><i class="fa fa-chevron-down" aria-hidden="true"></i></small>                            </button>                        </div>                        <div class="collapse">                            <div class="card-body drop-zone-field d-md-flex p-2">                                <div class="col-12 col-md-6 drop-zone border position-relative bg-light">                                    <button class="paste-image-button btn btn-sm btn-secondary position-absolute py-0 px-1" style="top: .25em; right: .25em" title="Paste image from clipboard"><i class="fa fa-clipboard" aria-hidden="true"></i></button>                                    <div class="h-100 w-100 d-flex align-items-center">                                        <label class="text-secondary text-center w-100 mb-0 p-0 p-md-2">                                            <img class="image-preview rounded d-none mw-100 mh-100" style="width: unset" alt="preview of latex image">                                            <span class="browse-text">Click to browse<br>or<br>Drop your file here<br>or<br>Paste from clipboard by clicking on the paste button</span>                                            <input type="file" class="file-select" accept="image/*" hidden/>                                        <label>                                    </div>                                </div>                                <div class="result-area col-12 col-md-6 border border-left-0 d-flex flex-column justify-content-center p-0 p-md-2">                                    <div class="show-spinner d-none text-center flex-grow-1">                                        <span><span class="sr-only">Loading</span><i class="fa fa-spinner" aria-hidden="true"></i></span>                                    </div>                                    <div class="help-text text-center flex-grow-1 text-primary">                                        If you have formulae that are hand-written or as part of an image or as part of any document,                                         you can snip & paste an image of them and we will try to convert the image to LaTeX. You can                                         check how it looks here, correct if required and use it.                                    </div>                                    <div class="insert-error-msg d-none text-danger">                                        The formula has an error in it, so it cannot be inserted. Please try with another image.                                    </div>                                    <div class="latex-expression-group d-none form-group mb-0">                                        <div class="input-group my-2 my-md-0">                                            <input type="text" class="form-control">                                            <div class="input-group-append">                                                <button class="btn btn-secondary"><i class="fa fa-files-o" aria-hidden="true"></i></button>                                            </div>                                        </div>                                        <small class="text-primary form-text">You can edit the above input field to get the desired formula as shown below</small>                                    </div>                                    <div style="overflow-x: auto; overflow-y: hidden;" class="flex-grow-1">                                        <div class="math-formula d-none"></div>                                    </div>                                    <div class="insert-hide-buttons d-flex flex-wrap btn-group mt-2 mt-md-0">                                        <button class="insert-into-editor btn btn-outline-dark btn-sm py-0 py-md-1 mr-2 rounded" disabled>Insert into Editor</button>                                        <button class="hide-panel-button btn btn-outline-dark btn-sm py-0 py-md-1 mr-2 rounded">Hide Panel</button>                                        <button class="clear-panel btn btn-outline-danger btn-sm py-0 py-md-1 rounded">Reset</button>                                    </div>                                </div>                            </div>                            <div class="col-12 col-md-6 text-center">                                <p class="d-none img-error-msg mb-2 text-danger"></p>                            </div>                        </div>                    </div>'), 
        a.find(".collapse-panel").off("click").on("click", s), a.find(".drop-zone").off("dragenter dragover dragleave").on("dragenter dragover dragleave", preventDefaultStopPropagation), 
        a.find(".drop-zone").off("drop").on("drop", c), a.find(".file-select").off("change").on("change", c), 
        a.find(".paste-image-button").off("click").on("click", function() {
            navigator.clipboard.read().then(function(t) {
                t = t[0];
                t.types && t.types.includes("image/png") ? t.getType("image/png").then(function(t) {
                    l(new File([ t ], "uploaded-image"));
                }) : (m(), a.find(".img-error-msg").text("Clipboard contains non-image data").removeClass("d-none"));
            });
        }), a.find(".latex-expression-group button").off("mouseenter mouseleave click").on({
            mouseenter: function() {
                $(this).attr("data-original-title", "Copy to Clipboard").tooltip("update").tooltip("show");
            },
            mouseleave: function() {
                $(this).tooltip("hide");
            },
            click: function() {
                var t = a.find(".latex-expression-group input").val();
                navigator.clipboard.writeText(t), $(this).attr("data-original-title", "Copied!").tooltip("update").tooltip("show");
            }
        }), a.find(".latex-expression-group input").off("input").on("input", _.debounce(function() {
            var t = $(this).val();
            a.find(".math-formula").text("$$" + t + "$$"), g = t, applyDynamics(".math-formula");
        }, 100)), a.find(".insert-into-editor").off("click").on("click", function() {
            try {
                var t = a.data("editor"), e = t.getSelection(!0);
                t.deleteText(e.index, e.length), t.insertEmbed(e.index, "formula", g), 
                t.setSelection(e.index + 1), m();
            } catch (t) {
                a.find(".latex-expression-group, .edit-info-text, .math-formula").addClass("d-none"), 
                a.find(".latex-expression").val(""), a.find(".insert-into-editor").prop("disabled", !0), 
                a.find(".insert-error-msg").removeClass("d-none");
            }
        }), a.find(".hide-panel-button").off("click").on("click", s), a.find(".clear-panel").off("click").on("click", m));
    };
}

var qtInit = function(t) {
    var e, g = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ], y = (t = t || {}, "boolean" != typeof t.editable || t.editable), x = t.selector ? $(t.selector) : null, i = t.ui || !1, n = t.featureIntroContainer ? $(t.featureIntroContainer) : "", h = {}, o = {}, a = !1, r = [], s = {}, c = t.onDefChange || null, f = {
        pickRandomString: {
            description: "Choose a string randomly from a given list of arguments. It requires at least two arguments.",
            syntax: 'pickRandomString(varA, stringFunction("abc"), "10", "it\'s another string expression")'
        },
        stringLength: {
            description: "Returns the length of the passed argument. It requires exactly one argument.",
            syntax: 'stringLength("string" or var or any stringFunction(...))'
        },
        stringEquals: {
            description: "Checks if the arguments are equal and returns true or false as string. It requires exactly two arguments.",
            syntax: 'stringEquals("string" or var or any stringFunction(...))'
        },
        reverse: {
            description: "Returns the reverse of the argument. It requires exactly one argument.",
            syntax: 'reverse("string" or var or any stringFunction(...))'
        },
        concatenate: {
            description: "Returns the concatenation of two or more text strings into one string. It requires at least one argument.",
            syntax: 'concatenate(varA, stringFunction("abc"), "10", "string expression in single quotes")'
        },
        join: {
            description: "Creates and returns a new string by concatenating all of the string elements, separated by a specified separator which is the last string argument. It requires at least three arguments.",
            syntax: 'join(varA, "string1", ..., "separator")'
        },
        nOccurrence: {
            description: "Returns the number of occurrences of the pattern in the text as a string. It requires exactly two arguments.",
            syntax: 'nOccurrence("text", "searchPattern")'
        },
        rand: {
            description: "Random real number between 2 numbers, inclusive of number1, exclusive of number2",
            syntax: "rand(number1, number2)"
        },
        pickRandom: {
            description: "Choose a number from a given list of arguments",
            syntax: "pickRandom(a, add(1,2,3), 10, 20, 30)"
        },
        sin: {
            description: "Trigonometric sine function",
            syntax: "sin(x)"
        },
        cos: {
            description: "Trigonometric cosine function",
            syntax: "cos(x)"
        },
        tg: {
            description: "Trigonometric tangent function",
            syntax: "tg(x)"
        },
        tan: {
            description: "Trigonometric tangent function",
            syntax: "tan(x)"
        },
        ctg: {
            description: "Trigonometric cotangent function",
            syntax: "ctg(x)"
        },
        cot: {
            description: "Trigonometric cotangent function",
            syntax: "cot(x)"
        },
        ctan: {
            description: "Trigonometric cotangent function",
            syntax: "ctan(x)"
        },
        sec: {
            description: "Trigonometric secant function",
            syntax: "sec(x)"
        },
        csc: {
            description: "Trigonometric cosecant function",
            syntax: "csc(x)"
        },
        cosec: {
            description: "Trigonometric cosecant function",
            syntax: "cosec(x)"
        },
        asin: {
            description: "Inverse trigonometric sine function",
            syntax: "asin(x)"
        },
        arsin: {
            description: "Inverse trigonometric sine function",
            syntax: "arsin(x)"
        },
        arcsin: {
            description: "Inverse trigonometric sine function",
            syntax: "arcsin(x)"
        },
        acos: {
            description: "Inverse trigonometric cosine function",
            syntax: "acos(x)"
        },
        arcos: {
            description: "Inverse trigonometric cosine function",
            syntax: "arcos(x)"
        },
        arccos: {
            description: "Inverse trigonometric cosine function",
            syntax: "arccos(x)"
        },
        atg: {
            description: "Inverse trigonometric tangent function",
            syntax: "atg(x)"
        },
        atan: {
            description: "Inverse trigonometric tangent function",
            syntax: "atan(x)"
        },
        arctg: {
            description: "Inverse trigonometric tangent function",
            syntax: "arctg(x)"
        },
        arctan: {
            description: "Inverse trigonometric tangent function",
            syntax: "arctan(x)"
        },
        actg: {
            description: "Inverse trigonometric cotangent function",
            syntax: "actg(x)"
        },
        acot: {
            description: "Inverse trigonometric cotangent function",
            syntax: "acot(x)"
        },
        actan: {
            description: "Inverse trigonometric cotangent function",
            syntax: "actan(x)"
        },
        arcctg: {
            description: "Inverse trigonometric cotangent function",
            syntax: "arcctg(x)"
        },
        arccot: {
            description: "Inverse trigonometric cotangent function",
            syntax: "arccot(x)"
        },
        arcctan: {
            description: "Inverse trigonometric cotangent function",
            syntax: "arcctan(x)"
        },
        ln: {
            description: "Natural logarithm function (base e)",
            syntax: "ln(x)"
        },
        log2: {
            description: "Binary logarithm function (base 2)",
            syntax: "log2(x)"
        },
        log10: {
            description: "Common logarithm function (base 10)",
            syntax: "log10(x)"
        },
        rad: {
            description: "Degrees to radians function",
            syntax: "rad(x)"
        },
        exp: {
            description: "Exponential function",
            syntax: "exp(x)"
        },
        sqrt: {
            description: "Squre root function",
            syntax: "sqrt(x)"
        },
        sinh: {
            description: "Hyperbolic sine function",
            syntax: "sinh(x)"
        },
        cosh: {
            description: "Hyperbolic cosine function",
            syntax: "cosh(x)"
        },
        tgh: {
            description: "Hyperbolic tangent function",
            syntax: "tgh(x)"
        },
        tanh: {
            description: "Hyperbolic tangent function",
            syntax: "tanh(x)"
        },
        coth: {
            description: "Hyperbolic cotangent function",
            syntax: "coth(x)"
        },
        ctgh: {
            description: "Hyperbolic cotangent function",
            syntax: "ctgh(x)"
        },
        ctanh: {
            description: "Hyperbolic cotangent function",
            syntax: "ctanh(x)"
        },
        sech: {
            description: "Hyperbolic secant function",
            syntax: "sech(x)"
        },
        csch: {
            description: "Hyperbolic cosecant function",
            syntax: "csch(x)"
        },
        cosech: {
            description: "Hyperbolic cosecant function",
            syntax: "cosech(x)"
        },
        deg: {
            description: "Radians to degrees function",
            syntax: "deg(x)"
        },
        abs: {
            description: "Absolut value function",
            syntax: "abs(x)"
        },
        sgn: {
            description: "Signum function",
            syntax: "sgn(x)"
        },
        floor: {
            description: "Floor function",
            syntax: "floor(x)"
        },
        ceil: {
            description: "Ceiling function",
            syntax: "ceil(x)"
        },
        not: {
            description: "Negation function",
            syntax: "not(x)"
        },
        asinh: {
            description: "Inverse hyperbolic sine function",
            syntax: "asinh(x)"
        },
        arsinh: {
            description: "Inverse hyperbolic sine function",
            syntax: "arsinh(x)"
        },
        arcsinh: {
            description: "Inverse hyperbolic sine function",
            syntax: "arcsinh(x)"
        },
        acosh: {
            description: "Inverse hyperbolic cosine function",
            syntax: "acosh(x)"
        },
        arcosh: {
            description: "Inverse hyperbolic cosine function",
            syntax: "arcosh(x)"
        },
        arccosh: {
            description: "Inverse hyperbolic cosine function",
            syntax: "arccosh(x)"
        },
        atgh: {
            description: "Inverse hyperbolic tangent function",
            syntax: "atgh(x)"
        },
        atanh: {
            description: "Inverse hyperbolic tangent function",
            syntax: "atanh(x)"
        },
        arctgh: {
            description: "Inverse hyperbolic tangent function",
            syntax: "arctgh(x)"
        },
        arctanh: {
            description: "Inverse hyperbolic tangent function",
            syntax: "arctanh(x)"
        },
        acoth: {
            description: "Inverse hyperbolic cotangent function",
            syntax: "acoth(x)"
        },
        actgh: {
            description: "Inverse hyperbolic cotangent function",
            syntax: "actgh(x)"
        },
        actanh: {
            description: "Inverse hyperbolic cotangent function",
            syntax: "actanh(x)"
        },
        arcoth: {
            description: "Inverse hyperbolic cotangent function",
            syntax: "arcoth(x)"
        },
        arccoth: {
            description: "Inverse hyperbolic cotangent function",
            syntax: "arccoth(x)"
        },
        arcctgh: {
            description: "Inverse hyperbolic cotangent function",
            syntax: "arcctgh(x)"
        },
        arcctanh: {
            description: "Inverse hyperbolic cotangent function",
            syntax: "arcctanh(x)"
        },
        asech: {
            description: "Inverse hyperbolic secant function",
            syntax: "asech(x)"
        },
        arsech: {
            description: "Inverse hyperbolic secant function",
            syntax: "arsech(x)"
        },
        arcsech: {
            description: "Inverse hyperbolic secant function",
            syntax: "arcsech(x)"
        },
        acsch: {
            description: "Inverse hyperbolic cosecant function",
            syntax: "acsch(x)"
        },
        arcsch: {
            description: "Inverse hyperbolic cosecant function",
            syntax: "arcsch(x)"
        },
        arccsch: {
            description: "Inverse hyperbolic cosecant function",
            syntax: "arccsch(x)"
        },
        acosech: {
            description: "Inverse hyperbolic cosecant function",
            syntax: "acosech(x)"
        },
        arcosech: {
            description: "Inverse hyperbolic cosecant function",
            syntax: "arcosech(x)"
        },
        arccosech: {
            description: "Inverse hyperbolic cosecant function",
            syntax: "arccosech(x)"
        },
        Sa: {
            description: "Sinc function (normalized)",
            syntax: "Sa(x)"
        },
        sinc: {
            description: "Sinc function (normalized)",
            syntax: "sinc(x)"
        },
        Sinc: {
            description: "Sinc function (unnormalized)",
            syntax: "Sinc(x)"
        },
        Bell: {
            description: "Bell number",
            syntax: "Bell(n)"
        },
        Luc: {
            description: "Lucas number",
            syntax: "Luc(n)"
        },
        Fib: {
            description: "Fibonacci number",
            syntax: "Fib(n)"
        },
        harm: {
            description: "Harmonic number",
            syntax: "harm(n)"
        },
        ispr: {
            description: "Prime number test (is number a prime?)",
            syntax: "ispr(n)"
        },
        Pi: {
            description: "Prime-counting function - Pi(x)",
            syntax: "Pi(n)"
        },
        Ei: {
            description: "Exponential integral function (non-elementary special function) - usage example: Ei(x)",
            syntax: "Ei(x)"
        },
        li: {
            description: "Logarithmic integral function (non-elementary special function) - usage example: li(x)",
            syntax: "li(x)"
        },
        Li: {
            description: "Offset logarithmic integral function (non-elementary special function) - usage example: Li(x)",
            syntax: "Li(x)"
        },
        erf: {
            description: "Gauss error function (non-elementary special function) - usage example: 2 + erf(x)",
            syntax: "erf(x)"
        },
        erfc: {
            description: "Gauss complementary error function (non-elementary special function) - usage example: 1 - erfc(x)",
            syntax: "erfc(x)"
        },
        erfInv: {
            description: "Inverse Gauss error function (non-elementary special function) - usage example: erfInv(x)",
            syntax: "erfInv(x)"
        },
        erfcInv: {
            description: "Inverse Gauss complementary error function (non-elementary special function) - usage example: erfcInv(x)",
            syntax: "erfcInv(x)"
        },
        ulp: {
            description: "Unit in The Last Place - ulp(0.1)",
            syntax: "ulp(x)"
        },
        isNaN: {
            description: "Returns true = 1 if value is a Not-a-Number (NaN), false = 0 otherwise - usage example: isNaN(x)",
            syntax: "isNaN(x)"
        },
        ndig10: {
            description: "Number of digits in numeral system with base 10",
            syntax: "ndig10(x)"
        },
        nfact: {
            description: "Prime decomposition - number of distinct prime factors",
            syntax: "nfact(x)"
        },
        arcsec: {
            description: "Inverse trigonometric secant",
            syntax: "arcsec(x)"
        },
        arccsc: {
            description: "Inverse trigonometric cosecant",
            syntax: "arccsc(x)"
        },
        Gamma: {
            description: "Gamma special function Γ(s)",
            syntax: "Gamma(x)"
        },
        LambW0: {
            description: "Lambert-W special function, principal branch 0, also called the omega function or product logarithm",
            syntax: "LambW0(x)"
        },
        LambW1: {
            description: "Lambert-W special function, branch -1, also called the omega function or product logarithm",
            syntax: "LambW1(x)"
        },
        sgnGamma: {
            description: "Signum of Gamma special function, Γ(s)",
            syntax: "sgnGamma(x)"
        },
        logGamma: {
            description: "Log Gamma special function, lnΓ(s)",
            syntax: "logGamma(x)"
        },
        diGamma: {
            description: "Digamma function as the logarithmic derivative of the Gamma special function, ψ(x)",
            syntax: "diGamma(x)"
        },
        log: {
            description: "Logarithm function",
            syntax: "log(a, b)"
        },
        mod: {
            description: "Modulo function",
            syntax: "mod(a, b)"
        },
        C: {
            description: "Binomial coefficient function, number of k-combinations that can be drawn from n-elements set",
            syntax: "C(n, k)"
        },
        nCk: {
            description: "Binomial coefficient function, number of k-combinations that can be drawn from n-elements set",
            syntax: "nCk(n,k)"
        },
        Bern: {
            description: "Bernoulli numbers",
            syntax: "Bern(m, n)"
        },
        Stirl1: {
            description: "Stirling numbers of the first kind",
            syntax: "Stirl1(n, k)"
        },
        Stirl2: {
            description: "Stirling numbers of the second kind",
            syntax: "Stirl2(n, k)"
        },
        Worp: {
            description: "Worpitzky number",
            syntax: "Worp(n, k)"
        },
        Euler: {
            description: "Euler number",
            syntax: "Euler(n, k)"
        },
        KDelta: {
            description: "Kronecker delta",
            syntax: "KDelta(i, j)"
        },
        EulerPol: {
            description: "EulerPol",
            syntax: "EulerPol"
        },
        Harm: {
            description: "Harmonic number",
            syntax: "Harm(x, n)"
        },
        round: {
            description: "Half-up rounding, usage examples: round(2.2, 0) = 2, round(2.6, 0) = 3, round(2.66,1) = 2.7",
            syntax: "round(x, n)"
        },
        ndig: {
            description: "Number of digits representing the number in numeral system with given base",
            syntax: "ndig(number, base)"
        },
        dig10: {
            description: "Digit at position 1 ... n (left -&gt; right) or 0 ... -(n-1) (right -&gt; left) - base 10 numeral system",
            syntax: "dig10(num, pos)"
        },
        factval: {
            description: "Prime decomposition - factor value at position between 1 ... nfact(n) - ascending order by factor value",
            syntax: "factval(number, factorid)"
        },
        factexp: {
            description: "Prime decomposition - factor exponent / multiplicity at position between 1 ... nfact(n) - ascending order by factor value",
            syntax: "factexp(number, factorid)"
        },
        root: {
            description: "N-th order root of a number",
            syntax: "root(rootorder, number)"
        },
        GammaL: {
            description: "Lower incomplete gamma special function, γ(s,x)",
            syntax: "GammaL(s,x)"
        },
        GammaU: {
            description: "Upper incomplete Gamma special function, Γ(s,x)",
            syntax: "GammaU(s,x)"
        },
        GammaP: {
            description: "Lower regularized P gamma special function, P(s,x)",
            syntax: "GammaP(s,x)"
        },
        GammaRegL: {
            description: "Lower regularized P gamma special function, P(s,x)",
            syntax: "GammaRegL(s,x)"
        },
        GammaQ: {
            description: "Upper regularized Q Gamma special function, Q(s,x)",
            syntax: "GammaQ(s,x)"
        },
        GammaRegU: {
            description: "Upper regularized Q Gamma special function, Q(s,x)",
            syntax: "GammaRegU(s,x)"
        },
        nPk: {
            description: "Number of k-permutations that can be drawn from n-elements set",
            syntax: "nPk(n,k)"
        },
        Beta: {
            description: "The Beta special function B(x,y), also called the Euler integral of the first kind",
            syntax: "Beta(x,y)"
        },
        logBeta: {
            description: "The Log Beta special function ln B(x,y), also called the Log Euler integral of the first kind, ln B(x,y)",
            syntax: "logBeta(x,y)"
        },
        if: {
            description: "If function",
            syntax: "if( cond, expr-if-true, expr-if-false )"
        },
        chi: {
            description: "Characteristic function for x in (a,b)",
            syntax: "chi(x, a, b)"
        },
        CHi: {
            description: "Characteristic function for x in [a,b]",
            syntax: "CHi(x, a, b)"
        },
        Chi: {
            description: "Characteristic function for x in [a,b)",
            syntax: "Chi(x, a, b)"
        },
        cHi: {
            description: "Characteristic function for x in (a,b]",
            syntax: "cHi(x, a, b)"
        },
        pUni: {
            description: "Probability distribution function - Uniform continuous distribution U(a,b)",
            syntax: "pUni(x, a, b)"
        },
        cUni: {
            description: "Cumulative distribution function - Uniform continuous distribution U(a,b)",
            syntax: "cUni(x, a, b)"
        },
        qUni: {
            description: "Quantile function (inverse cumulative distribution function) - Uniform continuous distribution U(a,b)",
            syntax: "qUni(q, a, b)"
        },
        pNor: {
            description: "Probability distribution function - Normal distribution N(m,s)",
            syntax: "pNor(x, mean, stdv)"
        },
        cNor: {
            description: "Cumulative distribution function - Normal distribution N(m,s)",
            syntax: "cNor(x, mean, stdv)"
        },
        qNor: {
            description: "Quantile function (inverse cumulative distribution function)",
            syntax: "qNor(q, mean, stdv)"
        },
        dig: {
            description: "Digit at position 1 ... n (left -&gt; right) or 0 ... -(n-1) (right -&gt; left) - numeral system with given base",
            syntax: "dig(num, pos, base)"
        },
        BetaInc: {
            description: "The incomplete beta special function B(x; a, b), also called the incomplete Euler integral of the first kind",
            syntax: "BetaInc(x,a,b)"
        },
        BetaI: {
            description: "The regularized incomplete beta (or regularized beta) special function I(x; a, b), also called the regularized incomplete Euler integral of the first kind",
            syntax: "BetaI(x,a,b)"
        },
        BetaReg: {
            description: "The regularized incomplete beta (or regularized beta) special function I(x; a, b), also called the regularized incomplete Euler integral of the first kind",
            syntax: "BetaReg(x,a,b)"
        },
        iff: {
            description: "If function",
            syntax: "iff( cond-1, expr-1; ... ; cond-n, expr-n )"
        },
        min: {
            description: "Minimum function",
            syntax: "min(a1, ..., an)"
        },
        max: {
            description: "Maximum function",
            syntax: "max(a1, ..., an)"
        },
        ConFrac: {
            description: "Continued fraction",
            syntax: "ConFrac(a1, ..., an)"
        },
        ConPol: {
            description: "Continued polynomial",
            syntax: "ConPol(a1, ..., an)"
        },
        gcd: {
            description: "Greatest common divisor",
            syntax: "gcd(a1, ..., an)"
        },
        lcm: {
            description: "Least common multiple",
            syntax: "lcm(a1, ..., an)"
        },
        add: {
            description: "Summation operator",
            syntax: "add(a1, ..., an)"
        },
        multi: {
            description: "Multiplication",
            syntax: "multi(a1, ..., an)"
        },
        mean: {
            description: "Mean / average value",
            syntax: "mean(a1, ..., an)"
        },
        var: {
            description: "Bias-corrected sample variance",
            syntax: "var(a1, ..., an)"
        },
        std: {
            description: "Bias-corrected sample standard deviation",
            syntax: "std(a1, ..., an)"
        },
        coalesce: {
            description: "Returns the first non-NaN value",
            syntax: "coalesce(a1, ..., an)"
        },
        or: {
            description: "Logical disjunction (OR) - variadic",
            syntax: "or(a1, ..., an)"
        },
        and: {
            description: "Logical conjunction (AND) - variadic",
            syntax: "and(a1, ..., an)"
        },
        xor: {
            description: "Exclusive or (XOR) - variadic",
            syntax: "xor(a1, ..., an)"
        },
        argmin: {
            description: "Arguments / indices of the minima",
            syntax: "argmin(a1, ..., an)"
        },
        argmax: {
            description: "Arguments / indices of the maxima",
            syntax: "argmax(a1, ..., an)"
        },
        med: {
            description: "The sample median",
            syntax: "med(a1, ..., an)"
        },
        mode: {
            description: "Mode - the value that appears most often",
            syntax: "mode(a1, ..., an)"
        },
        base: {
            description: "Returns number in given numeral system base represented by list of digits",
            syntax: "base(b, d1, ..., dn)"
        },
        ndist: {
            description: "Number of distinct values",
            syntax: "ndist(v1, ..., vn)"
        },
        sum: {
            description: "Summation operator - SIGMA",
            syntax: "sum( i, from, to, expr , &lt;by&gt; )"
        },
        prod: {
            description: "Product operator - PI",
            syntax: "prod( i, from, to, expr , &lt;by&gt; )"
        },
        int: {
            description: "Definite integral operator",
            syntax: "int( expr, arg, from, to )"
        },
        der: {
            description: "Derivative operator",
            syntax: "der( expr, arg, &lt;point&gt; )"
        },
        "der-": {
            description: "Left derivative operator",
            syntax: "der-( expr, arg, &lt;point&gt; )"
        },
        "der+": {
            description: "Right derivative operator",
            syntax: "der+( expr, arg, &lt;point&gt; )"
        },
        dern: {
            description: "n-th derivative operator",
            syntax: "dern( expr, n, arg )"
        },
        diff: {
            description: "Forward difference operator",
            syntax: "diff( expr, arg, &lt;delta&gt; )"
        },
        difb: {
            description: "Backward difference operator",
            syntax: "difb( expr, arg, &lt;delta&gt; )"
        },
        avg: {
            description: "Average operator",
            syntax: "avg( i, from, to, expr , &lt;by&gt; )"
        },
        vari: {
            description: "Bias-corrected sample variance operator",
            syntax: "vari( i, from, to, expr , &lt;by&gt; )"
        },
        stdi: {
            description: "Bias-corrected sample standard deviation operator",
            syntax: "stdi( i, from, to, expr , &lt;by&gt; )"
        },
        mini: {
            description: "Minimum value",
            syntax: "mini( i, from, to, expr , &lt;by&gt; )"
        },
        maxi: {
            description: "Maximum value",
            syntax: "maxi( i, from, to, expr , &lt;by&gt; )"
        },
        solve: {
            description: "f(x) = 0 equation solving, function root finding",
            syntax: "solve( expr, arg, from, to )"
        },
        pi: {
            description: "Pi, Archimedes' constant or Ludolph's number",
            syntax: "pi"
        },
        e: {
            description: "Napier's constant, or Euler's number, base of Natural logarithm",
            syntax: "e"
        },
        "[gam]": {
            description: "Euler-Mascheroni constant",
            syntax: "[gam]"
        },
        "[phi]": {
            description: "Golden ratio",
            syntax: "[phi]"
        },
        "[PN]": {
            description: "Plastic constant",
            syntax: "[PN]"
        },
        "[B*]": {
            description: "Embree-Trefethen constant",
            syntax: "[B*]"
        },
        "[F'd]": {
            description: "Feigenbaum constant alfa",
            syntax: "[F'd]"
        },
        "[F'a]": {
            description: "Feigenbaum constant delta",
            syntax: "[F'a]"
        },
        "[C2]": {
            description: "Twin prime constant",
            syntax: "[C2]"
        },
        "[M1]": {
            description: "Meissel-Mertens constant",
            syntax: "[M1]"
        },
        "[B2]": {
            description: "Brun's constant for twin primes",
            syntax: "[B2]"
        },
        "[B4]": {
            description: "Brun's constant for prime quadruplets",
            syntax: "[B4]"
        },
        "[BN'L]": {
            description: "de Bruijn-Newman constant",
            syntax: "[BN'L]"
        },
        "[Kat]": {
            description: "Catalan's constant",
            syntax: "[Kat]"
        },
        "[K*]": {
            description: "Landau-Ramanujan constant",
            syntax: "[K*]"
        },
        "[K.]": {
            description: "Viswanath's constant",
            syntax: "[K.]"
        },
        "[B'L]": {
            description: "Legendre's constant",
            syntax: "[B'L]"
        },
        "[RS'm]": {
            description: "Ramanujan-Soldner constant",
            syntax: "[RS'm]"
        },
        "[EB'e]": {
            description: "Erdos-Borwein constant",
            syntax: "[EB'e]"
        },
        "[Bern]": {
            description: "Bernstein's constant",
            syntax: "[Bern]"
        },
        "[GKW'l]": {
            description: "Gauss-Kuzmin-Wirsing constant",
            syntax: "[GKW'l]"
        },
        "[HSM's]": {
            description: "Hafner-Sarnak-McCurley constant",
            syntax: "[HSM's]"
        },
        "[lm]": {
            description: "Golomb-Dickman constant",
            syntax: "[lm]"
        },
        "[Cah]": {
            description: "Cahen's constant",
            syntax: "[Cah]"
        },
        "[Ll]": {
            description: "Laplace limit",
            syntax: "[Ll]"
        },
        "[AG]": {
            description: "Alladi-Grinstead constant",
            syntax: "[AG]"
        },
        "[L*]": {
            description: "Lengyel's constant",
            syntax: "[L*]"
        },
        "[L.]": {
            description: "Levy's constant",
            syntax: "[L.]"
        },
        "[Dz3]": {
            description: "Apery's constant",
            syntax: "[Dz3]"
        },
        "[A3n]": {
            description: "Mills' constant",
            syntax: "[A3n]"
        },
        "[Bh]": {
            description: "Backhouse's constant",
            syntax: "[Bh]"
        },
        "[Pt]": {
            description: "Porter's constant",
            syntax: "[Pt]"
        },
        "[L2]": {
            description: "Lieb's square ice constant",
            syntax: "[L2]"
        },
        "[Nv]": {
            description: "Niven's constant",
            syntax: "[Nv]"
        },
        "[Ks]": {
            description: "Sierpinski's constant",
            syntax: "[Ks]"
        },
        "[Kh]": {
            description: "Khinchin's constant",
            syntax: "[Kh]"
        },
        "[FR]": {
            description: "Fransen-Robinson constant",
            syntax: "[FR]"
        },
        "[La]": {
            description: "Landau's constant",
            syntax: "[La]"
        },
        "[P2]": {
            description: "Parabolic constant",
            syntax: "[P2]"
        },
        "[Om]": {
            description: "Omega constant",
            syntax: "[Om]"
        },
        "[MRB]": {
            description: "MRB constant",
            syntax: "[MRB]"
        },
        "[li2]": {
            description: "li(2) - Logarithmic integral function at x=2",
            syntax: "[li2]"
        },
        "[EG]": {
            description: "Gompertz constant",
            syntax: "[EG]"
        },
        "[c]": {
            description: "&lt;Physical Constant&gt; Light speed in vacuum [m/s] (m=1, s=1)",
            syntax: "[c]"
        },
        "[G.]": {
            description: "&lt;Physical Constant&gt; Gravitational constant (m=1, kg=1, s=1)]",
            syntax: "[G.]"
        },
        "[g]": {
            description: "&lt;Physical Constant&gt; Gravitational acceleration on Earth [m/s^2] (m=1, s=1)",
            syntax: "[g]"
        },
        "[hP]": {
            description: "&lt;Physical Constant&gt; Planck constant (m=1, kg=1, s=1)",
            syntax: "[hP]"
        },
        "[h-]": {
            description: "&lt;Physical Constant&gt; Reduced Planck constant / Dirac constant (m=1, kg=1, s=1)]",
            syntax: "[h-]"
        },
        "[lP]": {
            description: "&lt;Physical Constant&gt; Planck length [m] (m=1)",
            syntax: "[lP]"
        },
        "[mP]": {
            description: "&lt;Physical Constant&gt; Planck mass [kg] (kg=1)",
            syntax: "[mP]"
        },
        "[tP]": {
            description: "&lt;Physical Constant&gt; Planck time [s] (s=1)",
            syntax: "[tP]"
        },
        "[ly]": {
            description: "&lt;Astronomical Constant&gt; Light year [m] (m=1)",
            syntax: "[ly]"
        },
        "[au]": {
            description: "&lt;Astronomical Constant&gt; Astronomical unit [m] (m=1)",
            syntax: "[au]"
        },
        "[pc]": {
            description: "&lt;Astronomical Constant&gt; Parsec [m] (m=1)",
            syntax: "[pc]"
        },
        "[kpc]": {
            description: "&lt;Astronomical Constant&gt; Kiloparsec [m] (m=1)",
            syntax: "[kpc]"
        },
        "[Earth-R-eq]": {
            description: "&lt;Astronomical Constant&gt; Earth equatorial radius [m] (m=1)",
            syntax: "[Earth-R-eq]"
        },
        "[Earth-R-po]": {
            description: "&lt;Astronomical Constant&gt; Earth polar radius [m] (m=1)",
            syntax: "[Earth-R-po]"
        },
        "[Earth-R]": {
            description: "&lt;Astronomical Constant&gt; Earth mean radius (m=1)",
            syntax: "[Earth-R]"
        },
        "[Earth-M]": {
            description: "&lt;Astronomical Constant&gt; Earth mass [kg] (kg=1)",
            syntax: "[Earth-M]"
        },
        "[Earth-D]": {
            description: "&lt;Astronomical Constant&gt; Earth-Sun distance - semi major axis [m] (m=1)",
            syntax: "[Earth-D]"
        },
        "[Moon-R]": {
            description: "&lt;Astronomical Constant&gt; Moon mean radius [m] (m=1)",
            syntax: "[Moon-R]"
        },
        "[Moon-M]": {
            description: "&lt;Astronomical Constant&gt; Moon mass [kg] (kg=1)",
            syntax: "[Moon-M]"
        },
        "[Moon-D]": {
            description: "&lt;Astronomical Constant&gt; Moon-Earth distance - semi major axis [m] (m=1)",
            syntax: "[Moon-D]"
        },
        "[Solar-R]": {
            description: "&lt;Astronomical Constant&gt; Solar mean radius [m] (m=1)",
            syntax: "[Solar-R]"
        },
        "[Solar-M]": {
            description: "&lt;Astronomical Constant&gt; Solar mass [kg] (kg=1)",
            syntax: "[Solar-M]"
        },
        "[Mercury-R]": {
            description: "&lt;Astronomical Constant&gt; Mercury mean radius [m] (m=1)",
            syntax: "[Mercury-R]"
        },
        "[Mercury-M]": {
            description: "&lt;Astronomical Constant&gt; Mercury mass [kg] (kg=1)",
            syntax: "[Mercury-M]"
        },
        "[Mercury-D]": {
            description: "&lt;Astronomical Constant&gt; Mercury-Sun distance - semi major axis [m] (m=1)",
            syntax: "[Mercury-D]"
        },
        "[Venus-R]": {
            description: "&lt;Astronomical Constant&gt; Venus mean radius [m] (m=1)",
            syntax: "[Venus-R]"
        },
        "[Venus-M]": {
            description: "&lt;Astronomical Constant&gt; Venus mass [kg] (kg=1)",
            syntax: "[Venus-M]"
        },
        "[Venus-D]": {
            description: "&lt;Astronomical Constant&gt; Venus-Sun distance - semi major axis [m] (m=1)",
            syntax: "[Venus-D]"
        },
        "[Mars-R]": {
            description: "&lt;Astronomical Constant&gt; Mars mean radius [m] (m=1)",
            syntax: "[Mars-R]"
        },
        "[Mars-M]": {
            description: "&lt;Astronomical Constant&gt; Mars mass [kg] (kg=1)",
            syntax: "[Mars-M]"
        },
        "[Mars-D]": {
            description: "&lt;Astronomical Constant&gt; Mars-Sun distance - semi major axis [m] (m=1)",
            syntax: "[Mars-D]"
        },
        "[Jupiter-R]": {
            description: "&lt;Astronomical Constant&gt; Jupiter mean radius [m] (m=1)",
            syntax: "[Jupiter-R]"
        },
        "[Jupiter-M]": {
            description: "&lt;Astronomical Constant&gt; Jupiter mass [kg] (kg=1)",
            syntax: "[Jupiter-M]"
        },
        "[Jupiter-D]": {
            description: "&lt;Astronomical Constant&gt; Jupiter-Sun distance - semi major axis [m] (m=1)",
            syntax: "[Jupiter-D]"
        },
        "[Saturn-R]": {
            description: "&lt;Astronomical Constant&gt; Saturn mean radius [m] (m=1)",
            syntax: "[Saturn-R]"
        },
        "[Saturn-M]": {
            description: "&lt;Astronomical Constant&gt; Saturn mass [kg] (kg=1)",
            syntax: "[Saturn-M]"
        },
        "[Saturn-D]": {
            description: "&lt;Astronomical Constant&gt; Saturn-Sun distance - semi major axis [m] (m=1)",
            syntax: "[Saturn-D]"
        },
        "[Uranus-R]": {
            description: "&lt;Astronomical Constant&gt; Uranus mean radius [m] (m=1)",
            syntax: "[Uranus-R]"
        },
        "[Uranus-M]": {
            description: "&lt;Astronomical Constant&gt; Uranus mass [kg] (kg=1)",
            syntax: "[Uranus-M]"
        },
        "[Uranus-D]": {
            description: "&lt;Astronomical Constant&gt; Uranus-Sun distance - semi major axis [m] (m=1)",
            syntax: "[Uranus-D]"
        },
        "[Neptune-R]": {
            description: "&lt;Astronomical Constant&gt; Neptune mean radius [m] (m=1)",
            syntax: "[Neptune-R]"
        },
        "[Neptune-M]": {
            description: "&lt;Astronomical Constant&gt; Neptune mass [kg] (kg=1)",
            syntax: "[Neptune-M]"
        },
        "[Neptune-D]": {
            description: "&lt;Astronomical Constant&gt; Neptune-Sun distance - semi major axis [m] (m=1)",
            syntax: "[Neptune-D]"
        },
        "[true]": {
            description: "Boolean True represented as double, [true] = 1",
            syntax: "[true]"
        },
        "[false]": {
            description: "Boolean False represented as double, [false] = 0",
            syntax: "[false]"
        },
        "[NaN]": {
            description: "Not-a-Number",
            syntax: "[NaN]"
        },
        "@~": {
            description: "Bitwise unary complement",
            syntax: "@~a"
        },
        "@&": {
            description: "Bitwise AND",
            syntax: "a @& b"
        },
        "@^": {
            description: "Bitwise exclusive OR",
            syntax: "a @^ b"
        },
        "@|": {
            description: "Bitwise inclusive OR",
            syntax: "a @| b"
        },
        "@&lt;&lt;": {
            description: "Signed left shift",
            syntax: "a @&lt;&lt; b"
        },
        "@&gt;&gt;": {
            description: "Signed right shift",
            syntax: "a @&gt;&gt; b"
        },
        "[%]": {
            description: "&lt;Ratio, Fraction&gt; Percentage = 0.01",
            syntax: "[%]"
        },
        "[%%]": {
            description: "&lt;Ratio, Fraction&gt; Promil, Per mille = 0.001",
            syntax: "[%%]"
        },
        "[Y]": {
            description: "&lt;Metric prefix&gt; Septillion / Yotta = 10^24",
            syntax: "[Y]"
        },
        "[sept]": {
            description: "&lt;Metric prefix&gt; Septillion / Yotta = 10^24",
            syntax: "[sept]"
        },
        "[Z]": {
            description: "&lt;Metric prefix&gt; Sextillion / Zetta = 10^21",
            syntax: "[Z]"
        },
        "[sext]": {
            description: "&lt;Metric prefix&gt; Sextillion / Zetta = 10^21",
            syntax: "[sext]"
        },
        "[E]": {
            description: "&lt;Metric prefix&gt; Quintillion / Exa = 10^18",
            syntax: "[E]"
        },
        "[quint]": {
            description: "&lt;Metric prefix&gt; Quintillion / Exa = 10^18",
            syntax: "[quint]"
        },
        "[P]": {
            description: "&lt;Metric prefix&gt; Quadrillion / Peta = 10^15",
            syntax: "[P]"
        },
        "[quad]": {
            description: "&lt;Metric prefix&gt; Quadrillion / Peta = 10^15",
            syntax: "[quad]"
        },
        "[T]": {
            description: "&lt;Metric prefix&gt; Trillion / Tera = 10^12",
            syntax: "[T]"
        },
        "[tril]": {
            description: "&lt;Metric prefix&gt; Trillion / Tera = 10^12",
            syntax: "[tril]"
        },
        "[G]": {
            description: "&lt;Metric prefix&gt; Billion / Giga = 10^9",
            syntax: "[G]"
        },
        "[bil]": {
            description: "&lt;Metric prefix&gt; Billion / Giga = 10^9",
            syntax: "[bil]"
        },
        "[M]": {
            description: "&lt;Metric prefix&gt; Million / Mega = 10^6",
            syntax: "[M]"
        },
        "[mil]": {
            description: "&lt;Metric prefix&gt; Million / Mega = 10^6",
            syntax: "[mil]"
        },
        "[k]": {
            description: "&lt;Metric prefix&gt; Thousand / Kilo = 10^3",
            syntax: "[k]"
        },
        "[th]": {
            description: "&lt;Metric prefix&gt; Thousand / Kilo = 10^3",
            syntax: "[th]"
        },
        "[hund]": {
            description: "&lt;Metric prefix&gt; Hundred / Hecto = 10^2",
            syntax: "[hund]"
        },
        "[hecto]": {
            description: "&lt;Metric prefix&gt; Hundred / Hecto = 10^2",
            syntax: "[hecto]"
        },
        "[ten]": {
            description: "&lt;Metric prefix&gt; Ten / Deca = 10",
            syntax: "[ten]"
        },
        "[deca]": {
            description: "&lt;Metric prefix&gt; Ten / Deca = 10",
            syntax: "[deca]"
        },
        "[deci]": {
            description: "&lt;Metric prefix&gt; Tenth / Deci = 0.1",
            syntax: "[deci]"
        },
        "[centi]": {
            description: "&lt;Metric prefix&gt; Hundredth / Centi = 0.01",
            syntax: "[centi]"
        },
        "[milli]": {
            description: "&lt;Metric prefix&gt; Thousandth / Milli = 0.001",
            syntax: "[milli]"
        },
        "[mic]": {
            description: "&lt;Metric prefix&gt; Millionth / Micro = 10^-6",
            syntax: "[mic]"
        },
        "[n]": {
            description: "&lt;Metric prefix&gt; Billionth / Nano = 10^-9",
            syntax: "[n]"
        },
        "[p]": {
            description: "&lt;Metric prefix&gt; Trillionth / Pico = 10^-12",
            syntax: "[p]"
        },
        "[f]": {
            description: "&lt;Metric prefix&gt; Quadrillionth / Femto = 10^-15",
            syntax: "[f]"
        },
        "[a]": {
            description: "&lt;Metric prefix&gt; Quintillionth / Atoo = 10^-18",
            syntax: "[a]"
        },
        "[z]": {
            description: "&lt;Metric prefix&gt; Sextillionth / Zepto = 10^-21",
            syntax: "[z]"
        },
        "[y]": {
            description: "&lt;Metric prefix&gt; Septillionth / Yocto = 10^-24",
            syntax: "[y]"
        },
        "[m]": {
            description: "&lt;Unit of length&gt; Metre / Meter (m=1)",
            syntax: "[m]"
        },
        "[km]": {
            description: "&lt;Unit of length&gt; Kilometre / Kilometer (m=1)",
            syntax: "[km]"
        },
        "[cm]": {
            description: "&lt;Unit of length&gt; Centimetre / Centimeter (m=1)",
            syntax: "[cm]"
        },
        "[mm]": {
            description: "&lt;Unit of length&gt; Millimetre / Millimeter (m=1)",
            syntax: "[mm]"
        },
        "[inch]": {
            description: "&lt;Unit of length&gt; Inch (m=1)",
            syntax: "[inch]"
        },
        "[yd]": {
            description: "&lt;Unit of length&gt; Yard (m=1)",
            syntax: "[yd]"
        },
        "[ft]": {
            description: "&lt;Unit of length&gt; Feet (m=1)",
            syntax: "[ft]"
        },
        "[mile]": {
            description: "&lt;Unit of length&gt; Mile (m=1)",
            syntax: "[mile]"
        },
        "[nmi]": {
            description: "&lt;Unit of length&gt; Nautical mile (m=1)",
            syntax: "[nmi]"
        },
        "[m2]": {
            description: "&lt;Unit of area&gt; Square metre / Square meter (m=1)",
            syntax: "[m2]"
        },
        "[cm2]": {
            description: "&lt;Unit of area&gt; Square centimetre / Square centimeter (m=1)",
            syntax: "[cm2]"
        },
        "[mm2]": {
            description: "&lt;Unit of area&gt; Square millimetre / Square millimeter (m=1)",
            syntax: "[mm2]"
        },
        "[are]": {
            description: "&lt;Unit of area&gt; Are (m=1)",
            syntax: "[are]"
        },
        "[ha]": {
            description: "&lt;Unit of area&gt; Hectare (m=1)",
            syntax: "[ha]"
        },
        "[acre]": {
            description: "&lt;Unit of area&gt; Acre (m=1)",
            syntax: "[acre]"
        },
        "[km2]": {
            description: "&lt;Unit of area&gt; Square kilometre / Square kilometer (m=1)",
            syntax: "[km2]"
        },
        "[mm3]": {
            description: "&lt;Unit of volume&gt; Cubic millimetre / Cubic millimeter (m=1)",
            syntax: "[mm3]"
        },
        "[cm3]": {
            description: "&lt;Unit of volume&gt; Cubic centimetre / Cubic centimeter (m=1)",
            syntax: "[cm3]"
        },
        "[m3]": {
            description: "&lt;Unit of volume&gt; Cubic metre / Cubic meter (m=1)",
            syntax: "[m3]"
        },
        "[km3]": {
            description: "&lt;Unit of volume&gt; Cubic kilometre / Cubic kilometer (m=1)",
            syntax: "[km3]"
        },
        "[ml]": {
            description: "&lt;Unit of volume&gt; Millilitre / Milliliter (m=1)",
            syntax: "[ml]"
        },
        "[l]": {
            description: "&lt;Unit of volume&gt; Litre / Liter (m=1)",
            syntax: "[l]"
        },
        "[gall]": {
            description: "&lt;Unit of volume&gt; Gallon (m=1)",
            syntax: "[gall]"
        },
        "[pint]": {
            description: "&lt;Unit of volume&gt; Pint (m=1)",
            syntax: "[pint]"
        },
        "[s]": {
            description: "&lt;Unit of time&gt; Second (s=1)",
            syntax: "[s]"
        },
        "[ms]": {
            description: "&lt;Unit of time&gt; Millisecond (s=1)",
            syntax: "[ms]"
        },
        "[min]": {
            description: "&lt;Unit of time&gt; Minute (s=1)",
            syntax: "[min]"
        },
        "[h]": {
            description: "&lt;Unit of time&gt; Hour (s=1)",
            syntax: "[h]"
        },
        "[day]": {
            description: "&lt;Unit of time&gt; Day (s=1)",
            syntax: "[day]"
        },
        "[week]": {
            description: "&lt;Unit of time&gt; Week (s=1)",
            syntax: "[week]"
        },
        "[yearj]": {
            description: "&lt;Unit of time&gt; Julian year = 365.25 days (s=1)",
            syntax: "[yearj]"
        },
        "[kg]": {
            description: "&lt;Unit of mass&gt; Kilogram (kg=1)",
            syntax: "[kg]"
        },
        "[gr]": {
            description: "&lt;Unit of mass&gt; Gram (kg=1)",
            syntax: "[gr]"
        },
        "[mg]": {
            description: "&lt;Unit of mass&gt; Milligram (kg=1)",
            syntax: "[mg]"
        },
        "[dag]": {
            description: "&lt;Unit of mass&gt; Decagram (kg=1)",
            syntax: "[dag]"
        },
        "[t]": {
            description: "&lt;Unit of mass&gt; Tonne (kg=1)",
            syntax: "[t]"
        },
        "[oz]": {
            description: "&lt;Unit of mass&gt; Ounce (kg=1)",
            syntax: "[oz]"
        },
        "[lb]": {
            description: "&lt;Unit of mass&gt; Pound (kg=1)",
            syntax: "[lb]"
        },
        "[b]": {
            description: "&lt;Unit of information&gt; Bit (bit=1)",
            syntax: "[b]"
        },
        "[kb]": {
            description: "&lt;Unit of information&gt; Kilobit (bit=1)",
            syntax: "[kb]"
        },
        "[Mb]": {
            description: "&lt;Unit of information&gt; Megabit (bit=1)",
            syntax: "[Mb]"
        },
        "[Gb]": {
            description: "&lt;Unit of information&gt; Gigabit (bit=1)",
            syntax: "[Gb]"
        },
        "[Tb]": {
            description: "&lt;Unit of information&gt; Terabit (bit=1)",
            syntax: "[Tb]"
        },
        "[Pb]": {
            description: "&lt;Unit of information&gt; Petabit (bit=1)",
            syntax: "[Pb]"
        },
        "[Eb]": {
            description: "&lt;Unit of information&gt; Exabit (bit=1)",
            syntax: "[Eb]"
        },
        "[Zb]": {
            description: "&lt;Unit of information&gt; Zettabit (bit=1)",
            syntax: "[Zb]"
        },
        "[Yb]": {
            description: "&lt;Unit of information&gt; Yottabit (bit=1)",
            syntax: "[Yb]"
        },
        "[B]": {
            description: "&lt;Unit of information&gt; Byte (bit=1)",
            syntax: "[B]"
        },
        "[kB]": {
            description: "&lt;Unit of information&gt; Kilobyte (bit=1)",
            syntax: "[kB]"
        },
        "[MB]": {
            description: "&lt;Unit of information&gt; Megabyte (bit=1)",
            syntax: "[MB]"
        },
        "[GB]": {
            description: "&lt;Unit of information&gt; Gigabyte (bit=1)",
            syntax: "[GB]"
        },
        "[TB]": {
            description: "&lt;Unit of information&gt; Terabyte (bit=1)",
            syntax: "[TB]"
        },
        "[PB]": {
            description: "&lt;Unit of information&gt; Petabyte (bit=1)",
            syntax: "[PB]"
        },
        "[EB]": {
            description: "&lt;Unit of information&gt; Exabyte (bit=1)",
            syntax: "[EB]"
        },
        "[ZB]": {
            description: "&lt;Unit of information&gt; Zettabyte (bit=1)",
            syntax: "[ZB]"
        },
        "[YB]": {
            description: "&lt;Unit of information&gt; Yottabyte (bit=1)",
            syntax: "[YB]"
        },
        "[J]": {
            description: "&lt;Unit of energy&gt; Joule (m=1, kg=1, s=1)",
            syntax: "[J]"
        },
        "[eV]": {
            description: "&lt;Unit of energy&gt; Electronovolt (m=1, kg=1, s=1)",
            syntax: "[eV]"
        },
        "[keV]": {
            description: "&lt;Unit of energy&gt; Kiloelectronovolt (m=1, kg=1, s=1)",
            syntax: "[keV]"
        },
        "[MeV]": {
            description: "&lt;Unit of energy&gt; Megaelectronovolt (m=1, kg=1, s=1)",
            syntax: "[MeV]"
        },
        "[GeV]": {
            description: "&lt;Unit of energy&gt; Gigaelectronovolt (m=1, kg=1, s=1)",
            syntax: "[GeV]"
        },
        "[TeV]": {
            description: "&lt;Unit of energy&gt; Teraelectronovolt (m=1, kg=1, s=1)",
            syntax: "[TeV]"
        },
        "[m/s]": {
            description: "&lt;Unit of speed&gt; Metre / Meter per second (m=1, s=1)",
            syntax: "[m/s]"
        },
        "[km/h]": {
            description: "&lt;Unit of speed&gt; Kilometre / Kilometer per hour (m=1, s=1)",
            syntax: "[km/h]"
        },
        "[mi/h]": {
            description: "&lt;Unit of speed&gt; Mile per hour (m=1, s=1)",
            syntax: "[mi/h]"
        },
        "[knot]": {
            description: "&lt;Unit of speed&gt; Knot (m=1, s=1)",
            syntax: "[knot]"
        },
        "[m/s2]": {
            description: "&lt;Unit of acceleration&gt; Metre / Meter per square second (m=1, s=1)",
            syntax: "[m/s2]"
        },
        "[km/h2]": {
            description: "&lt;Unit of acceleration&gt; Kilometre / Kilometer per square hour (m=1, s=1)",
            syntax: "[km/h2]"
        },
        "[mi/h2]": {
            description: "&lt;Unit of acceleration&gt; Mile per square hour (m=1, s=1)",
            syntax: "[mi/h2]"
        },
        "[rad]": {
            description: "&lt;Unit of angle&gt; Radian (rad=1)",
            syntax: "[rad]"
        },
        "[deg]": {
            description: "&lt;Unit of angle&gt; Degree of arc (rad=1)",
            syntax: "[deg]"
        },
        "[']": {
            description: "&lt;Unit of angle&gt; Minute of arc (rad=1)",
            syntax: "[']"
        },
        "['']": {
            description: "&lt;Unit of angle&gt; Second of arc (rad=1)",
            syntax: "['']"
        }
    }, l = Object.keys(f);
    function d() {
        var t = '            <div style="overflow: auto; max-width: 100%; height: 66vh">                 <div class="list-group" style="overflow: hidden;">                     <div class="list-group-item" style="text-align: left;">                       <h4 class="list-group-item-heading">Welcome to Parameterized questions!</h4>                        <p class="list-group-item-text">                            This feature enables users to use parameters in questions                        </p>                    </div>                    <div  class="list-group-item" style="text-align: left;">                       <h4 class="list-group-item-heading">Where should parameters be provided?</h4>                        <p class="list-group-item-text">                            Parameters can be provided in the Question Text, Question Intro and Multiple-Choice Options                        </p>                    </div>                    <div  class="list-group-item" style="text-align: left;">                       <h4 class="list-group-item-heading">How are parameters declared?</h4>                        <p class="list-group-item-text">                            Parameters can be declared by typing a variable in-between double @@ characters or double braces. They cannot contain                            any special characters or spaces. They should always begin with an alphabet and can contain only alphanumeric characters.                            Example: {{v1}}, @@v2@@, @@AB@@                        </p>                    </div>                    <div  class="list-group-item" style="text-align: left;">                       <h4 class="list-group-item-heading">How to provide values to parameters?</h4>                        <p class="list-group-item-text">                            <li>                                After typing parameters in the question text and other eligible components mentioned in the 2nd point,                                click on the button that says "Reload Variables"                            </li>                            <li>                                A table named "Variable Definitions" is generated with a list of parameters that you declared                            </li>                            <li>                                Each parameter takes 2 values called Precision and Expression                            </li>                            <li>                                Functions, constant values or simple mathematical expressions like a + b, a * b, a - b, a ^ b,                                 etc., can be given to parameters and precision is used to decide the precision                                of the resultant value of that parameter                            </li>                        </p>                    </div>                    <div  class="list-group-item" style="text-align: left;">                       <h4 class="list-group-item-heading">What are expressions and how to use it?</h4>                        <p class="list-group-item-text">                            <li>                                The expression for a parameter takes in various types of built-in methods and constant values                            </li>                            <li>                                Available methods with their syntax information will be pop-up as you type                            </li>                        </p>                    </div>                    <div  class="list-group-item" style="text-align: left;">                       <h4 class="list-group-item-heading">Syntax checking and evaluating variable expressions</h4>                        <p class="list-group-item-text">                            <li>                                If the entered expression is valid, <i class="fa fa-check" style="color: green;"></i> appears for every variable.                             </li>                            <li>                                If the expression is invalid, <i class="fa fa-close" style="color: red;"></i> appears with the reason of why it is invalid                            </li>                        </p>                    </div>                    <div  class="list-group-item" style="text-align: left;">                       <h4 class="list-group-item-heading">Parameterized Regular Expressions</h4>                        <p class="list-group-item-text">                            <li>                                For parameterized regular expressions defined under Expected Solution of Question Type <strong>Fill in the Blanks</strong>                                 and blank type <strong>Regular Expression</strong>, the parameterized variables are first substituted according to the                                 user given definition.                            </li>                            <li>                                The regular expression is then compiled and used to validate the user answer.                            </li>                            <li>                                Please use escape character <strong>\\</strong> preceding every special characters (for example <strong>* . + ?</strong>)                                 to match them as is(string literals) in regular expressions.                            </li>                        </p>                    </div>                    <div  class="list-group-item" style="text-align: left;">                       <h4 class="list-group-item-heading">Want a list of methods available for writing variable expressions?                        Click <button class="btn btn-link ct_qt_methods" style="padding-left: 0"><h4 class="mb-0">here</h4></button></h4>                    </div>                </div>             </div>';
        window.Swal ? Swal.fire({
            title: "Parameterized Questions",
            icon: "info",
            width: 700,
            height: "auto",
            html: t
        }) : swal({
            content: $(t)[0],
            className: "w-75"
        }), $(".ct_qt_methods").off("click", b).on("click", b);
    }
    function b() {
        var e = '<div style="overflow-y: auto; max-height: 50vh;"><dl style="text-align: justify;">';
        l.forEach(function(t) {
            e = e + "<dt>" + t + "</dt><dd><em>" + f[t].description + "</em></dd><dd><code>" + f[t].syntax + "</code></dd>";
        }), e += "</dl></div>";
        window.Swal ? Swal.fire({
            footer: "<b><span class='text-danger'>NOTE: These function names and constants cannot be used as parameter names</span></b>",
            width: 700,
            height: "auto",
            html: e
        }) : swal({
            content: $(e)[0],
            className: "w-50"
        });
    }
    function v() {
        x.empty();
        var n, p = '<table style="width: 100%; text-align: center;" class="table table-striped table-bordered qtBox" ' + (y ? "" : 'title="This question is not editable"') + '><thead><th style="text-align: center;">#</th><th data-orderable="false" style="text-align: center;">Variable</th><th data-orderable="false" style="text-align: center;">Definition&nbsp;<i class="fa fa-question-circle text-info ct_qt_sweetFunc" aria-hidden="true"></i></th><th data-orderable="false" style="text-align: center;">Precision&nbsp;<i class="fa fa-question-circle text-info ct_qt_precision_help" aria-hidden="true"></i></th><th data-orderable="false" style="text-align: center;"> </th></thead><tbody>', u = (n = {}, 
        Object.keys(h).forEach(function(t, e) {
            h[t].order ? n[h[t].order] = t : n[e + 1] = t;
        }), n), m = Object.keys(u).sort(function(t, e) {
            return t - e;
        }), f = Object.values(h).filter(function(t) {
            return t.intro;
        }).length;
        m.forEach(function(t, e) {
            var t = u[t], n = h[t].expression, i = parseInt(h[t].precision, 10) || 0, a = h[t].isRef || !1, o = void 0 === h[t].editable || h[t].editable, o = y && !a && o ? "" : "readonly", r = o ? "disabled" : "", s = o ? "disabledInput" : "", c = a ? "This variable was imported from another question and can be edited as part of that question" : "", l = "", d = "", a = (y && !a && 0 !== e && e !== f || (l = "disabled"), 
            y && !a && e !== m.length - 1 && e !== f - 1 || (d = "disabled"), '<tr class="ct_qt_param_variable_tr" data-var="' + t + '"><td>' + (e + 1) + '</td><td class="ct_qt_variable" data-index="' + e + '">' + t + '</td><td><input class="ct_qt_expression ' + s + '" style="width: 75%;" type="text" data-index="' + e + '" data-val="' + t + '" title="' + c + '" placeholder="Enter an expression here" data-toggle="popover" data-placement=' + (window.innerWidth < 1740 ? "top" : "right") + (null != n ? ' value="' + n + '" ' : "") + o + " " + r + ' /><br><small class="ct_qt_exp_info"></small></td><td class=""><select class="ct_qt_precision w-75 form-control form-control-sm ' + s + '" type="number" data-index="' + e + '" data-val="' + t + '" title="' + c + '" ' + r + ">" + g.map(function(t) {
                return '<option value="' + t + '" ' + (i === t ? "selected" : "") + ">" + t + " sig. digits</option>";
            }).join("") + '</select></td><td class="td-center"><div class="btn-group btn-group-sm ml-2 mb-2"><button class="btn btn-sm btn-outline-dark ct-icon-btn dtMoveUp"' + l + ' title="Move up"><i class="fa fa-arrow-up" aria-hidden="true"></i></button><button class="btn btn-sm btn-outline-dark ct-icon-btn dtMoveDown"' + d + ' title="Move down"><i class="fa fa-arrow-down" aria-hidden="true"></i></button></div></td></tr>');
            p += a;
        }), p += "</tbody></table>", x.html(p), m.forEach(function(t, e) {
            t = u[t];
            x.find('.ct_qt_expression[data-index="' + e + '"]').val(h[t].expression || "");
        }), i && (x.find(".ct_qt_sweetFunc").off("click", b).on("click", b), x.find(".ct_qt_precision_help").off("click", C).on("click", C), 
        x.find(".ct_qt_precision").off("change", S).on("change", S), x.find(".ct_qt_expression").off("change", S).on("change", S).off("blur", w).on("blur", w).off("input", k).on("input", k)), 
        $(".dtMoveUp").click(function() {
            var t = $(this).closest("tr");
            t.prev().before(t), S(), v();
        }), $(".dtMoveDown").click(function() {
            var t = $(this).closest("tr");
            t.next().after(t), S(), v();
        }), (e = x.find(".qtBox").DataTable({
            destroy: !0,
            responsive: !0,
            paging: !1,
            columnDefs: [ {
                width: "10%",
                targets: 0
            }, {
                width: "15%",
                targets: 1
            }, {
                width: "55%",
                targets: 2
            }, {
                width: "15%",
                targets: 2
            }, {
                width: "5%",
                targets: 2
            } ]
        })).on("order.dt search.dt", function() {
            e.column(0, {
                search: "applied",
                order: "applied"
            }).nodes().each(function(t, e) {
                t.innerHTML = e + 1;
            });
        }).draw(), e.on("draw.dt", function() {
            S();
        }).draw();
    }
    function p(t, i) {
        return t.filter(function(t) {
            var e = t, n = i;
            if (e = t.split("", n.length).join(""), n === e) return n;
        }).sort(function(t, e) {
            return t.length - e.length;
        });
    }
    function w() {
        $(this).popover("hide");
    }
    function k(t) {
        (a = " " !== t.data ? !0 : a) || ($(this).value = "");
        var e, t = t.target.value && t.target.value.toLowerCase();
        (r = p(l, t)).length && (e = "", r.forEach(function(t) {
            e = e + "<b>" + t + "</b> : " + f[t].description + ", <strong>" + f[t].syntax + "</strong><br>";
        }), $(this).attr("data-content", "<small>" + e + "</small>"), $(this).attr("data-original-title", "Available Functions"), 
        $(this).attr("data-placement", "bottom"), $(this).popover({
            html: !0,
            title: "Available Functions"
        }), (t = $(".popover-content")).css("max-height", "80px"), t.css("overflow", "auto"), 
        $(this).popover("show")), this.value.length || (a = !1);
    }
    function C() {
        window.Swal ? Swal.fire({
            icon: "info",
            text: "Precision of the computed value described in terms of the number of significant digits after decimal symbol. For integer values, always choose 0."
        }) : swal({
            icon: "info",
            text: "Precision of the computed value described in terms of the number of significant digits after decimal symbol. For integer values, always choose 0."
        });
    }
    n && n.off("click", d).on("click", d);
    var u = "^(" + [ "pickRandomString", "stringLength", "stringEquals", "reverse", "concatenate", "nOccurrence", "join" ].join("|") + ")\\s*?(?=\\(.*\\))";
    function S() {
        x.find(".ct_qt_param_variable_tr").each(function(t) {
            var e = $(this).find(".ct_qt_variable").text(), t = (h[e].expression = $(this).find(".ct_qt_expression").val().trim() || "", 
            h[e].precision = $(this).find(".ct_qt_precision").val().trim() || 0, 
            h[e].order = t + 1, h[e].expression.match(u));
            $(this).find(".ct_qt_precision").prop("disabled", !(null == t || !t[1]) && "disabled");
        }), m(function(t) {
            var a;
            a = t, x.find(".ct_qt_param_variable_tr").each(function() {
                var t = $(this), e = t.data("var"), n = a[e], i = t.find(".ct_qt_expression"), t = t.find(".ct_qt_exp_info");
                i.attr("title", n.value), "success" === n.status ? (i.css("background-color", ""), 
                t.html("<i class='fa fa-check' style='font-style: italic;'></i>&nbsp;<small>" + o[e] + "</small>"), 
                t.css("color", "green")) : "error" === n.status && (i.css("background-color", "lightpink"), 
                t.html("<i class='fa fa-close' style='font-style: italic;'></i> " + n.value), 
                t.css("color", "red"));
            }), "function" == typeof c && c(JSON.parse(JSON.stringify(t)), P());
        });
    }
    function m(e) {
        var n, t;
        Object.keys(h).length ? (o = {}, n = {}, (t = $.ajax({
            type: "POST",
            url: "/secure/rest/a/vd/evd",
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
            },
            dataType: "json",
            data: JSON.stringify({
                definition: h
            })
        })).done(function(t) {
            n = t, Object.keys(h).forEach(function(t) {
                n[t] ? o[t] = n[t].value : (n[t] = {
                    status: "error",
                    value: "Invalid"
                }, delete o[t]);
            }), e && e(n);
        }), t.fail(function(t) {
            hideLoadingModal(), t.getResponseHeader("X-SessionTimeout") && openLoginDialog();
        })) : e && e({});
    }
    function _(e, n) {
        s.hasOwnProperty(e) && s[e].length && s[e].forEach(function(t) {
            -1 === n.indexOf(t) && ("intro" === e || e.match(/ref_.*/g) ? h[t].intro && delete h[t] : h[t].intro || delete h[t]);
        }), s[e] = n;
    }
    function P() {
        return JSON.parse(JSON.stringify(h));
    }
    return {
        destroy: function() {
            x.html(""), h = {}, o = {};
        },
        extractVarsAndCreateDef: function(t, e, n, i) {
            for (var a = /{{([a-zA-Z][a-zA-Z0-9]*)}}/g, o = /@@([a-zA-Z][a-zA-Z0-9]*)@@/g, r = a.exec(t = t || " ") || o.exec(t), s = new Set(), c = {}, l = Object.values(h).filter(function(t) {
                return t.intro;
            }).length, d = 0; r; ) {
                var p, u, m = r[1];
                f[m] ? (c[m] = {
                    status: "error",
                    msg: f[m].description
                }, r = a.exec(t) || o.exec(t)) : (s.add(m), u = x.find("tr[data-var=" + m + "] .ct_qt_expression"), 
                p = x.find("tr[data-var=" + m + "] .ct_qt_precision"), u = {
                    expression: u && void 0 !== u.val() ? u.val() : h[m] ? h[m].expression : 0,
                    precision: p && void 0 !== p.val() ? parseInt(p.val()) : h[m] ? parseInt(h[m].precision) : 0,
                    order: h[m] ? h[m].order : Object.keys(h).reduce(function(t, e) {
                        return Math.max(t, h[e].order);
                    }, 0) + 1
                }, h[m] || (h[m] = {}, e ? (Object.assign(u, e), Object.assign(h[m], u), 
                e.intro && (d++, h[m].order = l + d)) : Object.assign(h[m], u)), 
                !h[m].hasOwnProperty("editable") && e && e.hasOwnProperty("editable") && (h[m].editable = e.editable), 
                h.hasOwnProperty(m) || 0, r = a.exec(t) || o.exec(t));
            }
            return e && e.intro && 0 < d && Object.keys(h).forEach(function(t) {
                h[t].intro || (h[t].order = h[t].order + d);
            }), i ? s.forEach(function(t) {
                i.add(t);
            }) : _(n, Array.from(s)), c;
        },
        getSampleFromVariables: function(i, a) {
            return Object.keys(h).forEach(function(t) {
                var e = o[t], n = new RegExp("\\{\\{" + t + "\\}\\}", "g"), t = new RegExp("@@" + t + "@@", "g");
                void 0 !== e && (a && (e = e.replace(/([\[\]\^\$\{\}\(\)\+\*\?\=\!\|\\\.])/g, "\\$1")), 
                i = i.replace(n, e).replace(t, e));
            }), i;
        },
        getDefinition: P,
        renderTableFromDefinition: function(t) {
            t && (h = JSON.parse(JSON.stringify(t)), (i ? v : m)());
        },
        evaluateAllVariables: m,
        setDefinitionAndEvaluate: function(t, e) {
            t && (Object.assign(h, JSON.parse(JSON.stringify(t))), m(e));
        },
        renderTable: v,
        syncVars: _,
        clearParamVariables: function(t) {
            "intro" === t ? _(t, []) : "remote" === t && Object.keys(s).forEach(function(t) {
                t.match(/ref.*/g) && _(t, []);
            });
        }
    };
};

function renderAudioPlayer(t, i, e, n) {
    var a = n.maxPlaybackCountForAudio || 0, o = n.audioClicksMap || {}, r = n.qid || "", s = n.isTestPage || !1, c = n.isResultPage || !1, l = n.isPrintPage || !1, d = a, p = ((o[r] || {})[i] || {}).playCount || 0, u = a - p, m = !!s, f = c || !d && s, g = !1, y = $('<div class="ct-audio-player" data-playbacksRemaining="' + u + '" style="display:flex;margin-top: 10px;margin-bottom: 10px;justify-content: center;' + (l ? 'border: 3px solid rgba(0, 0, 0, 0.425)">' : '">') + '<div class="audio-card-container">' + (l ? '<div class="audio-first-container" ><div>Audio Playback Details</div><div><i class="fa fa-music" style="font-size: 25px" aria-hidden="true"></i></div></div>' : '<div class="audio-first-container"><button class="play-player fa fa-play audio-controls" style="cursor: pointer" role="button" aria-hidden="true"></button><button class="pause-player fa fa-pause audio-controls" style="cursor: pointer" role="button" aria-hidden="true"></button><button class="stop-player fa fa-stop audio-controls" style="cursor: pointer" role="button" aria-hidden="true"></button><div class="plyr-container" style="max-width: 90%;" ><audio id="music-player" class="music-player" src=' + e + "></audio></div></div>") + '<div class="audio-second-container"><div class="playback-counter audio-controls"></div></div></div></div>'), x = (t.replaceWith(y), 
    Plyr.setup(".music-player", {
        controls: [ "progress", "current-time", "mute", "volume", "settings" ],
        toggleInvert: !0,
        settings: [ "speed" ],
        disableContextMenu: !0,
        resetOnEnd: !0,
        keyboard: {
            focused: !1,
            global: !1
        },
        tooltips: {
            controls: !1,
            seek: !0
        },
        storage: {
            enabled: !0,
            key: "plyr"
        },
        speed: {
            selected: 1,
            options: [ .5, .75, 1, 1.5, 2 ]
        }
    })), h = 0, b = s && d;
    function v() {
        P(), x = y.find(".music-player")[0];
        var t = ((o[r] || {})[i] || {}).watchedDuration;
        if (t && s && !d && (x.currentTime = t), x.ontimeupdate = function() {
            if (x.currentTime === x.duration || !x.paused) {
                if (s && x.currentTime === x.duration) {
                    if (d) {
                        if (g) return;
                        _("audioPlaybackCompleted", x.currentTime), alertify.success("Audio playback is completed successfully and you have " + u + " playbacks remaining"), 
                        S();
                    }
                    d || (k(), P(), _("audioPlaybackCompleted", x.currentTime));
                }
                c && x.currentTime === x.duration && (k(), P());
            }
        }, b) {
            var e = !1;
            y[0].addEventListener("touchstart", function(t) {
                $(t.target.offsetParent).hasClass("plyr__progress") && (h = x.currentTime), 
                e = !(g = !0);
            }, !0), y[0].addEventListener("touchmove", function() {
                e = g = !0;
            }, !0), y[0].addEventListener("touchend", function(t) {
                g = !1, !e && $(t.target.offsetParent).hasClass("plyr__progress") && (x.currentTime = h);
            }, !0);
            try {
                navigator.mediaSession.setActionHandler("seekbackward", w), navigator.mediaSession.setActionHandler("seekforward", w), 
                navigator.mediaSession.setActionHandler("seekto", w), navigator.mediaSession.setActionHandler("play", w), 
                navigator.mediaSession.setActionHandler("pause", w), navigator.mediaSession.setActionHandler("previoustrack", w), 
                navigator.mediaSession.setActionHandler("nexttrack", w);
            } catch (t) {}
        }
        y.on({
            click: function(t) {
                $(t.target.offsetParent).hasClass("plyr__progress") ? h = x.currentTime : $(t.target).hasClass("play-player") ? x.paused && (d && u <= 0 && 0 === x.currentTime && !c ? swal({
                    icon: "error",
                    text: "Sorry, you have no playbacks remaining",
                    className: "ct-swal-center"
                }) : (!x.paused || 0 !== x.currentTime && x.currentTime !== x.duration || (d && u && (--u, 
                M()), _("audioPlayClicked")), x.paused && 0 !== x.currentTime && x.currentTime !== x.duration && _("audioResumeClicked", x.currentTime), 
                x.play(), f ? "block" === y.find(".play-player").css("display") ? (y.find(".play-player").css("display", "none"), 
                y.find(".pause-player").css("display", "block")) : (y.find(".play-player").css("display", "block"), 
                y.find(".pause-player").css("display", "none")) : "block" === y.find(".play-player").css("display") ? (y.find(".play-player").css("display", "none"), 
                y.find(".stop-player").css("display", "block")) : (y.find(".play-player").css("display", "block"), 
                y.find(".stop-player").css("display", "none")))) : $(t.target).hasClass("pause-player") ? k() : !$(t.target).hasClass("stop-player") || 0 === x.currentTime && x.paused || (b ? swal({
                    icon: "warning",
                    text: "Are you sure you want to stop the audio playback? You have only " + u + " playbacks remaining",
                    buttons: !0,
                    className: "ct-swal-center"
                }).then(function(t) {
                    t && (C(), alertify.success("Audio playback is completed successfully and you have " + u + " playbacks remaining"));
                }) : C());
            },
            mousedown: b ? function(t) {
                g = !0, $(t.target.offsetParent).hasClass("plyr__progress") && (h = x.currentTime);
            } : null,
            mouseup: b ? function() {
                g = !1;
            } : null,
            mouseleave: b ? function() {
                g = !1;
            } : null,
            change: b ? function(t) {
                $(t.target.offsetParent).hasClass("plyr__progress") && (x.currentTime = h, 
                h = 0);
            } : null
        });
    }
    function w() {
        _("audioControlManipulation"), alertify.error("Detected using audio controls from external sources");
    }
    function k() {
        x.pause(), y.find(".play-player").css("display", "block"), y.find(".pause-player").css("display", "none"), 
        x.paused && m && 0 !== x.currentTime && x.currentTime !== x.duration && _("audioPauseClicked", x.currentTime);
    }
    function C() {
        b && m && _("audioStopClicked", x.currentTime), S();
    }
    function S() {
        x.pause(), x.currentTime = 0, P();
    }
    function _(t, e) {
        var n;
        m && (n = {
            audioPlayerIndex: i.toString()
        }, d && (n.remainingPlaybacks = u.toString()), e && (n.watchTime = parseInt(e)), 
        "function" == typeof saveUserActionsInTest) && saveUserActionsInTest(t.toString(), n);
    }
    function P() {
        y.find(".play-player").css("display", "block"), y.find(".pause-player").css("display", "none"), 
        y.find(".stop-player").css("display", "none");
    }
    function M() {
        var t;
        y.data("playbacksRemaining", u), b && y.find(".playback-counter").html(d ? "<div class='ct-badge ct-badge-dark'> Playbacks remaining - <div class='ct-badge ct-badge-light' style='font-size: 12px'>" + u + "/" + d + "</div></div>" : ""), 
        (c || l) && (t = "<div class='ct-badge ct-badge-dark'>Played - <div class='ct-badge ct-badge-light' style='font-size: 12px'>" + p + " times</div></div>", 
        t += d && (c || l) ? "<div class='ct-badge ct-badge-dark'>Limit - <div class='ct-badge ct-badge-light' style='font-size: 12px'>" + d + " times</div></div> " : "", 
        y.find(".playback-counter").replaceWith(t));
    }
    l || v(), M();
}
//# sourceMappingURL=w.min.js.map