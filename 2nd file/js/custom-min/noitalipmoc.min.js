function displayExecutionResults(executionErrorDetailsNew) {
    eval("executionErrorDetails = " + executionErrorDetailsNew + ";"), showCompilationErrors([], "");
}

function checkCompilationErrors(selectedQuestionTypeText) {
    if (extraErrorDetails = [], executionErrorDetails = [], "Compilation Errors" == selectedQuestionTypeText) {
        var content = $("#compilationErrorEditor").data("editor").getSession().getValue(), errors = ($("#compilationProgressDiv").show(), 
        $("#compilationProgressDiv").show(), document.getElementById("javaCompilerApplet").compile(content, cq.className, !0), 
        eval(document.getElementById("javaCompilerApplet").getDiagnosticsAsJson().toString())), noExtraErrors = ($("#compilationProgressDiv").hide(), 
        !0);
        if (0 == errors.length) return clearCompilationErrors(), noExtraErrors;
        var endingTextIndex = errors[0].message.indexOf(" must be defined in its own file"), startingIndex = errors[0].message.indexOf("The public type "), className;
        errors[0].hasOwnProperty("message") && -1 != endingTextIndex && 0 == startingIndex && (className = errors[0].message.substring("The public type ".length, endingTextIndex), 
        errors[0].message = "The class name should be <c>" + cq.className + "</c> instead of <span style='color:red'>" + className + "</span>"), 
        l(errors[0]), showCompilationErrors(errors, content);
    }
    return !1;
}

function showCCompilationErrors(e, o, t) {
    clearCompilationErrors();
    var i = "";
    0 < e.length && (i += "<div style='max-height: 40vh; overflow-y: auto'><ul style='padding-left: 0;'><ol><h5 class='text-danger'>Compilation Errors</h5></ol>", 
    $.each(e, function(e, o) {
        if (o.lineNumber) {
            if ("method-info" == o.kind) return !0;
            var t, r;
            " error" == o.lineNumber ? i += "<ol><pre class='text-wrap'><b class='text-danger' >Error</b><br>" : " note" == o.lineNumber ? i += "<ol><pre class='text-wrap'><b class='text-danger' >Note</b><br>" : ("note" == (t = "error" == (t = o.kind) ? "Error" : t) && (t = "Note"), 
            r = "", o.hasOwnProperty("fileName") && "" != o.fileName && (r = o.fileName + ", "), 
            i = i + "<ol><pre class='text-wrap'><a class='text-danger' href='javascript:showErrorLine(" + o.lineNumber + ", " + o.position + ", " + o.columnNumber + ", " + o.startPosition + ", " + o.endPosition + ", " + o.startPositionLineNo + ", " + o.endPositionLineNo + ', "' + o.fileName + "\")'>" + t + " in " + r + "Line No : " + o.lineNumber + "</a><br>"), 
            "" != o.source && " error" == o.lineNumber ? i = i + "<span class='text-danger'>" + o.source + "</span><br>" : "" !== o.source && (i = i + "<a class='text-danger' href='javascript:showErrorLine(" + o.lineNumber + ", " + o.position + ", " + o.columnNumber + ", " + o.startPosition + ", " + o.endPosition + ", " + o.startPositionLineNo + ", " + o.endPositionLineNo + ', "' + o.fileName + "\")'>" + o.source + "</a><br>", 
            "" != o.pointerLine) && (i = i + o.pointerLine + "<br>"), i = i + "" + o.message, 
            o.hasOwnProperty("extraHint") && (i = i + "<br/><span style='color:#e78b07'>[<b>Hint</b>: " + o.extraHint + "]</span>"), 
            i += "</pre></ol>";
        }
    }), i += "</ul></div>", $("#myModal").scrollTo($("#" + getExecutionResultsParentDiv()), 200)), 
    getSelectedQuestionTypeText();
    $("#" + getExecutionResultsParentDiv(1)).html(i), 0 != getCTMode() && enableSubmit();
}

function showCompilationErrors(e, o, t) {
    clearCompilationErrors();
    var r = "";
    0 < e.length && (r += "<ul style='padding-left: 0;'><ol><h5 class='text-danger'>Compilation Errors</h5></ol>", 
    $.each(e, function(e, o) {
        if ("method-info" == o.kind) return !0;
        " error" == o.lineNumber ? r += "<ol ><b class='text-danger' >Error</b></ol>" : r = r + "<ol ><a class='text-danger' href='javascript:showErrorLine(" + o.lineNumber + ", " + o.position + ", " + o.columnNumber + ", " + o.startPosition + ", " + o.endPosition + ", " + o.startPositionLineNo + ", " + o.endPositionLineNo + ', "' + o.fileName + "\")'>" + o.kind + "  in line no : " + o.lineNumber + "</a></ol>", 
        r = (r = "" != o.source ? r + "<ol ><a class='text-danger' href='javascript:showErrorLine(" + o.lineNumber + ", " + o.position + ", " + o.columnNumber + ", " + o.startPosition + ", " + o.endPosition + ", " + o.startPositionLineNo + ", " + o.endPositionLineNo + ', "' + o.fileName + "\")'>" + o.source + "</a></ol>" : r) + "<ol><pre style='width:100%'>" + o.message + "</pre></ol>";
    }), r += "</ul>"), getSelectedQuestionTypeText();
    $("#" + getExecutionResultsParentDiv()).html(r), $("#myModal").scrollTo($("#" + getExecutionResultsParentDiv()), 200);
}

function clearCompilationErrors() {
    $("#compilationErrorsDiv").empty(), $("#copyWritingExecutionResultsDiv").empty(), 
    $("#testCodeOutputDiv").empty();
}

function getExecutionResultsParentDiv() {
    var e = getSelectedQuestionTypeText();
    return "Compilation Errors" == e || "Code Evaluation" == e ? 0 == getCTMode() && isUsingTestCode() ? "testCodeOutputDiv" : "compilationErrorsDiv" : "copyWritingExecutionResultsDiv";
}

function getSelectedQuestionTypeText() {
    return 0 == getCTMode() ? $("#questionType option:selected").text() : questionTypesMap[cq.questionType].questionType;
}
//# sourceMappingURL=noitalipmoc.min.js.map