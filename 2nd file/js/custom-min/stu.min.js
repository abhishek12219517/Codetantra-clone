var currentQIsInLateSubmissionMode = !1, currentQIsInLateSubmissionModeWithReason = !1;

function isSubmissionNotInTime() {
    var e, t;
    return null != jsonScheduleCourseObj && null != jsonCurrentScheduledCourseUnitTimeSettings && null != (e = jsonScheduleCourseObj.scheduledCourseUnitsMap[tid].timeSettings) && !(!e.hasOwnProperty("startTime") && !e.hasOwnProperty("endTime") || (t = new Date(), 
    !(new Date(e.endTime.$date) <= t)) || (e.hasOwnProperty("extraInfo") && "requestToReOpen" == e.extraInfo ? canStudentReOpenRequest() || (requestToReOpen(e.facultyMsgToLearners), 
    0) : "closeOnExpiry" == e.restrictionType ? (alertify.error(e.facultyMsgToLearners, 1e4), 
    0) : e.hasOwnProperty("extraInfo") && "reasonForLateSubmission" == e.extraInfo ? ($("#lateSubmissionDiv").removeClass("d-none"), 
    $("#lateSubmissionReason").focus().effect("highlight", {
        color: "#669966"
    }, 3e3), currentQIsInLateSubmissionMode = !0, "" == $("#lateSubmissionReason").val().trim() ? (alertify.error("Please provide a reason for late submission.", 5), 
    0) : currentQIsInLateSubmissionModeWithReason = !0) : !("recordLateSubmissionOnExpiry" == e.restrictionType && (currentQIsInLateSubmissionMode = !0, 
    alertify.error(e.facultyMsgToLearners, 1e4), currentQIsInLateSubmissionModeWithReason = !1))));
}

function saveLateSubmissionRecords(e) {
    var t, s, n = $("#lateSubmissionReason").val().trim();
    e && "" == n ? alertify.error("Please provide a reason for late submission.", 5) : (t = {}, 
    cq.hasOwnProperty("filesContentArr") && (t.filesContentArr = getUserContentToBeSaved()), 
    e && (t.reason = n), t.courseId = cid, t.courseUnitId = tid, t.questionId = cq._id.$oid, 
    isQuestionBased ? t.qbd = cq.qbd : (t.sectionId = cq.section, null !== getBD() && (t.qbd = getBD())), 
    t.questionNumber = cq.questionNo, (s = $.ajax({
        type: "POST",
        url: "/secure/rest/eu/rsls",
        headers: jsonHeaders,
        dataType: "json",
        data: JSON.stringify(t)
    })).done(function(e) {
        alertify.success(e.msg, 3), null != e.ref && (jsonCurrentScheduleCourseReopenRequestsObj = e.ref, 
        closeRequestToReOpenModal());
    }), s.fail(function(e) {
        s.getResponseHeader("X-SessionTimeout") ? openLoginDialog() : alertify.error("Could not Fech...[please see the console]", 8e3);
    }));
}

function canStudentReOpenRequest() {
    var e, t;
    return !(null == jsonCurrentScheduleCourseReopenRequestsObj || !jsonCurrentScheduleCourseReopenRequestsObj.hasOwnProperty("studentRequestArr")) && (e = jsonCurrentScheduleCourseReopenRequestsObj.studentRequestArr[0], 
    t = new Date(), "Accepted" == e.status) && new Date(e.endTime.$date) >= t;
}

function requestToReOpen(e) {
    var t, s;
    $("#requestToReOpenModal").modal({
        backdrop: "static",
        keyboard: !1,
        show: !0
    }), $("#myModal").scrollTo(0, "slow"), null == jsonCurrentScheduleCourseReopenRequestsObj ? $("#requestToReOpenForm .alert-danger").html(e) : jsonCurrentScheduleCourseReopenRequestsObj.hasOwnProperty("studentRequestArr") ? (e = jsonCurrentScheduleCourseReopenRequestsObj.studentRequestArr[0], 
    t = (t = "<table class='table table-bordered text-center table-responsive' style='margin-bottom: 0; color: blue;'><tbody><tr><td>" + new Date(e.requestTime.$date).toLocaleString("en-US", {
        hour24: !0
    }) + "</td>") + "<td>" + e.reason + "</td></tr></tbody></table>", s = "", $("#reOpeningRequestReason").parents(".form-group").removeClass("d-none"), 
    "Pending" == e.status ? (s = (s += "You have already sent a request to the faculty for reopening this unit.") + " However, that request is still pending for approval." + t, 
    $("#requestToReOpenForm .alert-danger").html(s), $("#reOpeningRequestReason").parents(".form-group").addClass("d-none"), 
    $("#requestToReOpenBtn").hide()) : "Accepted" == e.status ? (s = (s += "Your previous request was accepted with a new end time : <b>" + new Date(e.endTime.$date).toLocaleString("en-US", {
        hour24: !0
    }) + "</b><br/>") + "However, the new end time has also expired." + t, $("#requestToReOpenForm .alert-danger").html(s)) : "Rejected" == e.status && (s += "Your request for reopening the unit has been rejected.", 
    new Date(e.requestTime.$date).toLocaleString("en-US", {
        hour24: !0
    }), s += t, $("#requestToReOpenForm .alert-danger").html(s))) : ($("#requestToReOpenForm").html("There is some internal issue, please contact <code>support@codetantra.com</code>"), 
    $("#requestToReOpenBtn").hide());
}

function sendRequestToReOpenUnit() {
    var e, t;
    0 == $("#reOpeningRequestReason").val().trim().length ? alertify.error("Please provide a valid reason!", 3e3) : ((e = {}).courseId = cid, 
    e.courseUnitId = tid, e.reason = $("#reOpeningRequestReason").val().trim(), 
    e.src = getBD(), (t = $.ajax({
        type: "POST",
        url: "/secure/rest/eu/rrscs",
        headers: jsonHeaders,
        dataType: "json",
        data: JSON.stringify(e)
    })).done(function(e) {
        alertify.success(e.msg, 2e3), null != e.ref && (jsonCurrentScheduleCourseReopenRequestsObj = e.ref, 
        closeRequestToReOpenModal());
    }), t.fail(function(e) {
        t.getResponseHeader("X-SessionTimeout") ? openLoginDialog() : alertify.error("Could not Fech...[please see the console]", 8e3);
    }));
}

function closeRequestToReOpenModal() {
    $("#requestToReOpenModal").modal("hide"), $("#requestToReOpenModal").off("hidden.bs.modal"), 
    $("#requestToReOpenModal").on("hidden.bs.modal", function() {
        $("body").addClass("modal-open");
    });
}
//# sourceMappingURL=stu.min.js.map