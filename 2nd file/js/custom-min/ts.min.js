function isSpeechSynthesisEnabled() {
    return void 0 !== window.SpeechSynthesisUtterance;
}

function getTextNodesIn(n) {
    var t = [], o = [], s = /\S/, u = /^([\\,"'.!;`]|\s)+$/;
    return $.each(n, function(n, e) {
        e && (t = t.concat(function n(e, t) {
            if (3 === t.nodeType) s.test(t.nodeValue) && !u.test(t.nodeValue) && e.push(t); else if (1 === t.nodeType) for (var o = 0, i = t.childNodes.length; o < i; ++o) n(e, t.childNodes[o]);
            return e;
        }([], e)), o.push(t.length));
    }), {
        texts: t,
        skipCounts: o
    };
}

function createSpeech(n, t, o, i, s) {
    function e(n) {
        for (var e = 0; e < h.length; e++) if (n < h[e]) return e;
    }
    function u(n, e) {
        0 <= n && n < h.length && (k(), a = "start" === e ? 0 < n ? h[n - 1] : 0 : h[n], 
        y());
    }
    var c, n = getTextNodesIn(n), r = n.texts, h = n.skipCounts, f = [], p = !0, a = 0, d = function(n, e) {
        0 === e && t(), a = e, i(c = n);
    }, l = function n(e, t) {
        s(e), t === r.length - 1 ? (o(), a = 0) : p || f.push(speakChunk(r, t + 1, d, n, f));
    }, k = function() {
        p = !0, window.speechSynthesis.cancel(), c && l(c, a);
    }, y = function() {
        p = !1, f.push(speakChunk(r, a, d, l, f));
    };
    return {
        play: function() {
            a = 0, y();
        },
        pause: k,
        resume: y,
        stop: function() {
            k(), a = 0, f.length = 0;
        },
        skipToNext: function() {
            u(e(a), "end");
        },
        skipToPrevious: function() {
            u(e(a), "start");
        },
        currentPlayingSkipIndex: e,
        speaking: function() {
            return !p;
        }
    };
}

function speakChunk(n, e, t, o, i) {
    window.speechSynthesis.cancel();
    var s = $(n[e]), n = s.text(), n = new SpeechSynthesisUtterance(n);
    return n.lang = "en-IN", n.rate = .9, n.volume = 1, n.pitch = 1, n.onstart = function() {
        "function" == typeof t && t(s, e);
    }, n.onend = function() {
        "function" == typeof o && o(s, e);
    }, n.onerror = function(n) {}, window.speechSynthesis.speak(n), n;
}
//# sourceMappingURL=ts.min.js.map