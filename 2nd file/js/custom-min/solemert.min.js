function _typeof(e) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
        return typeof e;
    } : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    })(e);
}

var consoleTerm = null, consoleTermSoc = null, currentConsoleCmdIndex = 0, consoleTermInitializingInProgress = !1, consoleCols = 120, consoleRows = 18, reInitTerminal = !1, termToBeDestroyed = void 0, isMobileDevice = window.matchMedia("only screen and (max-width: 760px)").matches, consoleTermFitAddon = null, consoleTermSocCloseByClient = !1, reconnectionObj = function() {
    function t() {
        var t, n;
        $("#terminal-disconnected-red-circle").removeClass("d-none hidden"), $("#terminal-connected-green-circle").addClass("d-none hidden"), 
        $(".xterm-screen").css("filter", "blur(1px)"), clearInterval(o), consoleTermSocCloseByClient || (n = t = 1, 
        o = setInterval(function() {
            var e;
            r && (n = t, r = !1), 0 === n && (e = Math.round(t + 1.6 * t), t = n = 60 <= e ? 60 : e, 
            $("#connecting-in").text("Connecting..."), i = !1, consoleTermSoc) && consoleTermSoc.connect(), 
            i && $("#connecting-in").text("Connecting in " + n + "s"), n--;
        }, 1e3));
    }
    var o = null, i = !0, r = !1;
    return Object.freeze({
        handleConnection: function() {
            $("#terminal-connected-green-circle").removeClass("d-none hidden"), 
            $("#terminal-disconnected-red-circle").addClass("d-none hidden"), clearInterval(o);
        },
        handleDisconnection: t,
        tryNow: function() {
            consoleTermSoc && consoleTermSoc.connect(), $("#connecting-in").text("Connecting..."), 
            i = !(r = !0);
        },
        handleConnectError: function(e) {
            i = !0, o || t();
        },
        handleConnectFailed: function(e) {
            $("#connecting-in").text("Connection Failed");
        }
    });
}(), selectSunTheme = function() {
    $("#sun-icon").addClass("d-none"), $("#moon-icon").removeClass("d-none"), changeTerminalTheme("#ffffff", "#000000", "#000000", "#FDF6E3"), 
    localStorage.setItem("terminalTheme", "sun");
}, selectMoonTheme = function() {
    $("#moon-icon").addClass("d-none"), $("#sun-icon").removeClass("d-none"), changeTerminalTheme("#000000", "#FFFFFF", "#FFFFFF", "#000000"), 
    localStorage.setItem("terminalTheme", "moon");
};

function reattachTermToConsoleDiv() {
    0 != getCTMode() && (isCProgQuestion() || isPythonQuestion() || isJavaQuestion()) && 0 == $("#consoleContainerDivPanelBody").children().length && $("#consoleDiv").appendTo($("#consoleContainerDivPanelBody"));
}

function changeTerminalTheme(e, t, n, o) {
    $(".xterm").css("border-color", o), consoleTerm.options.theme = {
        background: e,
        foreground: t,
        cursor: n,
        cursorAccent: n,
        black: o
    };
}

function getExtraTermUrlParams() {
    var e = 4 == getCTMode();
    return "ctUserWinId=" + ctUserWinId + "&domainName=" + window.location.hostname + "&cookieId=" + cookieId + "&exam=" + e + "&containerType=" + langVsLangObj[getCurrentLanguage()].containerType + "&sessionId=" + encodeURIComponent(document.cookie);
}

function initializeConsole(t) {
    var e, a;
    null != consoleTerm || 1 == consoleTermInitializingInProgress ? (void 0 !== t && t(), 
    $("#consoleDiv, .console-header").show(), reattachTermToConsoleDiv()) : (consoleTermInitializingInProgress = !0, 
    e = readCookie("JSESSIONID"), null != readCookie("_ct_tsid") && readCookie("_ct_tsid") == e || createCookie("_ct_tsid", e), 
    a = io(consoleUrl + "?cols=" + consoleCols + "&rows=" + consoleRows + "&" + getExtraTermUrlParams(), {
        reconnection: !1,
        transports: [ "websocket" ]
    }), consoleTermSoc = a, $("#try-now").click(reconnectionObj.tryNow), a.on("connect_error", function(e) {
        reconnectionObj.handleConnectError(), 0 !== getCTMode() && logResponseOnSubmit("termInitFailure", "Term initialization failed.", JSON.stringify(e));
    }), a.on("connect_failed", function(e) {
        reconnectionObj.handleConnectFailed(), 0 !== getCTMode() && logResponseOnSubmit("termInitFailure", "Term initialization failed", JSON.stringify(e));
    }), a.on("error", function(e) {
        0 !== getCTMode() && logResponseOnSubmit("termError", "Error from term server", JSON.stringify(e));
    }), a.on("connect", function() {
        var n = new Terminal({
            useStyle: !0,
            screenKeys: !0,
            cursorBlink: !0,
            fontFamily: "DejaVu Sans Mono, Liberation Mono, monospace",
            fontSize: 12
        }), o = (reconnectionObj.handleConnection(), consoleTermFitAddon = new FitAddon.FitAddon(), 
        n.loadAddon(consoleTermFitAddon), consoleTerm = n, 0), i = new Date().getTime(), r = !1, s = 0, e = (n.onData(function(e) {
            typedOnTerm(e);
        }), n.onResize(function(e) {
            a.emit("resizeTerm", e);
        }), n.onTitleChange(function(e) {
            document.title = e;
        }), 0 != getCTMode() && 0 == $("#consoleContainerDivPanelBody").children().length && $("#consoleContainerDivPanelBody").append("<div id='consoleDiv'></div>"), 
        0 < $("#consoleDiv").children().length && termToBeDestroyed && ($("#consoleDiv").children()[0].remove(), 
        "function" == typeof termToBeDestroyed.destroy && termToBeDestroyed.destroy(), 
        termToBeDestroyed = void 0), $("#consoleDiv, .console-header").show(), window.addEventListener("resize", onReSize, !1), 
        n.open($("#consoleDiv")[0]), "undefined" != typeof ctTerminalFontSize && (consoleTerm.options.fontSize = ctTerminalFontSize), 
        localStorage.getItem("terminalTheme"));
        (e && "sun" === e ? selectSunTheme : selectMoonTheme)(), a.on("data", function(e) {
            0 < e.indexOf("\n") && o++;
            var t = new Date().getTime();
            if (s += e.length, 1e3 < t - i && (o = s = 0), t - i < 100 && (100 < o || 15e3 < s)) return r ? void 0 : (setTimeout(function() {
                r = !1, s = o = 0, consoleTermSoc.emit("data", "\r");
            }, 3e3), consoleTermSoc.emit("data", "\r"), n.write("Too much of data to handle. Please check the code executed."), 
            0 !== getCTMode() && logResponseOnSubmit("executionTerminated", "Terminated program execution due to infinite loop", ""), 
            r = !0, alertify_log("The system has terminated the program execution. This can happen if there is an infinite-loop in the code or if the code is trying to print huge data.", "error", 12e3), 
            void (enableSubmit && enableSubmit()));
            i = t, 0 != getCTMode() && cq.hasOwnProperty("hadoopExtraInfo") && processDataForHadoopStatus(e), 
            n.write(e), processDataFromServer(e);
        }), a.on("termReinitialize", termReinitialize), a.on("termCreated", function(e) {
            sendTermCreatedDataToStats(e), 0 !== getCTMode() && logResponseOnSubmit("termCreated", "Term created.", e);
        }), a.on("disconnect", function() {
            sendTermDisconnectionCount(), reconnectionObj.handleDisconnection(), 
            0 !== getCTMode() && logResponseOnSubmit("termDisconnect", "Term disconnected", ""), 
            "undefined" != typeof Dbg && Dbg.onDisconnect(), termToBeDestroyed = n;
        }), a.on("sctv-res", function(e) {
            handleSCTVResponse(e);
        }), a.on("tisctv-res", function(e) {
            handleTISCTVResponse(e);
        }), "undefined" != typeof Dbg && a.on("debug-res", Dbg.onDebugRes), a.on("triggerLoginDialog", function(e) {
            openLoginDialog(!0);
        }), void 0 !== t && t(), consoleTermInitializingInProgress = !1;
    }));
}

var cExecutionFlowArr = [], userTypedInput = "", indexOfPrevOutput = 0, userTypedInputTotalLength = 0;

function reconnectTerminal() {
    var t = $.ajax({
        method: "GET",
        url: "/secure/term-ping.jsp"
    });
    t.done(function(e, t) {
        "Ok" === e ? setTimeout(function() {
            initShowConsole("undefined" == typeof cq ? null : cq, getSelectedQuestionTypeText());
        }, 0) : (enableSubmit(), displayNextBtn(!1), openLoginDialog(!0));
    }), t.fail(function(e) {
        t.getResponseHeader("X-SessionTimeout") ? (enableSubmit(), displayNextBtn(!1), 
        openLoginDialog(!0)) : alertify_log("Terminal disconnected. Reconnecting...!", "error", 5e3);
    });
}

function termReinitialize(e) {
    0 !== getCTMode() && logResponseOnSubmit("termReinitialize", "Term Reinitializing.", e), 
    reInitTerminal = !0, null !== consoleTermSoc ? consoleTermSoc.disconnect() : reconnectTerminal();
}

function typedOnTerm(e) {
    var t, n;
    cExecutionInProgress && ($("#popOverPositionerDiv").remove(), 127 == e.charCodeAt(0) ? 0 < userTypedInput.length && (indexOfPrevOutput--, 
    userTypedInput = userTypedInput.substring(0, userTypedInput.length - 1)) : "\r" === e ? (-1 < (t = cExecutionOutputLines.lastIndexOf(cExecutionCmd)) && 0 < (n = cExecutionOutputLines.substring(t + cExecutionCmd.length + indexOfPrevOutput)).length && (indexOfPrevOutput += captureProgramOutput(cExecutionFlowArr, n, !0)), 
    indexOfPrevOutput++, 0 == userTypedInput.length ? cExecutionFlowArr.push({
        userInput: "\n",
        isUserInput: !0
    }) : cExecutionFlowArr.push({
        userInput: userTypedInput,
        isUserInput: !0
    }), userTypedInput = "") : "" != cExecutionOutputLines && (-1 < (t = cExecutionOutputLines.lastIndexOf(cExecutionCmd)) && (n = cExecutionOutputLines.substring(t + cExecutionCmd.length + indexOfPrevOutput), 
    0 == userTypedInput.length) && 0 < n.length && (indexOfPrevOutput += captureProgramOutput(cExecutionFlowArr, n, !0)), 
    userTypedInput += e, userTypedInputTotalLength += e.length)), consoleTermSoc.emit("data", e);
}

var completeOutText = "", cCompilationOutputText = "";

function processDataFromServer(e) {
    if ((cExecutionInProgress || cExecutionInProgressOnlyInTerminal) && ($("#popOverPositionerDiv").remove(), 
    8 != e.charCodeAt(0))) {
        e = e.replace(/\r\n/g, "\n"), cExecutionOutputLines += e, completeOutText += e, 
        cExecutionCmd = cExecutionCmd.trim();
        e = cExecutionOutputLines.lastIndexOf(cExecutionCmd);
        if (-1 < e) {
            var t = cExecutionOutputLines.substring(e + cExecutionCmd.length + indexOfPrevOutput);
            if (0 < t.length) {
                for (var n = -1, o = -1, i = 0; i < t.length; i++) {
                    var r = t.charCodeAt(i);
                    27 == r && -1 == n ? n = i : 7 == r && (o = i);
                }
                var s;
                0 <= n && 0 < o ? (0 < (s = t.substring(0, n)).length && (indexOfPrevOutput += captureProgramOutput(cExecutionFlowArr, s, !0)), 
                cExecutionOutputLines = cExecutionOutputLines.substring(e + cExecutionCmd.length, e + cExecutionCmd.length + indexOfPrevOutput + n), 
                cExecutionInProgressOnlyInTerminal ? testCases.cExecutionInProgressOnlyInTerminalTerminated() : testCases.cExecutionTerminated(cExecutionOutputLines.endsWith("^C\n"))) : 0 < userTypedInput.length ? indexOfPrevOutput += t.length : indexOfPrevOutput += cExecutionOutputLines == cExecutionCmd + t ? t.length : captureProgramOutput(cExecutionFlowArr, t, !1);
            }
        }
    }
}

function captureProgramOutput(t, e, n) {
    if (n = !!n, "\n" === e) t.push({
        programOutput: "",
        isProgramOutput: !0
    }); else {
        var o = e.lastIndexOf("\n");
        if (!n) {
            if (-1 === o) return 0;
            e = e.substring(0, o + 1);
        }
        var n = e.split("\n"), i = !0;
        n.forEach(function(e) {
            "" == e || i || t.push({
                programOutput: "",
                isProgramOutput: !0
            }), t.push({
                programOutput: e,
                isProgramOutput: !0
            }), i = !1;
        });
    }
    return e.length;
}

function processCompilationOutput() {
    isCProgQuestion() ? processCCompilationOutput() : isPythonQuestion() ? processPythonCompilationOutput() : isJavaQuestion() && processJavaCompilationOutput();
}

function hideResultsTabsAndDivs() {
    $("#resultsTabsAndDivs").css("display", "none"), $("#live-preview-iframe").removeAttr("src"), 
    $("#live-preview").addClass("hide");
}

function showResultsTabsAndDivs() {
    $("#resultsTabsAndDivs").css("display", "block");
}

function showConsoleContainerDiv() {
    $("#consoleContainerDiv").css("display", "block");
}

function hideConsoleContainerDiv() {
    $("#consoleContainerDiv").css("display", "none");
}

function showIoTContainerDiv() {
    $("#IoTContainerDiv").css("display", "block");
}

function hideIoTContainerDiv() {
    $("#IoTContainerDiv").css("display", "none");
}

function partialMarksValidationToAllowOnlyNumbers(e) {
    $(e).on("input", function() {
        /^[0-9][0-9]?$/.test(this.value) || ("" !== this.value && ($(".alertify-logs").remove(), 
        alertify_log("Only whole numbers between [0-99] are allowed.", "error", 5e3)), 
        this.value = this.value.replace(/\D/g, "").slice(0, 2), this.value = this.value.replace(/^0+/, "").slice(0, 2));
    });
}

function showPopover(e, t) {
    $(e).popover({
        placement: "bottom",
        html: !0,
        trigger: "focus",
        content: "<div id='popoverText'>" + t + "</div>"
    }).popover("show"), $(".popover").css({
        width: "20%"
    });
}

function processCCompilationOutput() {
    for (var e = 0; e < cCompilationOutputLines.length; e++) {
        var t, n, o, i, r, s, a, l, c, u, d, p, m, g, f = cCompilationOutputLines[e];
        "" == f.trim() ? cCompilationOutputLines[e] = "to-be-removed" : (g = "method-info", 
        t = ": error: ", n = ": note: ", i = a = l = s = "", (o = {}).rawLine = f, 
        o.position = 0, o.startPosition = 0, o.endPosition = 0, o.startPositionLineNo = 0, 
        o.endPositionLineNo = 0, f.endsWith("ld returned 1 exit status") ? cCompilationOutputLines[e] = "to-be-removed" : 0 < f.indexOf(": undefined reference to `") ? (i = f, 
        o.kind = g = "error", o.message = i, o.lineNumber = " error", o.columnNumber = a, 
        o.pointerLine = "", o.source = "", (u = f.indexOf(":")) < (d = f.indexOf(":", u + 1)) && (s = f.substring(0, u)), 
        o.fileName = s, f.endsWith(": undefined reference to `main'") ? o.extraHint = "The above error could mean that <b>main()</b> function is <b>missing or mispelt</b>." : (c = f.substring(f.lastIndexOf("`") + 1, f.length - 1), 
        o.extraHint = "The above error could mean that <b>" + c + "()</b> function declaration is missing or its header file is not included."), 
        c = cCompilationOutputLines[e] = o) : 0 < f.indexOf(": fatal error: ") ? (i = f, 
        o.kind = g = "error", o.message = i, o.pointerLine = "", o.source = "", 
        u = f.indexOf(":"), d = f.indexOf(":", u + 1), p = f.indexOf(":", d + 1), 
        m = f.indexOf(":", p + 1), r = f.indexOf(":", m + 1), s = f.substring(0, u), 
        a = f.substring(d + 1, p), l = f.substring(u + 1, d), o.fileName = s, o.columnNumber = a, 
        o.lineNumber = l, cCompilationOutputLines[e] = o, m < r && -1 < (i = f.substring(r + 1)).indexOf("No such file or directory") && (r = f.substring(m + 1, r).trim(), 
        o.extraHint = "Verify if the missing header file <b>" + r + "</b> is spelt correctly and is available.", 
        c = cCompilationOutputLines[e] = o)) : 0 < f.indexOf(": In function ‘") ? (i = f, 
        o.kind = g, o.message = i, o.fileName = s, o.lineNumber = l, o.columnNumber = a, 
        o.pointerLine = "", o.source = "", cCompilationOutputLines[e] = o) : 0 < f.indexOf(t) || 0 < f.indexOf(": warning: ") || 0 < f.indexOf(n) ? (c = o, 
        u = f.indexOf(":"), d = f.indexOf(":", u + 1), p = f.indexOf(":", d + 1), 
        m = f.indexOf(":", p + 1), g = 0 < f.indexOf(t) ? "error" : 0 < f.indexOf(n) ? "note" : "warning", 
        s = f.substring(0, u), l = f.substring(u + 1, d), a = f.substring(d + 1, p), 
        i = f.substring(m + 1), o.kind = g, o.message = i, o.fileName = s, o.lineNumber = l, 
        o.columnNumber = a, o.pointerLine = "", o.source = "", -1 < i.indexOf("‘return’ with a value, in function returning void") ? o.extraHint = "Verify if this function's return type should be <b>void</b>. If it is void, then we should remove the return statement." : -1 < i.indexOf("incompatible implicit declaration of built-in function ‘printf’") ? o.extraHint = "Verify if you have included <b>#include &lt;stdio.h&gt;</b> in your program." : -1 < i.indexOf("character constant too long for its type") && (o.extraHint = "This error can occur when a <b>string literal</b> is enclosed in <b>single-quotes</b> instead of <b>double-quotes</b>."), 
        cCompilationOutputLines[e] = o) : ("^" == f.trim() ? c.pointerLine = f : void 0 !== c && "" == c.source && (c.source = f), 
        cCompilationOutputLines[e] = "to-be-removed"));
    }
    for (e = cCompilationOutputLines.length; 0 <= e; e--) "to-be-removed" == cCompilationOutputLines[e] && cCompilationOutputLines.splice(e, 1);
    showCCompilationErrors(cCompilationOutputLines, null, null), 0 < cCompilationOutputLines.length && (1 === getCTMode() || 2 === getCTMode() || 3 === getCTMode()) ? logResponseOnSubmit("compilationError", cCompilationOutputLines, "") : 0 < cCompilationOutputLines.length && 4 === getCTMode() && logResponseOnSubmit("compilationErrorInTest", cCompilationOutputLines, "");
}

function processPythonCompilationOutput() {
    for (var e, t = 0; t < cCompilationOutputLines.length; t++) {
        var n, o, i, r, s, a, l, c, u, d, p, m, g, f = cCompilationOutputLines[t];
        "" == f.trim() ? cCompilationOutputLines[t] = "to-be-removed" : (n = "Sorry: IndentationError: unexpected indent (", 
        o = "Sorry: IndentationError: expected an indented block (", i = "Sorry: IndentationError: unindent does not match any outer indentation level (", 
        r = "Sorry: TabError: inconsistent use of tabs and spaces in indentation (", 
        s = "SyntaxError: ", u = c = l = "", (a = {}).rawLine = f, a.position = 0, 
        a.startPosition = 0, a.endPosition = 0, a.startPositionLineNo = 0, a.endPositionLineNo = 0, 
        -1 < f.indexOf(n) ? (d = f.indexOf(","), p = f.indexOf(")"), l = f.substring(n.length, d), 
        c = f.substring(d + " line ".length + 1, p), u = f, a.kind = "error", a.message = u, 
        a.fileName = l, a.lineNumber = c, a.columnNumber = 0, a.pointerLine = "", 
        a.source = "", a.extraHint = "Verify the indentation rules properly.", e = cCompilationOutputLines[t] = a) : -1 < f.indexOf(o) ? (d = f.indexOf(","), 
        p = f.indexOf(")"), l = f.substring(o.length, d), c = f.substring(d + " line ".length + 1, p), 
        u = f, a.kind = "error", a.message = u, a.fileName = l, a.lineNumber = c, 
        a.columnNumber = 0, a.pointerLine = "", a.source = "", a.extraHint = "Verify the indentation rules properly.", 
        e = cCompilationOutputLines[t] = a) : -1 < f.indexOf(i) ? (d = f.indexOf(","), 
        p = f.indexOf(")"), l = f.substring(i.length, d), c = f.substring(d + " line ".length + 1, p), 
        u = f, a.kind = "error", a.message = u, a.fileName = l, a.lineNumber = c, 
        a.columnNumber = 0, a.pointerLine = "", a.source = "", a.extraHint = "Verify the indentation rules properly.", 
        e = cCompilationOutputLines[t] = a) : -1 < f.indexOf(r) ? (d = f.indexOf(","), 
        p = f.indexOf(")"), l = f.substring(r.length, d), c = f.substring(d + " line ".length + 1, p), 
        u = f, a.kind = "error", a.message = u, a.fileName = l, a.lineNumber = c, 
        a.columnNumber = 0, a.pointerLine = "", a.source = "", a.extraHint = "Verify the indentation rules properly.", 
        e = cCompilationOutputLines[t] = a) : f.startsWith('  File "') ? (m = '  File "'.length, 
        g = f.indexOf(", line "), l = f.substring(m, g - 1), c = f.substring(g + ", line ".length).trim(), 
        u = f, a.kind = "error", a.message = u, a.fileName = l, a.lineNumber = c, 
        a.columnNumber = 0, a.pointerLine = "", a.source = "", a.extraHint = "Some Syntax Error", 
        e = cCompilationOutputLines[t] = a) : "SyntaxError: invalid syntax" === f.trim() ? e.message = "SyntaxError: invalid syntax" : f.startsWith(s) ? (m = '  File "'.length, 
        g = f.indexOf(", line "), l = f.substring(m, g - 1), c = f.substring(g + ", line ".length).trim(), 
        a.kind = "error", a.fileName = l, a.lineNumber = c, a.pointerLine = "", 
        a.source = "", a.message = "Syntax Error", a.extraHint = f.substring(s.length), 
        cCompilationOutputLines[t] = e = a) : ("^" == f.trim() ? e.pointerLine = f : void 0 !== e && "" == e.source && (e.source = f), 
        cCompilationOutputLines[t] = "to-be-removed"));
    }
    for (t = cCompilationOutputLines.length; 0 <= t; t--) "to-be-removed" === cCompilationOutputLines[t] && cCompilationOutputLines.splice(t, 1);
    showCCompilationErrors(cCompilationOutputLines, null, null), 0 < cCompilationOutputLines.length && (1 === getCTMode() || 2 === getCTMode() || 3 === getCTMode()) ? logResponseOnSubmit("compilationError", cCompilationOutputLines, "") : 0 < cCompilationOutputLines.length && 4 === getCTMode() && logResponseOnSubmit("compilationErrorInTest", cCompilationOutputLines, "");
}

function processJavaCompilationOutput() {
    for (var e = 0; e < cCompilationOutputLines.length; e++) {
        var t, n, o, i, r, s, a, l, c, u, d, p = cCompilationOutputLines[e];
        "" == p.trim() ? cCompilationOutputLines[e] = "to-be-removed" : (c = "method-info", 
        t = ": error: ", n = ": note: ", i = d = u = "", (o = {}).rawLine = p, o.position = 0, 
        o.startPosition = 0, o.endPosition = 0, o.startPositionLineNo = 0, o.endPositionLineNo = 0, 
        p.endsWith("ld returned 1 exit status") ? cCompilationOutputLines[e] = "to-be-removed" : 0 < p.indexOf(": undefined reference to `") ? (i = p, 
        o.kind = c = "error", o.message = i, o.lineNumber = " error", o.columnNumber = "", 
        o.pointerLine = "", o.source = "", (s = p.indexOf(":")) < (a = p.indexOf(":", s + 1)) && (u = p.substring(0, s)), 
        o.fileName = u, p.endsWith(": undefined reference to `main'") ? o.extraHint = "The above error could mean that <b>main()</b> function is <b>missing or mispelt</b>." : (r = p.substring(p.lastIndexOf("`") + 1, p.length - 1), 
        o.extraHint = "The above error could mean that <b>" + r + "()</b> function declaration is missing or its header file is not included."), 
        r = cCompilationOutputLines[e] = o) : 0 === p.indexOf("error: file not found:") ? (i = p, 
        o.kind = c, o.message = i, o.fileName = u, o.lineNumber = "", o.columnNumber = "", 
        o.pointerLine = "", o.source = "", cCompilationOutputLines[e] = o, s = p.indexOf(":"), 
        i = "Could not locate file: " + (u = (a = p.indexOf(":", s + 1)) > p.length() ? p.substring(a + 1).trim() : u) + " to compile.", 
        o.extraHint = "Verify if the file is present in the folder. Click save and try again.", 
        r = cCompilationOutputLines[e] = o) : 0 < p.indexOf(": In function ‘") ? (i = p, 
        o.kind = c, o.message = i, o.fileName = u, o.lineNumber = "", o.columnNumber = "", 
        o.pointerLine = "", o.source = "", cCompilationOutputLines[e] = o) : 0 < p.indexOf(t) || 0 < p.indexOf(": warning: ") || 0 < p.indexOf(n) ? (r = o, 
        s = p.indexOf(":"), a = p.indexOf(":", s + 1), l = p.indexOf(":", a + 1), 
        c = 0 < p.indexOf(t) ? "error" : 0 < p.indexOf(n) ? "note" : "warning", 
        u = p.substring(0, s), d = p.substring(s + 1, a), i = p.substring(l + 1), 
        u.startsWith("./") && (u = u.substring(2)), o.kind = c, o.message = i, o.fileName = u, 
        o.lineNumber = d, o.columnNumber = "", o.pointerLine = "", o.source = "", 
        -1 < i.indexOf("‘return’ with a value, in function returning void") ? o.extraHint = "Verify if this function's return type should be <b>void</b>. If it is void, then we should remove the return statement." : -1 < i.indexOf("incompatible implicit declaration of built-in function ‘printf’") ? o.extraHint = "Verify if you have included <b>#include &lt;stdio.h&gt;</b> in your program." : -1 < i.indexOf("character constant too long for its type") && (o.extraHint = "This error can occur when a <b>string literal</b> is enclosed in <b>single-quotes</b> instead of <b>double-quotes</b>."), 
        cCompilationOutputLines[e] = o) : ("^" == p.trim() ? (r.pointerLine = p, 
        r.columnNumber = p.indexOf("^") + 1) : p.startsWith("  symbol: ") || p.startsWith("  location: ") ? r.message += "\n" + p : void 0 !== r && "" == r.source && (r.source = p), 
        cCompilationOutputLines[e] = "to-be-removed"));
    }
    for (e = cCompilationOutputLines.length; 0 <= e; e--) "to-be-removed" == cCompilationOutputLines[e] && cCompilationOutputLines.splice(e, 1);
    showCCompilationErrors(cCompilationOutputLines, null, null), 0 < cCompilationOutputLines.length && (1 === getCTMode() || 2 === getCTMode() || 3 === getCTMode()) ? logResponseOnSubmit("compilationError", cCompilationOutputLines, "") : 0 < cCompilationOutputLines.length && 4 === getCTMode() && logResponseOnSubmit("compilationErrorInTest", cCompilationOutputLines, "");
}

function initShowConsole(t, e, n) {
    var o = !1;
    null != (t = null == t ? (0 == getCTMode() ? getDummyJsonForC : getCurrentQ)() : t) && t.showConsole && t.hasOwnProperty("progLanguage") && (o = !0, 
    0 == getCTMode()) && showConsoleContainerDiv(), o ? initializeConsole(function() {
        var e = t.hasOwnProperty("progLangExtraInfo") ? "object" == _typeof(t.progLangExtraInfo) ? t.progLangExtraInfo : JSON.parse(t.progLangExtraInfo) : getDummyJsonForC();
        setTimeout(function() {
            consoleTerm && (consoleTerm.resize(consoleCols, consoleRows), consoleTermFitAddon.fit(), 
            initConsole4ProgQuestion(e.initCmdArr, e.globalVar), "function" == typeof n) && (n(), 
            n = null);
        }, 1e3), 1 === getCTMode() || 2 === getCTMode() || 3 === getCTMode() ? enableSubmit() : 4 === getCTMode() && enableExecuteBtn();
    }) : $("#consoleDiv, .console-header").hide();
}

function initShowIoTConsole(e, t) {
    null != (e = null == e ? (0 == getCTMode() ? getDummyJsonForC : getCurrentQ)() : e) && e.hasOwnProperty("progLanguage") && "IoT-Arduino" == getCurrentLanguage() && showIoTContainerDiv();
}

function initConsole4ProgQuestion(e, t) {
    var n, o = [];
    for (n in e) -1 == e[n].cmd.indexOf("ls -al") && (o.push(substituteConsoleCmdGlobalVars(e[n].cmd, t).trim()), 
    e[n].show);
    consoleTermSoc && consoleTermSoc.emit("data", o.join(" && ") + "\r");
}

function substituteConsoleCmdGlobalVars(n, e) {
    return $.each(e, function(e, t) {
        n = n.replace(new RegExp(e, "g"), t);
    }), n = null != document.getElementById("javaCompilerApplet") && "undefined" != typeof cq ? (n = n.replace(new RegExp("CURRENT_CLASS_NAME", "g"), cq.className)).replace(new RegExp("CT_USER_HOME", "g"), document.getElementById("javaCompilerApplet").getSystemProp("user.home")) : n;
}

function getCurrentLanguage() {
    return (0 == getCTMode() ? progLanguagesMap[$("#progLanguage").val()] : isMultiLangProgQuestion() ? cq : progLanguagesMap[cq.progLanguage]).language;
}

function getProgLangExtraInfo() {
    var e;
    return 0 == getCTMode() ? (e = {}, $("#usingTestCode").is(":checked") ? JSON.parse($("#testCodeEditor").data("editor").getSession().getValue().trim()) : e) : cq.hasOwnProperty("progLangExtraInfo") ? JSON.parse(cq.progLangExtraInfo) : {};
}

function save(e, t, n) {
    var o, i;
    (isCProgQuestion() || isPythonQuestion() || isJavaQuestion()) && (i = "", "Copy Writing" == e ? (i = "correctContent", 
    0 == getCTMode() && (i = "copyWriting")) : "Compilation Errors" == e && (i = "compilationError"), 
    e = $("#" + t).data("editor").getSession().getValue(), t = t.substring(t.indexOf("-") + 1), 
    i = $("#" + i + "Li-" + t).find("input").val().trim(), o = substituteConsoleCmdGlobalVars("$HOME/CT_WORK_DIR/CURRENT_EXERCISE_DIR", (t = getProgLangExtraInfo()).globalVar), 
    initConsole4ProgQuestion(t.initCmdArr, t.globalVar), consoleTermSoc.emit("data", "clear \r"), 
    (t = {}).fileName = i, t.fileContent = e, t.targetDir = o, i = "https://" + consoleUrl + "/ctsf?" + getExtraTermUrlParams(), 
    $.ajax({
        url: i,
        type: "POST",
        dataType: "application/json",
        crossDomain: !0,
        asynchronous: !1,
        xhrFields: {
            withCredentials: !0
        },
        timeout: 1e4,
        data: {
            fileObj: t
        }
    }).always(function(e) {
        var t;
        200 == e.status ? 0 == (t = JSON.parse(e.responseText)).response.result ? "function" == typeof n && n() : -1245 == t.response.result ? termReinitialize() : (alertify_log(t.response.message + ". Please try again. <br>Please contact support@codetantra.com if the problem persists.", "error", 5e3), 
        1 === getCTMode() || 2 === getCTMode() || 3 === getCTMode() ? logResponseOnSubmit("saveFailed", t.response.message, t.response.result) : 4 === getCTMode() && logResponseOnSubmit("saveFailedInTest", t.response.message, t.response.result)) : (1 != getCTMode() && 2 != getCTMode() && 3 != getCTMode() || $(".submitBtn").hasClass("disabled") && $(".submitBtn").removeClass("disabled"), 
        alertify_log("Error Saving. Please try again. <br>Please contact support@codetantra.com if the problem persists.", "error", 5e3), 
        logErrorInBackend("On Save via Term", {
            transportType: consoleTermSoc.socket.getTransport().name,
            connected: consoleTermSoc.socket.connected
        }), 1 === getCTMode() || 2 === getCTMode() || 3 === getCTMode() ? logResponseOnSubmit("saveFailed", t.response.message, t.response.result) : 4 === getCTMode() && logResponseOnSubmit("saveFailedInTest", t.response.message, t.response.result));
    }));
}

function logErrorInBackend(e, t) {
    _crd_socket.emit("logErrorInBackend", {
        eventName: e,
        errorObj: t
    });
}

var cExecutionCmd, cCompilationInProgress = !1, cCompilationOutputLines = [], compilationCmd = null, cExecutionInProgress = !1, cExecutionInProgressOnlyInTerminal = !1, cExecutionOutputLines = "";

function buildFile(e, t) {
    (isCProgQuestion() || isPythonQuestion() || isJavaQuestion()) && "Copy Writing" == e && (e = t.substring(t.indexOf("-") + 1), 
    callCCompileCmd($("#copyWritingLi-" + e).find("input").val().trim(), "-c", function() {}));
}

function getCmd(e, t, n, o, i) {
    var r = getCurrentLanguage(), r = langVsLangObj[r].commands[e];
    return new Function("mainFileName", "filesContentArr", "extraCompileOptions", "linkerOptions", r)(t, n, o || "", i || "");
}

function initializationBeforeCallCCompileCmd(e, t, n, o) {
    0 < e.lastIndexOf(".") && e.substring(0, e.lastIndexOf("."));
    var i = getProgLangExtraInfo(), r = "", i = ("" == t && i.globalVar.hasOwnProperty("EXTRA_COMPILATION_OPTIONS") && ((t = i.globalVar.EXTRA_COMPILATION_OPTIONS).endsWith("-lm") || -1 != t.indexOf("-lm ")) && (r = " -lm", 
    t = t.replace("-lm", "")), substituteConsoleCmdGlobalVars("$HOME/CT_WORK_DIR/CURRENT_EXERCISE_DIR", i.globalVar)), s = getCmd("compile", e, o, t, r), a = getCmd("run", e, o, t, r), n = (s = 1 === getCTMode() && n ? getCmd("debugCompile", e, o, t, r) : s).split(" ");
    return {
        compilerName: n[0],
        targetDir: i,
        compilationCmdOptionsArr: n.splice(1).filter(function(e) {
            return e;
        }),
        runCmd: a,
        containerType: langVsLangObj[getCurrentLanguage()].containerType
    };
}

function callCCompileCmd(e, t, n) {
    var e = initializationBeforeCallCCompileCmd(e, t, !1, cq.filesContentArr), t = e.compilerName, o = e.targetDir, i = e.compilationCmdOptionsArr;
    compilationCmd = e.compilationCmd, cCompilationInProgress && consoleTermSoc.emit("data", ""), 
    cCompilationOutputLines = [], cCompilationOutputText = "", clearCompilationErrors(), 
    $("#compilationProgressDiv2").show(), callPcc(o, t, i, n);
}

function getJavaFileNamesForCompilation() {
    var e, t;
    return 0 == getCTMode() ? (t = [], "Copy Writing" === (e = $("#questionType option:selected").text()) ? $("#copyWritingUl .copyWritingFileName").each(function() {
        t.push($(this).val());
    }) : "Compilation Errors" === e && $("#correctContentUl .correctContentFileName").each(function() {
        t.push($(this).val());
    }), t = _.map(_.filter(t, function(e) {
        return e.endsWith(".java");
    }), function(e) {
        return e.replace(/^\/+/, "");
    })) : cq.filesContentArr ? t = _.map(_.filter(cq.filesContentArr, function(e) {
        return e.fileName.endsWith(".java");
    }), function(e) {
        return e.fileName.replace(/^\/+/, "");
    }) : "Unkown FileNames";
}

function callPccForDebug(t, n) {
    var e = initializationBeforeCallCCompileCmd(cq.mainFileName, "", !0, cq.filesContentArr), o = e.targetDir, i = e.compilerName, e = e.compilationCmdOptionsArr, r = "https://" + consoleUrl + "/pcc?" + getExtraTermUrlParams();
    $.ajax({
        url: r,
        type: "POST",
        dataType: "application/json",
        crossDomain: !0,
        asynchronous: !1,
        xhrFields: {
            withCredentials: !0
        },
        timeout: 2e4,
        data: {
            targetDir: o,
            cmd: i,
            compilationCmdOptionsArr: e
        }
    }).always(function(e) {
        (200 != e.status || "Compilation killed." === JSON.parse(e.responseText).response.message ? n : t)();
    });
}

function callPcc(e, t, n, o) {
    var i = "https://" + consoleUrl + "/pcc?" + getExtraTermUrlParams(), i = (cCompilationInProgress = !0, 
    consoleTerm.write(compilationCmd + "\r\n"), $.ajax({
        url: i,
        type: "POST",
        dataType: "application/json",
        crossDomain: !0,
        asynchronous: !1,
        xhrFields: {
            withCredentials: !0
        },
        timeout: 2e4,
        data: {
            targetDir: e,
            cmd: t,
            compilationCmdOptionsArr: n
        }
    }));
    consoleTermSoc.emit("data", "clear \r"), i.always(function(e) {
        $("#compilationProgressDiv2").hide(), cCompilationInProgress = !1, 200 == e.status ? (e = JSON.parse(e.responseText), 
        consoleTerm.write(compilationCmd + "\r\n"), e.response.hasOwnProperty("message") && "Compilation killed." === e.response.message ? (enableSubmit(), 
        alertify_log("Compilation timed out. Please try again.", "error", 4e3), 
        logResponseOnSubmit("compilationError", "Compilation killed", "-2823")) : (e.response.hasOwnProperty("output") ? (cCompilationOutputLines = e.response.output.split("\n"), 
        consoleTerm.write(e.response.output.replace(/\r\n/g, "_ct_replace_marker_").replace(/\n/g, "\r\n").replace(/_ct_replace_marker_/g, "\r\n")), 
        0 !== getCTMode() && consoleTermSoc.emit("data", "\r"), processCompilationOutput()) : consoleTermSoc.emit("data", "\r"), 
        "function" == typeof o && o())) : (1 === getCTMode() || 2 === getCTMode() || 3 === getCTMode() ? enableSubmit() : 4 === getCTMode() && enableExecuteBtn(), 
        alertify_log("Error while compiling. Please retry or contact support@codetantra.com if the problem persists. ErrorCode: -2822", "error", 8e3), 
        logResponseOnSubmit("compilationError", "Error while compiling", "-2822"));
    });
}

function isCProgQuestion() {
    var e = getCurrentLanguage();
    return "C" === e || "C++" === e;
}

function isWebJavaQuestion() {
    return "Web-Java" === getCurrentLanguage();
}

function isIoTProgQuestion() {
    return "IoT-Arduino" === getCurrentLanguage();
}

function isMultiLangProgQuestion() {
    return "Multi Language" === (0 == getCTMode() ? progLanguagesMap[$("#progLanguage").val()] : progLanguagesMap[cq.progLanguage]).language;
}

function isPythonQuestion() {
    return "Python" === getCurrentLanguage();
}

function isJavaQuestion() {
    return "Java" === getCurrentLanguage();
}

function isRlangQuestion() {
    return "R" === getCurrentLanguage();
}

function isSqlQuestion() {
    return "SQL" === getCurrentLanguage();
}

function isWebQuestion() {
    return "Web" === getCurrentLanguage();
}

function isProgQuestion() {
    var e = getCurrentLanguage();
    return !isMultiLangProgQuestion() && "No Language" !== e && langVsLangObj.hasOwnProperty(e);
}

function executeFile(e, t, n) {
    isProgQuestion() ? executeFileForC(e, t, n) : isWebJavaQuestion() ? executeFileForWebJava(e, t) : isIoTProgQuestion() ? executeFileForIoT(e, t) : alertify_log("Execution is not yet implemented for Prog. Language : " + getCurrentLanguage(), "warning", 2e3);
}

function executeFileForC(e, t, n) {
    if (consoleTermInitializingInProgress) setTimeout(function() {
        executeFile(e, t, n);
    }, 500); else {
        var o = [], i = !1, r = "";
        if (0 == getCTMode()) {
            var s = "Copy Writing" != e ? "correctContentMainFileName" : "mainFileName";
            if ("" == (r = $("#" + s).val().trim())) return alertify_log("Main File Name should be provided."), 
            void $("#" + s).focus();
            i = $("#executeUsingCmdArgs").is(":checked"), o = $("#cmdArgs").tagsinput("tags");
        } else r = cq.mainFileName, i = !(!isMultiLangProgQuestion() || "function-boiler" !== cq.multiLanguageBoilerplate) || cq.hasOwnProperty("executeUsingCmdArgs") && cq.executeUsingCmdArgs;
        cExecutionInProgress && consoleTermSoc.emit("data", ""), callCCompileCmd(r, "", function() {
            callCExecute(r, cq.filesContentArr, !0, i, o, n);
        });
    }
}

function cExecutionCompleted(e) {
    e || hasCompilationErrors(cCompilationOutputLines) ? enableSubmit() : null != cExecutionOutputLines && cExecutionOutputLines.endsWith("\nTerminated\n") && (alertify.alert("<h2 style='color:red'>Program Terminated</h2>Your <b>program</b> has been <code>terminiated</code> by the system,<br> as it was taking a long time to execute.<br><br>Please verify your code to check if there is an <c style='color:red'>infinite loop</c>."), 
    enableSubmit());
}

function hasCompilationErrors(e) {
    for (var t = 0; t < e.length; t++) if ("error" == e[t].kind) return !0;
    return !1;
}

function callCExecute(e, t, n, o, i, r) {
    cCompilationInProgress ? setTimeout(function() {
        callCExecute(e, t, n, o, i, r);
    }, 500) : void 0 !== n && n && hasCompilationErrors(cCompilationOutputLines) ? (alertify_log("Compilation Failed!", "error", 4e3), 
    "function" == typeof r && r({
        msg: "compilationError"
    })) : ("function" == typeof r && r({
        msg: "compilationSuccess"
    }), disableSubmit(), clearCompilationErrors(), cExecutionOutputLines = "", cExecutionFlowArr = [], 
    cExecutionCmd = getCmd("run", e, t), o ? 0 === getCTMode() ? (i = _.map(i, function(e) {
        return e.replace(/[ "'\\]/g, "\\$&");
    }).join(" "), cExecutionCmd += " " + i + "\r") : cExecutionCmd += " " : cExecutionCmd += "\r", 
    "undefined" != typeof runClicked && runClicked && ($("#terminalTab").tab("show"), 
    cExecutionInProgressOnlyInTerminal = !0), cExecutionInProgressOnlyInTerminal || 0 === getCTMode() ? (consoleTermSoc.emit("data", cExecutionCmd), 
    cExecutionInProgressOnlyInTerminal || (cExecutionInProgress = !0), 0 === getCTMode() && $("html, body").animate({
        scrollTop: $("#consoleDiv").offset().top - 100
    }, 500), consoleTerm.focus(), setTimeout(function() {
        cExecutionInProgressOnlyInTerminal && enterUserInputIntro();
    }, 500)) : testCases.cExecutionTerminated(!1));
}

function markReadOnlyRange(e) {
    var t = $("#" + e).data("editor").selection.getAllRanges();
    get_updated_readonly_ranges(e, t);
}

function onReSize() {
    $("#consoleContainerDiv").hasClass("active") && consoleTermFitAddon.fit();
}

function enterUserInputIntro() {
    var e = $(".xterm-screen").width(), t = $(".xterm-screen").height(), e = Math.round(consoleTerm._core.buffer.x * e / consoleTerm.cols), t = Math.round(consoleTerm._core.buffer.y * t / consoleTerm.rows), e = "<div id='popOverPositionerDiv' style='position: absolute; z-index: 999; min-width: 13rem; left:" + parseInt(e + 15) + "px;top:" + parseInt(t + 10) + "px; '><a id='hoverPopover' href='#' data-toggle='popover' data-content='Test your code here manually. When you are done, click on Submit'></a></div>";
    $(".xterm-screen").append(e), $('[data-toggle="popover"]').popover({
        container: "#popOverPositionerDiv"
    }), $("#hoverPopover")[0].click(), consoleTerm.focus();
}

var testCases = function() {
    function n(e, t, n, o, i, r, s) {
        var a, l;
        (e.length || s) && (void 0 !== n && "" !== n.trim() || (n = ""), s && (o = $("#executeUsingCmdArgs").is(":checked"), 
        i = $("#cmdArgs").tagsinput("tags")), l = $("#showWhiteSpaces"), 0 === (a = $("#consoleContainerDiv")).find("#execResultsContainerDiv").length && (a.append(testCases.getExecutionResultsTable()), 
        (l = $("#showWhiteSpaces")).bootstrapSwitch()), l.bootstrapSwitch("setState", !0), 
        l.on("switch-change", function(e, t) {
            $(".showHideWhiteSpaceCharacters").css("opacity", t.value ? .6 : 0);
        }), l = (a = $("#cExecutionOutResultsTable")).find("table").length, a.append(testCases.getExecutionResultsTableBody(t, r, n, e, o, i, l, s)), 
        s && (oe.initializeEditors(l), $("#edit-cmd-args-" + l).tagsinput({
            allowDuplicates: !0
        })), (t = $("#currentCTestResult-" + l)).data("cExecutionFlowArr", e), t.data("cmdArgs", i), 
        1 === a.children().length ? ($("#partialMarksPec-" + l).attr("disabled", "disabled"), 
        $("#showCurrentCTestResult-" + l).attr("disabled", "disabled")) : $(".partial-marks, .showCTestResult").removeAttr("disabled"), 
        partialMarksValidationToAllowOnlyNumbers("#partialMarksPec-" + l), "5cf8b75c49506923461e0972" !== $("#progLanguage").val()) && $(".generateTestCasesBtn").removeClass("hide");
    }
    function e() {
        $("#cExecutionOutResultsTable").empty();
    }
    return $(document).on("click", ".ct-clear-all-test-cases", e), $(document).on("click", ".ct-clear-all-partial-marks", function() {
        $(".partial-marks").val("");
    }), $(document).on("click", ".ct-add-test-cases", function() {
        n([], !0, void 0, !1, [], !1, !0), $("#executeUsingCmdArgs").is(":checked") && $("#edit-cmd-args").tagsinput({
            allowDuplicates: !0
        });
    }), Object.freeze({
        cExecutionTerminated: function(e) {
            var t;
            cExecutionInProgressOnlyInTerminal = cExecutionInProgress = cCompilationInProgress = !1, 
            e = e, l("in processCExecutionOutput() ...>" + cExecutionOutputLines + "<"), 
            0 == getCTMode() ? (t = $("#executeUsingCmdArgs").is(":checked"), n(cExecutionFlowArr, !0, "", t, [].concat($("#cmdArgs").tagsinput("tags")), !1), 
            t && $("#cmdArgs").tagsinput("removeAll")) : cExecutionCompleted(e), 
            userTypedInput = "", userTypedInputTotalLength = indexOfPrevOutput = 0;
        },
        initCExecutionResultsTable: n,
        getExecutionResultsTable: function() {
            return "<div class='row col-sm-12' id='execResultsContainerDiv' style='margin-top: 10px;'>\t\t<div style='display: flex;'>\t\t    <div style='overflow: auto; height: 340px; margin-top: 10px; flex-grow: 1;' class='execution-results-container'>\t\t\t    <table class='table table-bordered table-condensed'>\t\t\t\t    <thead>\t\t\t\t\t    <tr style='background-color: #2C3E50; color: white;' class='fixed-header'>\t\t\t\t\t\t    <th class='td-center'>#</th>\t\t\t\t\t\t    <th class='td-center'>Test Cases</th>\t\t\t\t\t\t    <th class='td-center' style='width: 5%'>Show</th>\t\t\t\t\t\t    <th class='td-center' style='width: 5%' title='If you select this option, your code should not invoke any console inputs( e.g scanf, Scanner, getChar and input )'>Allow Random Order</th>\t\t\t\t\t\t    <th class='td-center' title='If you want partial marks possible for this question, you need to provide percentage values in the field below between 1-99 for all the test cases. The total should add up to 100.'>Partial Marks</th>\t\t\t\t\t    </tr>\t\t\t\t    </thead>\t\t\t\t    <tbody style='min-height:320px; overflow-y:auto' id='cExecutionOutResultsTable'></tbody>\t\t\t    </table>\t\t    </div>\t\t    <div style='margin-left: 2%; margin-top: 10px;'>             <div class='form-group'>\t\t\t        <label for='showWhiteSpaces' class='control-label'>Show Invisible Characters</label>\t\t\t        <div>                     <input class='form-control bs-switch' type='checkbox' id='showWhiteSpaces' name='showWhiteSpaces' data-on-label='Yes' data-off-label='No' data-on='success' data-off='warning'>                 </div>             </div>\t\t        <div class='btn-group-vertical text-center' role='group'>\t\t\t        <button class='btn btn-sm btn-warning ct-clear-all-test-cases'>Clear All Test Cases</button>\t\t\t        <button class='btn btn-sm btn-warning ct-clear-all-partial-marks' style='margin-top: 10px;'>Clear All Partial Marks</button>\t\t\t        <button class='btn btn-sm btn-success ct-add-test-cases' style='margin-top: 10px;'>Add Test Case</button>\t\t\t        <button class='btn btn-sm btn-success generateTestCasesBtn hide' style='margin-top: 10px;'>Generate Test Cases</button>\t\t        </div>\t\t    </div>\t    </div>     <hr></div>";
        },
        getExecutionResultsTableBody: function(e, t, n, o, i, r, s, a) {
            return "<tr> <td style='text-align: center; width: 3%'><span class='tdIndex'>" + (s + 1) + "</span><div><i class='fa fa-trash text-danger fa-lg' style='cursor: pointer;' onclick='deleteTestCase(this)'></i></div></td>\t<td style='width: 69%; padding: 10px;'>\t\t<span id='currentCTestResult-" + s + "' class='currentCTestResult' data-i=" + s + ">" + (a ? oe.renderNoBoilerTestCase(s, [], a) : oe.renderTestCaseTable(o, i, r, s)) + "</span>\t</td>\t<td style='text-align: center; width: 5%'>\t\t<input type=checkbox class='showCTestResult' id='showCurrentCTestResult-" + s + "' " + (e ? "checked" : "") + " />\t</td>\t<td style='text-align: center; width: 16%;'>\t\t<input type=checkbox class='allowRandomOrder' id='allowRandomOrderCurrentCTestResult-" + s + "' " + (t ? "checked" : "") + " />\t</td>\t<td style='text-align: center; width:7%;'>\t\t<div class='input-group'>\t\t\t<input type='text' class='form-control partial-marks' id='partialMarksPec-" + s + "' class='form-control partial-marks' style='width: auto;' aria-label='Partial Marks' value='" + n + "' aria-describedby='percentage'>\t\t\t<div class='input-group-addon'>\t\t\t\t<span class='input-group-text' id='percentage-" + s + "'>%</span>\t\t\t</div>\t\t</div>\t</td></tr>";
        },
        cExecutionInProgressOnlyInTerminalTerminated: function() {
            runClicked = cExecutionInProgressOnlyInTerminal = !1, "function" == typeof window.enableSubmit && enableSubmit(), 
            userTypedInput = "", userTypedInputTotalLength = indexOfPrevOutput = 0;
        },
        clearCExecutionResults: e
    });
}();
//# sourceMappingURL=solemert.min.js.map