var dynamicStepsFlag = !0, helpIntrojs = null;

function launchHelp() {
    if ($("#myModal").is(":visible")) return !1;
    $(".bs-callout").eq(0).attr("id", "unit_1_subtopic_1"), $(".learnBtn").eq(0).attr("id", "learnBtn"), 
    $(".reviseBtn").eq(0).attr("id", "reviseBtn"), $(".testBtn").eq(0).attr("id", "testBtn"), 
    (helpIntrojs = introJs()).setOptions({
        steps: [ {
            element: "#unit_1_subtopic_1",
            intro: "Each topic contains multiple sub-topics. The <span class='ct-code-b-yellow'>small buttons</span> numbered <span class='ct-code-b-yellow'>1, 2, 3</span>, etc., are the learning assignments.",
            position: "left"
        }, {
            element: "#learnBtn",
            intro: "When the learning assignments are not yet complete, clicking on the <span class='ct-code-b-yellow'>Learn</span> button will launch the tutor.",
            position: "left"
        }, {
            element: "#reviseBtn",
            intro: "The <span class='ct-code-b-yellow'>Revise</span> button is enabled only after all the learning assignments are completed.",
            position: "bottom"
        }, {
            element: "#testBtn",
            intro: "The <span class='ct-code-b-yellow'>Self Test</span> button is enabled only after all the learning assignments are completed.",
            position: "right"
        }, {
            element: "#menuBarHelp",
            intro: "",
            tooltipClass: "d-none"
        } ]
    }), helpIntrojs.onafterchange(function(e) {
        switch (helpIntrojs.refresh(), $(".introjs-prevbutton").show(), $(".introjs-nextbutton").show(), 
        e.id) {
          case "unit_1_subtopic_1":
            $(".introjs-prevbutton").hide();
            break;

          case "menuBarHelp":
            $(".introjs-helperLayer").one("transitionend", function() {
                setTimeout(function() {
                    helpIntrojs.exit();
                }, 1e3);
            });
        }
    }), helpIntrojs.setOption("showStepNumbers", !1), helpIntrojs.setOption("exitOnOverlayClick", !1), 
    helpIntrojs.setOption("exitOnEsc", !1), helpIntrojs.setOption("keyboardNavigation", !1), 
    0 < $(".bs-callout").length && helpIntrojs.start(), $(".introjs-skipbutton").addClass("pull-left"), 
    $(".introjs-bullets").hide();
}

var helpLearnIntrojs = null;

function launchLearnHelp() {
    if (pauseMedia(), $(".introjs-overlay").is(":visible")) return !1;
    dynamicStepsFlag = !0, $(".submitBtn").attr("id", "submitBtn"), $(".nextBtn").attr("id", "nextBtn"), 
    (helpLearnIntrojs = introJs()).setOptions({
        steps: [ {
            element: "#questionText",
            intro: "This section contains the text which describes the learning objective or a problem statement.",
            position: "bottom"
        }, {
            element: "#learnHelp",
            intro: "",
            tooltipClass: "d-none"
        } ]
    }), helpLearnIntrojs.onafterchange(function(e) {
        helpLearnIntrojs.refresh();
        e = e.id;
        switch ($(".introjs-prevbutton").show(), $(".introjs-nextbutton").show(), 
        e) {
          case "learnHelp":
            $(".introjs-helperLayer").one("transitionend", function() {
                setTimeout(function() {
                    closeLaunchHelpIntro();
                }, 1e3);
            });
            break;

          case "questionText":
            $(".modal-open").css({
                overflow: "scroll"
            }), $(".introjs-prevbutton").hide(), 0 < $("#questionText .extLink").length && ($("#questionText .extLink").eq(0).attr("id", "wiki_link_1"), 
            helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#wiki_link_1", "A few words like these marked in violet are clickable links, clicking on which provide more information regarding them.", "right"))), 
            0 < $("#questionText .fa-eye").length && ($("#questionText .fa-eye").eq(0).parent().attr("id", "live_demo"), 
            $("#questionText .fa-eye").parent().on("click", closeLaunchHelpIntro), 
            helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#live_demo", "These are special buttons that launch <span class='ct-code-b-yellow'>Interactive Videos</span> which help in undestanding the concepts presented.", "top"))), 
            0 < $("#qInstructions").length && helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#qInstructions", "Read the instractions about the question.", "top")), 
            "Spoken Language" == questionTypesMap[cq.questionType].description && dynamicStepsFlag ? (dynamicStepsFlag = !dynamicStepsFlag, 
            helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#recordButton", "After reading the text presented in the above section, you will have to press and hold the Microphone <i class='fa fa-microphone fa-2x'></i> button and speak out the answer connected to your mic.", "top")), 
            $(".submitBtn").is(":visible") ? helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#submitBtn", "After recording your answer, click on <span class='ct-code-b-yellow'>Submit</span> to proceed to the next assignment.", "left")) : helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#nextBtn", "After submitting the correct answer, click on <span class='ct-code-b-yellow'>Next</span> to proceed to the next assignment.", "left"))) : "Multiple Choice - Multiple Answers" == questionTypesMap[cq.questionType].description && dynamicStepsFlag ? (dynamicStepsFlag = !dynamicStepsFlag, 
            helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#mcContainerDiv", "After understanding the text presented in the above section, you will have to select all the applicable correct statements.", "top")), 
            $(".submitBtn").is(":visible") ? helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#submitBtn", "After selecting the correct choices, click on <span class='ct-code-b-yellow'>Submit</span> to proceed to the next assignment.", "left")) : helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#nextBtn", "After submitting the correct choices, click on <span class='ct-code-b-yellow'>Next</span> to proceed to the next assignment.", "left"))) : "Compilation Errors" == questionTypesMap[cq.questionType].description && dynamicStepsFlag ? (dynamicStepsFlag = !dynamicStepsFlag, 
            $("label[for=compilationErrorEditor]").parent().attr("id", "compilationErrorQuestionTabPanelsDiv"), 
            helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#compilationErrorQuestionTabPanelsDiv", "This section is where you will make changes or write code according to the problem statement provided above.", "right")), 
            $(".submitBtn").is(":visible") && helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#submitBtn", "After finishing the above coding assignment, click on <span class='ct-code-b-yellow'>Submit</span> to proceed to the next assignment.", "left")), 
            $("#consoleContainerDiv").is(":visible") && helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#consoleContainerDiv", "This section contains a Linux terminal/shell where you can directly interact using Linux commands.", "auto")), 
            $("#executionOutViewport").is(":visible") && helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#executionOutViewport", "This section would display errors and results for the coding being executed.", "left")), 
            $(".nextBtn").is(":visible") && helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#nextBtn", "After submitting the above coding assignment, click on <span class='ct-code-b-yellow'>Next</span> to proceed to the next assignment.", "left"))) : "Copy Writing" == questionTypesMap[cq.questionType].description && dynamicStepsFlag && (dynamicStepsFlag = !dynamicStepsFlag, 
            $(".col-md-6:visible").eq(0).attr("id", "copyWritingLeftPanel"), $(".col-md-6:visible").eq(1).attr("id", "copyWritingRightPanel"), 
            helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#copyWritingLeftPanel", "This section contains the code which you need to understand according to the explanation provided above.", "right")), 
            helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#copyWritingRightPanel", "After comprehending the code provided in left-side section, you will have to reproduce the same here without making any alterations. This provides you an opportunity to learn the correct coding conventions and also to test your code-reading and comprehension levels.", "left")), 
            $(".submitBtn").is(":visible") && helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#submitBtn", "After finishing the above coding assignment, click on <span class='ct-code-b-yellow'>Submit</span> to proceed to the next assignment.", "left")), 
            $("#consoleContainerDiv").is(":visible") && helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#consoleContainerDiv", "This section contains a Linux terminal/shell where you can directly interact using Linux commands.", "right")), 
            $(".nextBtn").is(":visible")) && helpLearnIntrojs.insertOption(helpLearnIntrojs._introItems.length - 1, getStep("#nextBtn", "After submitting the above coding assignment, click on <span class='ct-code-b-yellow'>Next</span> to proceed to the next assignment.", "left"));
        }
    }), helpLearnIntrojs.setOption("showStepNumbers", !1), helpLearnIntrojs.setOption("exitOnOverlayClick", !1), 
    helpLearnIntrojs.setOption("exitOnEsc", !1), helpLearnIntrojs.setOption("keyboardNavigation", !1), 
    helpLearnIntrojs.onexit(closeLaunchHelpIntro), helpLearnIntrojs.start(), $(".introjs-skipbutton").addClass("pull-left"), 
    $(".introjs-bullets").hide();
}

function closeLaunchHelpIntro() {
    $(".modal-open").css("overflow", ""), void 0 !== helpIntrojs && null != helpIntrojs && helpIntrojs.exit(), 
    void 0 !== helpLearnIntrojs && null != helpLearnIntrojs && helpLearnIntrojs.exit();
}

function getStep(e, t, n, o) {
    var i = {};
    return void 0 !== e && (i.element = e), void 0 !== t && (i.intro = t), void 0 !== n && (i.position = n), 
    void 0 !== o && (i.tooltipClass = o), i;
}
//# sourceMappingURL=intro-td.min.js.map