var url = "/secure/rest/eu", s3Location = "https://s3.ap-south-1.amazonaws.com/facultynotes/images/", memberId = _ct_uid;

function initQuillEditor() {
    var e = new Quill("#questionTextDesignView", {
        theme: "snow",
        modules: {
            toolbar: [ [ "bold", "italic", "underline", "strike", "link" ], [ "blockquote", "code-block" ], [ "video", "formula", "image" ], [ {
                header: 1
            }, {
                header: 2
            } ], [ {
                list: "ordered"
            }, {
                list: "bullet"
            } ], [ {
                script: "sub"
            }, {
                script: "super"
            } ], [ {
                indent: "-1"
            }, {
                indent: "+1"
            } ], [ {
                direction: "rtl"
            } ], [ {
                size: [ "small", !1, "large", "huge" ]
            } ], [ {
                header: [ 1, 2, 3, 4, 5, 6, !1 ]
            } ], [ {
                color: []
            }, {
                background: []
            } ], [ {
                font: []
            } ], [ {
                align: []
            } ], [ "clean" ] ],
            formula: !0,
            imageDrop: !0,
            imageResize: {}
        },
        placeholder: "Type content here..."
    });
    $("#questionTextDesignView").data("quillEditor", e);
}

function closeMemberNotesClicked() {
    var e, a, o;
    currentQHasMemberNotes() ? memberNotesMap.hasOwnProperty(memberId) && (e = memberNotesMap[memberId], 
    a = $("#showAll").val(), o = "", isFaculty && e.hasOwnProperty("showAll") && e.showAll !== a && (o += "The Show All status has changed."), 
    a = $("#questionTextDesignView").data("quillEditor").root.innerHTML, "quill" !== e.editor && ("" !== o && (o += "<br>"), 
    o += "The editor type has changed."), a !== e.notes && ("" !== o && (o += "<br>"), 
    o += "The content of notes has changed."), "" !== o ? Swal.fire({
        icon: "question",
        text: "Would you like to close and discard the changes?",
        showCancelButton: !0,
        confirmButtonText: "Yes",
        cancelButtonText: "No"
    }).then(function(e) {
        e.isConfirmed && (clearMemberNotes(), closeMemberNotesModal());
    }) : closeMemberNotesModal()) : isQuillEmpty() ? closeMemberNotesModal() : Swal.fire({
        icon: "question",
        text: "Are you sure you want to close and discard the notes?",
        showCancelButton: !0,
        confirmButtonText: "Yes",
        cancelButtonText: "No"
    }).then(function(e) {
        e.isConfirmed && (clearMemberNotes(), closeMemberNotesModal());
    });
}

function closeMemberNotesModal() {
    $("#memberNotesModal").modal("hide"), $("#memberNotesModal").off("hidden.bs.modal").on("hidden.bs.modal", function() {
        $("body").addClass("modal-open");
    });
}

function closeFacultyNotesModal() {
    $("#facultyNotesModal").modal("hide"), $("#facultyNotesModal").off("hidden.bs.modal").on("hidden.bs.modal", function() {
        $("body").addClass("modal-open");
    });
}

function currentQHasMemberNotes() {
    var e = !1;
    if (cq.hasOwnProperty("memberNotesArr") && 0 < cq.memberNotesArr.length) for (var a = 0; a < cq.memberNotesArr.length; a++) if (cq.memberNotesArr[a].memberId === memberId) {
        e = !0;
        break;
    }
    return e;
}

function getFacultyNotes() {
    var e = [];
    if (cq.hasOwnProperty("memberNotesArr") && 0 < cq.memberNotesArr.length) for (var a = 0; a < cq.memberNotesArr.length; a++) {
        var o = cq.memberNotesArr[a];
        o.memberId !== memberId && e.push(o);
    }
    return e;
}

function initMemberNotes() {
    var e;
    initAvailableImages(), $("#title").html(cq.displayText), currentQHasMemberNotes() ? memberNotesMap.hasOwnProperty(memberId) && (e = memberNotesMap[memberId], 
    $("#showAll").val(e.visibilty), $("#notesCreatedUpdatedTimeDiv").removeClass("d-none").addClass("d-md-flex justify-content-start"), 
    $("#notesUpdatedTime").html(moment(e.updatedTime.$date).format("DD MMM YYYY HH:mm")), 
    $("#notesCreatedTime").html(moment(e.createdTime.$date).format("DD MMM YYYY HH:mm")), 
    $("#questionTextDesignView").data("quillEditor").root.innerHTML = e.notes || "") : clearMemberNotes();
}

function clearMemberNotes() {
    $("#notesCreatedUpdatedTimeDiv").addClass("d-none").removeClass("d-md-flex justify-content-start"), 
    $("#questionTextDesignView").data("quillEditor").root.innerHTML = "";
}

function saveMemberNotes() {
    if ($("#memberNotesForm").valid()) {
        var e = form2object("memberNotesForm");
        if (e.notes = $("#questionTextDesignView").data("quillEditor").root.innerHTML.trim().replace(/(?:<p><br><\/p>)+$/g, ""), 
        e.editor = "quill", isFaculty && (o = $("#showAll").val()) && (e.visibilty = o), 
        isQuillEmpty()) alertify.error("Please click on Delete to remove the notes.", 6); else {
            e.questionId = cq._id.$oid, memberNotesMap.hasOwnProperty(memberId) ? (o = memberNotesMap[memberId], 
            a = "edit", e.memberNotesId = o._id.$oid) : a = "add";
            var a, o = JSON.stringify(e);
            if (204800 < o.length) return alertify.notify("Please keep the size of notes to less than 200 KB.<br>Curretly it is " + parseInt(o.length / 1024) + " KB.<br>If you have used images, reduce their size and try again.", "error", 10), 
            !1;
            delete e.imageURL, delete e[""], delete e.title;
            var t = $.ajax({
                type: "POST",
                url: url + "/nms?actionType=" + a,
                headers: jsonHeaders,
                dataType: "json",
                data: JSON.stringify(e)
            });
            t.done(function(e) {
                alertify.notify("Successfully saved notes.", "success", 6), cq.memberNotesArr = e.ref.memberNotesArr, 
                displayNotesInExtraInfo();
            }), t.fail(function() {
                t.getResponseHeader("X-SessionTimeout") ? openLoginDialog() : alertify.notify("Could not add...[please see the console]", "error", 8);
            });
        }
    } else alertify.error("Please click on Delete to remove the notes.", "6");
}

function isQuillEmpty() {
    var e = $("#questionTextDesignView");
    return "\n" === e.data("quillEditor").getContents().ops[0].insert && e.data("quillEditor").getLength() < 2;
}

function deleteMemberNotes() {
    currentQHasMemberNotes() ? alertify.confirm("Are you sure you want to delete the notes?", function(e) {
        var a, o;
        e && ((e = form2object("memberNotesForm")).memberId = memberId, e.questionId = cq._id.$oid, 
        a = memberNotesMap[memberId], e.memberNotesId = a._id.$oid, delete e.title, 
        (o = $.ajax({
            type: "POST",
            url: url + "/nms?actionType=delete",
            headers: jsonHeaders,
            dataType: "json",
            data: JSON.stringify(e)
        })).done(function(e) {
            alertify.notify("Successfully deleted the notes.", "success", 6), 0 == e.result && (cq.memberNotesArr = e.ref.memberNotesArr, 
            displayNotesInExtraInfo(), closeMemberNotesModal(), clearMemberNotes());
        }), o.fail(function() {
            o.getResponseHeader("X-SessionTimeout") ? openLoginDialog() : alertify.notify("Could not add...[please see the console]", "error", 8);
        }));
    }) : isQuillEmpty() || alertify.confirm("Are you sure you want to delete the notes?", function(e) {
        e && clearMemberNotes();
    });
}

function showImageUploadModal() {
    resetImageUploadModal(), initFaculties(), genTable(jsonMemberImagesArr), $("#imageUploadModal").modal({
        backdrop: "static",
        keyboard: !1,
        show: !0
    });
}

function closeImageUploadModal() {
    $("#imageUploadModal").modal("d-none"), $("#imageUploadModal").off("hidden.bs.modal").on("hidden.bs.modal", function() {
        $("body").addClass("modal-open");
    });
}

function resetImageUploadModal() {
    $("#uploadedImage img").attr("src", "/img/dummy.png").css({
        width: "100%",
        height: "100%"
    }), $("#s3ImageUploadForm")[0].reset(), $("#imageUploadForm")[0].reset(), $("#actionType").val("add"), 
    $("#_id").val(""), $("#availableFaculties").addClass("d-none").select2("val", []);
}

function initFaculties() {
    var e, a = [];
    for (e in jsonFacultiesArr) {
        var o = {
            id: jsonFacultiesArr[e]._id.$oid,
            text: jsonFacultiesArr[e].loginId
        };
        jsonFacultiesArr[e]._id.$oid === memberId && (o.locked = !0, o.val = memberId), 
        a.push(o);
    }
    $("#availableFaculties").val(memberId).select2({
        data: a,
        multiple: !0,
        allowClear: !0
    });
}

function initAvailableImages() {
    var a = $("#availableImages");
    a.empty(), jsonImagesArr.forEach(function(e) {
        a.append($("<option></option>").val(e._id.$oid).attr("imageurl", s3Location + e._id.$oid).html(e.title));
    }), a.select2(), $("#imageURL").val($("#availableImages option:selected").attr("imageurl"));
}

function imagePreview(e) {
    var a;
    e.files && e.files[0] && ((a = new FileReader()).onload = function(e) {
        $("#uploadedImage img").removeAttr("style").attr("src", e.target.result);
    }, a.readAsDataURL(e.files[0]), a = e.files[0].size, a /= 1024, $("#imgSize").val(a), 
    $("#s3ImageUploadForm input[type='file']").attr("required", "required"));
}

function isDuplicateEntry() {
    var o = $("#imageUploadedTitle").val().trim(), t = !1, o = o.toLowerCase();
    return $.each(jsonImagesArr, function(e, a) {
        a.title.toLowerCase() === o && (t = !0);
    }), t;
}

function uploadImageIntoMongo() {
    var e, a, o, t, r, s;
    $("#s3ImageUploadForm").valid() && $("#imageUploadForm").valid() && (e = $("#imgSize"), 
    500 <= parseInt(e.val()) && !confirm("Confirm Message") || ("add" === (a = $("#actionType").val()) && isDuplicateEntry() ? alertify.notify("This Title already exists.", "error", 6) : (o = form2object("imageUploadForm"), 
    t = $("#s3ImageUploadForm input[type='file']").val().split("\\").slice(-1)[0], 
    r = [], "selected" === o.permissions && (r = $("#availableFaculties").val().split(",")), 
    o.memberId = memberId, o.permittedFacultyIdArr = r, o.assetSize = e.val(), o.assetType = t.split(".").slice(-1)[0], 
    delete o.permissions, delete o.availableFaculties, delete o[""], (s = $.ajax({
        type: "POST",
        url: url + "/ifu?actionType=" + a,
        headers: jsonHeaders,
        dataType: "json",
        data: JSON.stringify(o)
    })).done(function(e) {
        uploadedImageData = e.ref, uploadedImgId = uploadedImageData._id.$oid;
        e = $("#clickedIDX").val();
        "" === e && (e = jsonMemberImagesArr.length), jsonImagesArr.push(uploadedImageData), 
        jsonMemberImagesArr[e] = uploadedImageData, uploadImageIntoS3();
    }), s.fail(function() {
        s.getResponseHeader("X-SessionTimeout") ? openLoginDialog() : alertify.notify("Could not add...[please see the console]", "error", 8);
    }))));
}

function uploadImageIntoS3() {
    var e = "images/" + uploadedImgId, a = ($("input[name=key]").val(e), $("#s3ImageUploadForm")[0]), a = new FormData(a), o = $.ajax({
        type: "POST",
        enctype: "multipart/form-data",
        url: "https://facultynotes.s3.amazonaws.com/",
        processData: !1,
        contentType: !1,
        timeout: 6e5,
        data: a
    });
    o.done(function() {
        alertify.notify("Successfully upload image", "success", 6), uploadedImageURL = "https://s3.ap-south-1.amazonaws.com/facultynotes/" + e, 
        initAvailableImages(), genTable(jsonMemberImagesArr);
    }), o.fail(function() {
        o.getResponseHeader("X-SessionTimeout") ? openLoginDialog() : alertify.notify("Could not add...[please see the console]", "error", 8);
    });
}

function genTable(e) {
    var a = "";
    sOrderJsonDataArr = [];
    for (var o = 0; o < e.length; o++) e[o].jsonDataArrIdx = o, sOrderJsonDataArr.push(e[o]);
    for (o = 0; o < sOrderJsonDataArr.length; o++) {
        getBooleanForProperty(sOrderJsonDataArr[o], "isEnabled", !1);
        var t = s3Location + sOrderJsonDataArr[o]._id.$oid, r = (a = (a = (a = (a = (a = (a = a + "<tr id='row_" + o + "' dbId='" + sOrderJsonDataArr[o]._id.$oid + "'>") + "<td class='td-center'><a class='btn btn-primary btn-sm' onclick='populatePageEdit(" + sOrderJsonDataArr[o].jsonDataArrIdx + ',"edit","' + sOrderJsonDataArr[o]._id.$oid + "\")'><span class='glyphicon glyphicon-edit glyphicon-white'></span> Edit</a>&nbsp;&nbsp;") + "<td class='td-center'>" + (o + 1) + "</td>") + "<td class='td-center'>" + sOrderJsonDataArr[o].title + "</td>") + "<td class='td-center'><a href='" + t + "' target='_blank' style='cursor: pointer;'>" + t + "</a></td>") + "<td class='td-center'>" + sOrderJsonDataArr[o].updatedTime.$date + "</td>", 
        a += "<td class='td-center'>", []);
        sOrderJsonDataArr[o].permittedFacultyIdArr.forEach(function(e) {
            r.push(jsonFacultiesMap[e].loginId);
        }), a = (a += 0 === r.length ? "All Faculties" : r.toString()) + "</td>" + "</tr>";
    }
    var s = $("#uploadedImagesTable tbody");
    s.empty(), s.append(a);
}

function populatePageEdit(e, a, o) {
    $("#actionType").val(a), $("#uploadedImage img").removeAttr("style").attr("src", s3Location + jsonImagesArr[e]._id.$oid), 
    $("#imgSize").val(jsonImagesArr[e].assetSize), $("#imageUploadedTitle").val(jsonImagesArr[e].title), 
    $("#s3ImageUploadForm input[type='file']").removeAttr("required");
    var t = $("#availableFaculties");
    0 < jsonImagesArr[e].permittedFacultyIdArr.length ? (t.select2("val", jsonImagesArr[e].permittedFacultyIdArr), 
    $("#onlySelectedFaculties").click(), t.removeClass("d-none")) : ($("#toAllFaculties").click(), 
    t.addClass("d-none")), "add" === a ? ($("#_id").val(""), $("#clickedIDX").val(""), 
    $("#uploadImageBtn").text("Upload")) : ($("#_id").val(o), $("#clickedIDX").val(e), 
    $("#uploadImageBtn").text("Update"));
}

$("#imageUploadModal input[name='permissions']").on("click", function() {
    $("#onlySelectedFaculties").is(":checked") ? $("#availableFaculties").removeClass("d-none") : $("#availableFaculties").addClass("d-none");
});

var memberNotesMap = {};

function displayNotesInExtraInfo() {
    if (memberNotesMap = {}, currentQHasMemberNotes()) for (var e = 0; e < cq.memberNotesArr.length; e++) {
        var a = cq.memberNotesArr[e];
        memberNotesMap[a.memberId] = a;
    }
    currentQHasBookmarks() ? addSavedBookmarks(cq.memberBookmarksMap) : $("#bookmarksModalDiv").empty();
}

function addMemberNotesBtns() {
    $("#floatingBtnsDiv").remove(), $("#memberNotesBtn, #facultyNotesBtn").remove();
    var e = $("#questionText");
    e.append("<span id='floatingBtnsDiv' style='position: absolute; top: 24px; right: 20px;'></span>"), 
    currentQHasMemberNotes() && e.append("<span id='memberNotesBtn' class='btn btn-primary btn-sm' title='Click for Notes' onclick='showMemberNotesModal()' style='margin: 0 5px;'><i class='fa fa-pencil'></i> My Notes</span>");
    0 < getFacultyNotes().length && e.append("<span id='facultyNotesBtn' class='btn btn-primary btn-sm' title='Faculty Notes' onclick='showFacultyNotesModal()' style='margin: 0 5px;'><img src='/images/faculty.png' style='width: 18px;'  alt='faculty'/> Faculty Notes</span>");
    $("#floatingBtnsDiv").append("<span id='floatingAddBtn'><a href='#' class='ct-notes-floating-circle questionPanelHeadingBG' title='Click for Notes' onclick='showMemberNotesModal()'><i class='fa fa-pencil fa-1x'></i></a><a href='#' class='ct-notes-floating-circle questionPanelHeadingBG' title='Click to add Bookmarks' onclick='showBookmarksModal()'><i class='fa fa-star-half-o fa-1x' aria-hidden='true'></i></a><a href='#' class='ct-notes-floating-circle questionPanelHeadingBG'><i class='fa fa-plus fa-1x' aria-hidden='true'></i></a></span>");
}

function showMemberNotesModal() {
    pauseMedia(), $("#additionalNotesDiv").load("member-notes.jsp?qid=" + cq._id.$oid, function() {
        initMemberNotes(), $("#memberNotesModal").modal({
            backdrop: "static",
            keyboard: !1,
            show: !0
        }), $("#myModal").scrollTo(0, "slow");
    });
}

function showFacultyNotesModal() {
    $("#additionalNotesDiv").load("member-notes.jsp?qid=" + cq._id.$oid, function() {
        for (var e, a, o = $("#facultiesNotesTabs"), t = (o.empty(), $("#facultiesNotesTabsContent")), r = (t.empty(), 
        cq.memberNotesArr), s = 0; s < r.length; s++) memberId !== r[s].memberId && (e = r[s].memberId, 
        a = r[s].facultyDetails.name, o.append("<li class='nav-item'><a href='#faculty_" + e + "' data-toggle='tab' class='nav-link'><i class='fa fa-user'> " + a + "</a></li>"), 
        t.append("<div class='row no-gutters tab-pane fade' id='faculty_" + e + "' ><div class='questionText ql-editor'>" + r[s].notes + "</div></div>"));
        $("#facultiesNotesTabs li:eq(0) a").click(), $("#facultyNotesModal").modal({
            backdrop: "static",
            keyboard: !1,
            show: !0
        }), $("#myModal").scrollTo(0, "slow");
    });
}

function showBookmarksModal() {
    pauseMedia(), $("#additionalNotesDiv").load("member-notes.jsp?qid=" + cq._id.$oid, function() {
        initBookmarks(), activateDragDrop(), $("#bookmarksModal").modal({
            backdrop: "static",
            keyboard: !1,
            show: !0
        }), $("html").hasClass("touch") && initTouchForDragAndDrop();
    });
}

function closeBookmarksModal() {
    var e = $("#bookmarksModal");
    e.modal("hide"), e.off("hidden.bs.modal"), e.on("hidden.bs.modal", function() {
        $("body").addClass("modal-open");
    });
}

function activateDragDrop() {
    $("#availableBookmarks > div, #usersBookmarks > div").draggable({
        revert: "invalid",
        containment: "document",
        helper: "clone",
        cursor: "move"
    }), $("#usersBookmarks").droppable({
        accept: "#availableBookmarks > div",
        activeClass: "ui-state-highlight",
        drop: function(e, a) {
            updateBookmark(a.draggable, "#usersBookmarks", "add");
        }
    }), $("#availableBookmarks").droppable({
        accept: "#usersBookmarks > div",
        activeClass: "ui-state-highlight",
        drop: function(e, a) {
            updateBookmark(a.draggable, "#availableBookmarks", "remove");
        }
    });
}

function updateBookmark(e, a, o) {
    e.removeAttr("style"), e.addClass("animated swing"), $(a).append(e), "add" === o ? e.find(".bookmarks-rating-div").removeClass("d-none") : "remove" === o && e.find(".bookmarks-rating-div").addClass("d-none");
}

function currentQHasBookmarks() {
    return cq.hasOwnProperty("memberBookmarksMap") && null != cq.memberBookmarksMap;
}

function initBookmarks() {
    currentQHasBookmarks() && $.each(cq.memberBookmarksMap, function(e, a) {
        var o = $("#availableBookmarks ." + e + "-bookmark");
        $("#usersBookmarks").append(o.clone(!0)), $("#usersBookmarks ." + e + "-bookmark .bookmarks-rating-div").removeClass("d-none"), 
        $("#usersBookmarks ." + e + "-bookmark .bookmarks-rating-div .fa-star:nth-child(-n + " + a + ")").addClass("bookmark-rating-color bookmark-fill"), 
        o.remove();
    });
}

function saveBookmarks() {
    var e, a = {}, o = (a.memberId = memberId, a.questionId = cq._id.$oid, {}), t = !1;
    $(".bookmarks-rating-div").removeClass("animated shake"), $.each($("#usersBookmarks > div"), function() {
        var e = $(this).data("bookmark-type"), a = $(this).find(".fa-star.bookmark-fill").length;
        if (0 === a) return alertify.notify("Please provide a star rating for the " + e + " bookmark by clicking on any of the stars below it.", "error", 8), 
        t = !0, $(this).find(".bookmarks-rating-div").addClass("animated shake"), 
        !1;
        o[e] = a;
    }), t || (_.isEmpty(o) || (a.bookmarks = o), (e = $.ajax({
        type: "POST",
        url: url + "/bms",
        headers: jsonHeaders,
        dataType: "json",
        data: JSON.stringify(a)
    })).done(function(e) {
        alertify.notify(e.msg, "success", 6), cq.memberBookmarksMap = e.ref.bookmarks, 
        addSavedBookmarks(e.ref.bookmarks), closeBookmarksModal();
    }), e.fail(function() {
        e.getResponseHeader("X-SessionTimeout") ? openLoginDialog() : alertify.notify("Could not add...[please see the console]", "error", 8);
    }));
}

function addSavedBookmarks(e) {
    $("#bookmarksModalDiv").empty(), currentQHasBookmarks() && (e = getSortedBookmarks(e), 
    $.each(e, function(e, a) {
        var o = e.toString().toUpperCase(), e = '<a class="bookmark-ribbon ' + e + '-bookmark text-center" onclick="showBookmarksModal()" title="' + o + '" style="font-size: 23px; right: ' + .25 * $("#bookmarksModalDiv > .bookmark-ribbon").length + 'em;"><div><i class="fa fa-star bookmark-star" aria-hidden="true" style="font-size: 30px;"></i><div class="bookmark-rating-val">' + a + "</div></div></a>";
        $("#bookmarksModalDiv").append(e);
    }));
}

function getSortedBookmarks(e) {
    var a = {};
    return e.hasOwnProperty("exam") && (a.exam = e.exam), e.hasOwnProperty("important") && (a.important = e.important), 
    e.hasOwnProperty("interview") && (a.interview = e.interview), e.hasOwnProperty("custom") && (a.custom = e.custom), 
    a;
}

function _ct_touchHandler(e) {
    var a = e.changedTouches[0], o = document.createEvent("MouseEvent");
    o.initMouseEvent({
        touchstart: "mousedown",
        touchmove: "mousemove",
        touchend: "mouseup"
    }[e.type], !0, !0, window, 1, a.screenX, a.screenY, a.clientX, a.clientY, !1, !1, !1, !1, 0, null), 
    a.target.dispatchEvent(o);
}

function initTouchForDragAndDrop() {
    document.addEventListener("touchstart", _ct_touchHandler, !0), document.addEventListener("touchmove", _ct_touchHandler, !0), 
    document.addEventListener("touchend", _ct_touchHandler, !0), document.addEventListener("touchcancel", _ct_touchHandler, !0);
}
//# sourceMappingURL=nm.min.js.map