function addFileForCorrectContent(t, i, l, n, o, a, r, d) {
    0 == getCTMode() && "54883bea2036d78c5efedc3a" === $("#questionType").val() && "64dbd698eae517f4425ff4c0" === $("#progLanguage").val() ? Swal.fire({
        title: "Which type of file do you wan to add?",
        html: '<div class="d-flex justify-content-center">   <div class="text-left" style="font-size: 15px;">       <input value="textFile" type="radio" name="fileType" checked>       <label style="margin-left: 5px; margin-bottom: 3px;" for="textFile">Text file</label><br>       <input value="nonTextFile" type="radio" name="fileType">       <label for="nonTextFile" style="margin-left: 5px; margin-bottom: 3px;">Non text file</label><br>   </div></div>',
        confirmButtonText: "Proceed",
        showCancelButton: !0
    }).then(function(e) {
        e.isConfirmed && ("textFile" === $("input[name='fileType']:checked").val() ? addFileForCorrectContent2(t, i, l, n, o, a, r, d) : handleNonTextFile());
    }) : addFileForCorrectContent2(t, i, l, n, o, a, r, d);
}

function addFileForCorrectContent2(e, t, i, l, n, o, a, r) {
    addFile(e, t, i, l = new Date().getTime(), e, !0, !0, !0, !1);
    addFile(e = "compilationError", "compilationErrorAddFileBtnLi", i = "compilationErrorTabPanesDiv", l, e, !1, !1, !1, !0);
}

var globalEditorObj = "", globalCopyWritingEditor = "", globalMultipleFileEditor = [];

function addFile(e, t, i, l, n, o, a, r, d, s) {
    void 0 === n && (n = "copyWriting"), void 0 === o && (o = !0), void 0 === a && (a = !0), 
    void 0 === r && (r = !0), void 0 === d && (d = !1);
    var t = $("#" + t), i = $("#" + i), c = l || new Date().getTime(), l = $(i).children().length, l = "\t<li id='" + n + "Li-" + c + "' class='nav-item multipleFilesLi " + n + "' index='" + c + "'>\t<a draggable='false' border-color: black;' href='#" + n + "Tab-" + c + "' data-toggle='tab' class='li-a-fileName nav-link'>\t\t<input class='" + n + "FileName'\t\t\tid='" + n + "FileNameSpan-" + c + "' value='fileName-" + (l + 1) + "' />", a = (d && (l = l + " \t\t<i title='Toggle ReadOnly Range' templateDivId='" + n + "Editor-" + c + "' onclick='markReadOnlyRange(\"" + n + "Editor-" + c + "\")' class='fa fa-book btn btn-sm btn-info '></i> "), 
    a && (l = l + " \t\t<i templateDivId='" + n + "Editor-" + c + "' onclick='saveFileClicked(this)' class='fa btn btn-xs btn-success fa-save'></i> "), 
    r && (l = (l = l + " \t\t<i onclick='removeFile(\"" + e + "\", this)' class='fa btn btn-xs btn-danger fa-trash'></i>") + '<label title="Toggle it ON to mark the file as Un-Editable." class="ct-sm-switch" onClick="fileEditableToggle(this, \'' + c + "', '" + e + '\')"> <input id="fileEditable-' + c + '" type="checkbox"> <span class="ct-sm-slider round"></span> </label>', 
    1 === $("#" + e + "Ul").find(".multipleFilesLi").length) && (d = $("#" + e + "Ul").find(".multipleFilesLi:eq(0)").attr("index"), 
    $("#fileEditable-" + d).prop("checked")) && 0 === $("#fileHidden-" + d).length && $("#" + e + "Li-" + d + " a").append('<label title="Toggle it ON to mark the file as Hidden." class="ct-sm-switch file-hidden" onClick="fileHiddenToggle(this, \'' + e + '\')"> <input id="fileHidden-' + d + '" type="checkbox"> <span class="ct-sm-slider round"></span> </label>'), 
    l += "\t</a></li>", $(t).before(l), s ? "100%" : "350px"), r = '\t<div id="' + n + "Tab-" + c + '" role="tabpanel" class="tab-pane h-100">\t<div id="' + n + "Editor-" + c + "Container-" + c + '" class="editorContainerDiv col-12 col-xs-12 zeroPadding">\t\t<div id="' + n + "Editor-" + c + '" class="codingEditorClass">Insert text here : ' + c + "</div>\t</div></div>", d = ($(i).append(r), 
    n + "Editor-" + c + "Container-" + c), p = ($("#" + d).css("height", a), n + "Editor-" + c), t = getSelectedQuestionTypeText();
    initEditorDiv(t, p), "correctContent" == e && 0 == getCTMode() && $("#" + n + "FileNameSpan-" + c).on("change keyup paste click", function() {
        var e = $("#" + n + "FileNameSpan-" + c).val();
        $("#compilationErrorFileNameSpan-" + c).val(e), "function" == typeof setEditorMode && setEditorMode(p, e);
    }), o || ($("#" + n + "FileNameSpan-" + c).prop("disabled", !0), $("#" + n + "FileNameSpan-" + c).prop("readonly", !0));
}

function emptyAllMultipleFileContents(e) {
    $.each($("#" + (e + "AddFileBtnLi")).prevAll(), function(e, t) {
        $(t).remove();
    }), $.each($("#" + e + "TabPanesDiv").children(), function(e, t) {
        t = $(t).children(":first").children(":first").data("editor");
        null != t && t.destroy();
    }), $("#" + e + "TabPanesDiv").empty();
}

function saveFileClicked(e) {
    var t = getSelectedQuestionTypeText(), e = $(e).attr("templateDivId");
    save(t, e);
}

function getFileContentForVisualization(e) {
    var i, n;
    if (0 != getCTMode()) return void 0 === e && (e = getSelectedQuestionTypeText()), 
    i = "correctContent", "Compilation Errors" == e && (i = "compilationError"), 
    n = [], $(".multipleFilesLi." + i).each(function() {
        var e = $(this), t = $(e).attr("id"), t = t.substring(t.indexOf("-") + 1), e = $(e).find("input").val().trim(), t = (t = $("#" + i + "Editor-" + t).data("editor").getSession().getValue()).replace(/\r\n/g, "\n");
        n.push({
            fileName: e,
            fileContent: t
        });
    }), n;
    l("XXX FATAL Error : getFileContentForVisualization() is not yet implemented in Authoring Mode.");
}

function saveAllClicked(e, t) {
    var i, n, o;
    cCompilationInProgress || cExecutionInProgress ? (alertify.log("Execution is in progress. Please try after execution completed.", "error", 5e3), 
    enableExecuteBtn()) : 0 == getCTMode() ? l("XXX FATAL Error : this saveAllClicked() should not be called...") : (void 0 === e && (e = getSelectedQuestionTypeText()), 
    i = "correctContent", "Compilation Errors" == e && (i = "compilationError"), 
    n = [], $(".multipleFilesLi." + i).each(function() {
        var e = $(this), t = $(e).attr("id"), t = t.substring(t.indexOf("-") + 1), e = $(e).find("input").val().trim(), t = (t = $("#" + i + "Editor-" + t).data("editor").getSession().getValue()).replace(/\r\n/g, "\n");
        n.push({
            fileName: e,
            fileContent: t
        });
    }), 4 == getCTMode() ? savePartialResponseInTest(t) : (isEssay(e) ? (o = jQuery.extend(!0, {}, cq)).essayAnswer = getUserContentToBeSaved() : (o = jQuery.extend(!0, {}, cq)).filesContentArrToBeSaved = getUserContentToBeSaved(), 
    savePartialResponse(o, t, !1)));
}

function removeFile(t, i) {
    alertify.set({
        labels: {
            ok: "Yes, I want to delete.",
            cancel: "No, I don't want to delete."
        }
    }), alertify.confirm("<span style='text-align:left'><i class='fa fa-info-circle text-info'></i> Press <c style='background-color: green; color:white'>Yes</c>  if you want to delete the code and test case results<hr/></span>", function(e) {
        e && (removeFileActual(t, i), "correctContent" == t) && removeFileActual("compilationError", i);
    });
}

function removeFileActual(e, t) {
    var t = $(t).closest(".multipleFilesLi").attr("index"), i = !1;
    1 === $("#" + e + "TabPanesDiv").children().length ? $("#" + e + "Editor-" + t).data("editor").getSession().setValue("Type Content here.....") : (i = $("#" + e + "Li-" + t).hasClass("active"), 
    $("#" + e + "Li-" + t).remove(), $("#" + e + "Tab-" + t).remove()), (i = 1 === $("#" + e + "TabPanesDiv").children().length ? !0 : i) && $("#" + e + "Ul").find(":first").find(":first").click(), 
    1 === $("#" + e + "Ul").find(".multipleFilesLi").length && $(".file-hidden").remove(), 
    testCases.clearCExecutionResults();
}

function setEditorTheme(e) {
    globalEditorObj && (ctEditorTheme = "ace/theme/" + e, globalEditorObj.setTheme(ctEditorTheme), 
    globalCopyWritingEditor && globalCopyWritingEditor.setTheme(ctEditorTheme), 
    globalMultipleFileEditor) && globalMultipleFileEditor.forEach(function(e) {
        e.setTheme(ctEditorTheme);
    });
}

function initEditorThemeSelect() {
    var e, t = {
        chrome: "High Contrast light 1",
        xcode: "High Contrast light 2",
        github: "High Contrast light 3",
        gob: "High Contrast dark 1",
        terminal: "High Contrast dark 2",
        cobalt: "Theme:Default"
    }, i = [];
    for (e in t) i.push({
        id: e,
        text: t[e]
    });
    var l = ctEditorTheme.lastIndexOf("/"), l = ctEditorTheme.slice(l + 1);
    $(".editorThemeSelect").select2({
        data: i,
        multiple: !1,
        allowClear: !0,
        minimumResultsForSearch: 1 / 0,
        dropdownAutoWidth: !0
    }), $(".editorThemeSelect").val(l).trigger("change");
}

function saveUserInteraction(e) {
    var t = $.ajax({
        type: "POST",
        url: "/secure/rest/st/sui",
        headers: jsonHeaders,
        dataType: "json",
        data: JSON.stringify(e)
    });
    t.done(function(e) {
        0 != e.result && l("XX Unable to connect to server to save saveUserInteraction()...");
    }), t.fail(function(e) {
        t.getResponseHeader("X-SessionTimeout") ? openLoginDialog() : alertify.log("Could not Submit...[please see the console]", "error", 8e3);
    });
}

function fileEditableToggle(e, t, i) {
    e = $(e).find("input");
    e.prop("checked", !e.prop("checked")), e.prop("checked") ? 1 < $("#" + i + "Ul").find(".multipleFilesLi").length ? $("#" + i + "Li-" + t + " a").append('<label title="Toggle it ON to mark the file as Hidden." class="ct-sm-switch file-hidden" onClick="fileHiddenToggle(this, \'' + i + '\')"> <input id="fileHidden-' + t + '" type="checkbox"> <span class="ct-sm-slider round"></span> </label>') : $(".file-hidden").remove() : $("#fileHidden-" + t).parent().remove();
}

function fileHiddenToggle(e, t) {
    e = $(e).find("input");
    e.prop("checked", !e.prop("checked")), $("#" + t + "Ul").find(".multipleFilesLi").length === $("#" + t + "Ul .file-hidden input:checked").length && (e.prop("checked", !e.prop("checked")), 
    alertify.log("All files should not be hidden", "error", 6e3));
}

function handleNonTextFile() {
    var i, l;
    Swal.fire({
        html: getImportNonTextFilesMarkup(),
        width: "50%",
        didRender: function() {
            $("#nonTextFileInput").on("change", function(e) {
                $("#error").text("");
                var t = e.target.files[0];
                t ? (e = URL.createObjectURL(t), $(".preview").removeClass("hide").html('<div class="text-left"><img src="' + e + '" style="height: 30vh; max-width: 100%;"></img></div>'), 
                (e = new FileReader()).onload = function(e) {
                    i = e.target.result, l = (t.name || "").replace(/_|-|\s|[()]/g, "");
                }, e.readAsDataURL(t)) : $(".preview").addClass("hide");
            }), $(".proceed").on("click", function() {
                i ? ($("#error").text(""), importNonTextFile(i, l)) : $("#error").text("Please select file");
            }), $(".cancel").on("click", function() {
                Swal.close();
            });
        },
        confirmButtonText: "Proceed",
        showCancelButton: !1,
        showConfirmButton: !1
    });
}

function getImportNonTextFilesMarkup() {
    return '<div class="d-flex justify-content-center" style="font-size: 15px;">   <div class="text-left">       <div class="form-group">           <label for="nonTextFileInput">File input</label>           <input type="file" id="nonTextFileInput" accept="image/*, audio/*, video/*"></input>       </div>   </div></div><div style="font-size: 13px;" class="text-left">   <span id="error" class="text-danger"></span></div><div class="preview"></div><div style="margin-top: 5px;">   <button class="btn btn-sm btn-primary proceed">Proceed</button>   <button class="btn btn-sm btn-danger cancel">Cancel</button></div>';
}

function importNonTextFile(i, l) {
    var n = Date.now();
    addFileForCorrectContent2("correctContent", "correctContentAddFileBtnLi", "correctContentTabPanesDiv", n), 
    setTimeout(function() {
        var e = $("#correctContentEditor-" + n), t = $("#compilationErrorEditor-" + n);
        $("#correctContentFileNameSpan-" + n).val(l), $("#compilationErrorFileNameSpan-" + n).val(l), 
        e.data("editor").getSession().setValue(i), t.data("editor").getSession().setValue(i), 
        $("#fileEditable-" + n).attr("checked", !0), $("#correctContentLi-" + n + " a").append('<label title="Toggle it ON to mark the file as hidden." class="ct-sm-switch file-hidden" onClick="fileHiddenToggle(this, "correctContent")">   <input id="fileHidden-' + n + '" type="checkbox" checked>   <span class="ct-sm-slider round"></span></label>'), 
        Swal.close();
    }, 500);
}
//# sourceMappingURL=mfs.min.js.map